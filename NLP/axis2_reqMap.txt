0||The issue  arrives when the optional WSDL Binding Operation message references(which are optional)  does not match with the Operations message references. Example.. WSDL	......................................................................................	<?xml version="1.0" encoding="UTF-8"?>	<!-- 	This is the main description file for the web service.	It is used to generate some code, which is used by client and server.	The data types are based on the XML Schema for license files, namely licenses.xsd. This file	is imported directly into the types definition of this web server description language file.	@author mhaller	-->	<wsdl:definitions xmlns:apachesoap="http://xml.apache.org/xml-soap"	  xmlns:impl="http://www.innovations.de/2005/v1/XMLLicenseSchema#Intf"	  xmlns:inno="http://www.innovations.de/2005/v1/XMLLicenseSchema"	  xmlns:intf="http://www.innovations.de/2005/v1/XMLLicenseSchema#Impl"	  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"	  xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"	  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"	  xmlns:xsd="http://www.w3.org/2001/XMLSchema"	  targetNamespace="http://www.innovations.de/2005/v1/XMLLicenseSchema#Impl">		  <!-- Declare the custom datatypes used in the license server web service -->	  <wsdl:types>	    <xsd:schema targetNamespace="http://www.innovations.de/2005/v1/XMLLicenseSchema">	      <!-- Import the license datatypes schema file -->	      <xsd:import schemaLocation="E:licenses.xsd" namespace="http://www.innovations.de/2005/v1/XMLLicenseSchema"/>		    </xsd:schema>	  </wsdl:types>				  <!-- The declarations of the messages. There are two types of messages:	  Request-Messages which are sent from the client to the server.	  And Response-Messages which are sent from the server to the client.	  The message have "parts" - something like wrappers for parameters.	  The parts are declared below. -->	  <!-- The QueryLicense pair	  IN: A string with a list of features	  OUT: An object of type Licenses, which is a container for LicenseType objects -->	  <wsdl:message name="QueryLicensesRequest">	    <wsdl:part name="Features" type="xsd:string"/>	  </wsdl:message>	  <wsdl:message name="QueryLicensesResponse">	    <wsdl:part name="QueryLicensesReturn" type="inno:Licenses"/>	  </wsdl:message>	  <!-- Request a single license -->	  <wsdl:message name="RequestLicenseResponse">	    <wsdl:part name="RequestLicenseReturn" type="inno:License"/>	  </wsdl:message>	  <wsdl:message name="RequestLicenseRequest">	    <wsdl:part name="UniqueIdentifier" type="xsd:string"/>	  </wsdl:message>	  <!-- Free or unlock a license which was in use -->	  <wsdl:message name="FreeLicenseRequest">	    <wsdl:part name="UniqueIdentifier" type="xsd:string"/>	  </wsdl:message>	  <wsdl:message name="FreeLicenseResponse">	    <wsdl:part name="FreeLicenseReturn" type="xsd:boolean"/>	  </wsdl:message>	  <!-- Admin Messages -->	  <wsdl:message name="InstallLicenseRequest">	    <wsdl:part name="License" type="inno:License"/>	  </wsdl:message>	  <wsdl:message name="InstallLicenseResponse">	    <wsdl:part name="InstallLicenseReturn" type="xsd:boolean"/>	  </wsdl:message>	  <wsdl:message name="GetServerStatusRequest">	  </wsdl:message>	  <wsdl:message name="GetServerStatusResponse">	    <wsdl:part name="GetServerStatusReturn" type="inno:ServerStatus"/>	  </wsdl:message>	  <wsdl:message name="ReloadRequest">	  </wsdl:message>	  <wsdl:message name="ReloadResponse">	  </wsdl:message>	  <!-- The portType definition declares all the methods of the webserver	  and which messages it takes in from the client, and which messages it send out to the client. -->	  <wsdl:portType name="ILicenseServer">	    <wsdl:operation name="QueryLicenses" parameterOrder="Features">	      <wsdl:input message="intf:QueryLicensesRequest" name="QueryLicensesRequest"/>	      <wsdl:output message="intf:QueryLicensesResponse" name="QueryLicensesResponse"/>	    </wsdl:operation>	    <wsdl:operation name="RequestLicense" parameterOrder="UniqueIdentifier">	      <wsdl:input message="intf:RequestLicenseRequest" name="RequestLicenseRequest"/>	      <wsdl:output message="intf:RequestLicenseResponse" name="RequestLicenseResponse"/>	    </wsdl:operation>	    <wsdl:operation name="FreeLicense" parameterOrder="UniqueIdentifier">	      <wsdl:input message="intf:FreeLicenseRequest" name="FreeLicenseRequest"/>	      <wsdl:output message="intf:FreeLicenseResponse" name="FreeLicenseResponse"/>	    </wsdl:operation>	    <wsdl:operation name="InstallLicense" parameterOrder="License">	      <wsdl:input message="intf:InstallLicenseRequest" name="InstallLicenseRequest"/>	      <wsdl:output message="intf:InstallLicenseResponse" name="InstallLicenseResponse"/>	    </wsdl:operation>	    <wsdl:operation name="GetServerStatus">	      <wsdl:input message="intf:GetServerStatusRequest" name="GetServerStatusRequest"/>	      <wsdl:output message="intf:GetServerStatusResponse" name="GetServerStatusResponse"/>	    </wsdl:operation>	    <wsdl:operation name="Reload">	      <wsdl:input message="intf:ReloadRequest" name="ReloadRequest"/>	      <wsdl:output message="intf:ReloadResponse" name="ReloadResponse"/>	    </wsdl:operation>	  </wsdl:portType>	  <!-- The binding part of the WSDL file describes the transport implementation.	  Here, it's defined that the webservice can be accessed via HTTP protocol (or, to be more	  specific: via SOAP HTTP) 	  The "document" style is used for interop, the "literal" use is the way how	  the parameters get wrapped (or not wrapped, in this case)	  Valid values for style are: "document" and "rpc", although there should also	  be "wrapped", which is a subtype of document. -->	  <wsdl:binding name="LicenseServerSoapBinding" type="intf:ILicenseServer">	    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>	    <wsdl:operation name="QueryLicenses">	      <wsdlsoap:operation soapAction=""/>	      <wsdl:input name="QueryLicensesRequest">	        <wsdlsoap:body use="literal"/>	      </wsdl:input>	      <wsdl:output name="QueryLicensesResponse">	        <wsdlsoap:body use="literal"/>	      </wsdl:output>	    </wsdl:operation>	    <wsdl:operation name="RequestLicense">	      <wsdlsoap:operation soapAction=""/>	      <wsdl:input name="RequestLicenseRequest">	        <wsdlsoap:body use="literal"/>	      </wsdl:input>	      <wsdl:output name="RequestLicenseResponse">	        <wsdlsoap:body use="literal"/>	      </wsdl:output>	    </wsdl:operation>	    <wsdl:operation name="FreeLicense">	      <wsdlsoap:operation soapAction=""/>	      <wsdl:input name="FreeLicenseRequest">	        <wsdlsoap:body use="literal"/>	      </wsdl:input>	      <wsdl:output name="FreeLicenseResponse">	        <wsdlsoap:body use="literal"/>	      </wsdl:output>	    </wsdl:operation>	    <wsdl:operation name="InstallLicense">	      <wsdlsoap:operation soapAction=""/>	      <wsdl:input name="InstallLicenseRequest">	        <wsdlsoap:body use="literal"/>	      </wsdl:input>	      <wsdl:output name="InstallLicenseResponse">	        <wsdlsoap:body use="literal"/>	      </wsdl:output>	    </wsdl:operation>	    <wsdl:operation name="GetServerStatus">	      <wsdlsoap:operation soapAction=""/>	      <wsdl:output name="GetServerStatusResponse">	        <wsdlsoap:body use="literal"/>	      </wsdl:output>	    </wsdl:operation>	    <wsdl:operation name="Reload">	      <wsdlsoap:operation soapAction=""/>	    </wsdl:operation>	  </wsdl:binding>	  <!-- The service definition just tells us the name of the service,	  and where (address) we can find it. As this is no public web service,	  we are not defining a full qualified domain name here, but a short hostname.	  Later, in the client, the endpoint hostname will be made changeable. -->	  <wsdl:service name="ILicenseServerService">	    <wsdl:port binding="intf:LicenseServerSoapBinding" name="LicenseServer">	      <wsdlsoap:address location="http://licenseserver:8080/licenseserver/services/LicenseServer"/>	    </wsdl:port>	  </wsdl:service>	</wsdl:definitions>	..............................................................................................................			XSD		<?xml version="1.0"?>	<!--	This schema defines all the custom datatypes for use in the license server communication.	It represents the model for licenses, license containers, and the values a license can have.	It is used by the WSDL file to generate code.	It is used by the Castor codegenerator to generate model code.	It is used by the license files to validate themselves.	-->	<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"	    targetNamespace="http://www.innovations.de/2005/v1/XMLLicenseSchema"	    xmlns:inno="http://www.innovations.de/2005/v1/XMLLicenseSchema"	    xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"	     elementFormDefault="qualified">	    <!--	    Documentation	    -->	    <xsd:annotation>	        <xsd:documentation xml:lang="en">A XML Schema for License Key Information as replacement for	            legacy file-based software license keys. Copyright (c) 2005 Innovations	            Softwaretechnologie GmbH. </xsd:documentation>	        <xsd:documentation xml:lang="de">Ein XML Schema für Lizenzschlüssel, als Ersatz für das	            bestehende dateibasierte Lizenzformat. Copyright (c) 2005 Innovations	            Softwaretechnologie GmbH. </xsd:documentation>	    </xsd:annotation>	    <!-- Importing the XML Security Schema -->				    <!-- 	    This is the root element of all license files.	     <Licenses>	          <License>	          </License>	          <License>	          </License>	          <LogEntry>	          </LogEntry>	     </Licenses>	    -->	    <!-- The container type for license keys -->	    <xsd:element name="Licenses" type="inno:LicenseContainer"/>	    <xsd:complexType name="LicenseContainer">	        <xsd:sequence>	            <xsd:element name="License" minOccurs="0" maxOccurs="unbounded" type="inno:LicenseType"/>	            <xsd:element name="LogEntry" minOccurs="0" maxOccurs="unbounded" type="inno:LogEntryType"/>	        </xsd:sequence>	    </xsd:complexType>	    <!-- A named license key binds a license to a specific person -->	    <xsd:element name="NamedLicenseModel">	        <xsd:complexType>	            <xsd:sequence>	                <xsd:element name="Person" type="inno:Identity"/>	            </xsd:sequence>	        </xsd:complexType>	    </xsd:element>	    <!-- A Node Locked License model locks a license to a specific machine -->	    <xsd:element name="NodeLockedLicenseModel">	        <xsd:complexType>	            <xsd:sequence>	                <xsd:element name="Node" type="inno:Identity"/>	            </xsd:sequence>	        </xsd:complexType>	    </xsd:element>	    <!-- A Floating License can be used concurrently by an amount of users -->	    <xsd:element name="FloatingLicenseModel">	        <xsd:complexType>	            <xsd:sequence>	                <xsd:element name="ConcurrentDevices" type="xsd:int" minOccurs="1" maxOccurs="1"	                    nillable="false"/>	                <xsd:element name="AllowMultipleInstances" type="xsd:boolean" minOccurs="0"	                    maxOccurs="1" nillable="false"/>	            </xsd:sequence>	        </xsd:complexType>	    </xsd:element>	    <!-- A Site license is only restricted to be used by employees by a single company -->	    <xsd:element name="SiteLicenseModel">	        <xsd:complexType>	            <xsd:sequence>	                <xsd:element name="Company" minOccurs="1" maxOccurs="1" type="inno:Identity"/>	            </xsd:sequence>	        </xsd:complexType>	    </xsd:element>	    <!-- Time restricted license model -->	    <xsd:element name="TimeRestrictedLicenseModel">	        <xsd:complexType>	            <xsd:sequence>	                <xsd:element minOccurs="0" name="ValidAfter" type="xsd:date"/>	                <xsd:element minOccurs="0" name="ValidBefore" type="xsd:date"/>	                <xsd:element minOccurs="0" name="ReleaseDateBefore" type="xsd:date"/>	            </xsd:sequence>	        </xsd:complexType>	    </xsd:element>	    <!-- The main License type includes signed information about the license key itself,	    meta information and optionally runtime-information -->	    <xsd:complexType name="LicenseType">	        <xsd:sequence>	            <!-- Very Important License Information -->	            <xsd:element name="SignedLicenseInfo" minOccurs="1">	                <xsd:complexType>	                    <!-- This Id is used by XML Security to reference the signed element -->	                    <xsd:sequence>	                        <xsd:element name="Vendor" type="xsd:string"/>	                        <xsd:element name="Application" type="xsd:string"/>	                        <xsd:choice>	                            <xsd:element ref="inno:NamedLicenseModel"/>	                            <xsd:element ref="inno:NodeLockedLicenseModel"/>	                            <xsd:element ref="inno:FloatingLicenseModel"/>	                            <xsd:element ref="inno:SiteLicenseModel"/>	                            <xsd:element ref="inno:TimeRestrictedLicenseModel"/>	                        </xsd:choice>	                        <!-- Extendable License Information -->	                        <xsd:element name="Feature" maxOccurs="unbounded" minOccurs="0"	                            type="inno:FeatureType"/>	                    </xsd:sequence>	                    <xsd:attribute name="Id" use="required" type="xsd:string"/>	                </xsd:complexType>	            </xsd:element>	            <!-- The position of the Digital Signature for this License -->	            <xsd:element ref="dsig:Signature" minOccurs="0" maxOccurs="unbounded"/>	            <!-- Additional License Information -->	            <xsd:element name="MetaInfo" minOccurs="0">	                <xsd:complexType>	                    <xsd:sequence>	                        <!-- Vendor/Application Information -->	                        <xsd:element minOccurs="0" name="Description" type="xsd:string"/>	                        <xsd:element minOccurs="0" name="Creation" type="xsd:date"/>	                    </xsd:sequence>	                </xsd:complexType>	            </xsd:element>	            <!-- Additional Runtime License Information -->	            <xsd:element name="RuntimeInfo" minOccurs="0">	                <xsd:complexType>	                    <xsd:sequence>	                        <!-- Server-related Runtime Information -->	                        <xsd:element minOccurs="0" maxOccurs="1" name="Locked" type="xsd:boolean"/>	                        <xsd:element minOccurs="0" maxOccurs="1" name="LockedByUser"	                            type="xsd:string"/>	                        <xsd:element minOccurs="0" maxOccurs="1" name="LockedSince" type="xsd:date"/>	                        <xsd:element minOccurs="0" maxOccurs="1" name="LockedUntil" type="xsd:date"	                        />	                    </xsd:sequence>	                </xsd:complexType>	            </xsd:element>	        </xsd:sequence>	    </xsd:complexType>	    <!-- Error Codes -->	    <xsd:simpleType name="StatusCode">	        <xsd:annotation>	            <xsd:documentation>Status codes being used in logfile</xsd:documentation>	        </xsd:annotation>	        <xsd:restriction base="xsd:int">	            <xsd:enumeration value="200" id="STATUS_OK"/>	            <xsd:enumeration value="403" id="STATUS_ERR_NO_AUTH"/>	            <xsd:enumeration value="404" id="STATUS_ERR_NOT_FOUND"/>	            <xsd:enumeration value="500" id="STATUS_ERR_INTERNAL"/>	        </xsd:restriction>	    </xsd:simpleType>	    <!-- Represents an identity, namely a person, a company or a machine -->	    <xsd:complexType name="Identity">	        <xsd:sequence>	            <xsd:element name="Name" type="xsd:string" minOccurs="0" maxOccurs="1"/>	            <xsd:element name="Address" type="xsd:string" minOccurs="0" maxOccurs="1"/>	            <xsd:element name="EMail" type="xsd:string" minOccurs="0" maxOccurs="1"/>	            <xsd:element name="Hostname" type="xsd:string" minOccurs="0" maxOccurs="1"/>	            <xsd:element name="IPAddress" type="xsd:string" minOccurs="0" maxOccurs="1"/>	            <xsd:element name="MACAddress" type="xsd:string" minOccurs="0" maxOccurs="1"/>	        </xsd:sequence>	    </xsd:complexType>	    <!-- This is a complex type, which represents a map (key and value pairs) for	    defining features of a license. -->	    <xsd:complexType name="FeatureType">	        <xsd:attribute name="name" type="xsd:string" use="required"/>	        <xsd:attribute name="value" type="xsd:string" use="required"/>	        <!-- This can be used to differentiate content types, e.g.	        to use some basic scripting language like:	            <Feature name="majorVersion" type="script" value="&gt;=3 &amp;&amp; &lt;= 4"/>	         -->	        <xsd:attribute name="type" type="xsd:string" default="plain" use="optional"/>	    </xsd:complexType>	    <!--	    Admin-Level: Server Management	    -->	    <xsd:complexType name="ServerStatus">	        <xsd:sequence>	            <xsd:element name="VersionString" maxOccurs="1" minOccurs="0" type="xsd:string"/>	            <xsd:element name="NumberLicenses" maxOccurs="1" minOccurs="0" type="xsd:int"/>	            <xsd:element name="NumberQueries" maxOccurs="1" minOccurs="0" type="xsd:long"/>	            <xsd:element name="NumberRequests" maxOccurs="1" minOccurs="0" type="xsd:long"/>	            <xsd:element name="RegistreeString" maxOccurs="1" minOccurs="0" type="xsd:string"/>	            <xsd:element name="UptimeSince" maxOccurs="1" minOccurs="0" type="xsd:duration"/>	        </xsd:sequence>	    </xsd:complexType>	    <!-- Server Stuff -->	    <xsd:complexType name="LogEntryType">	        <xsd:sequence>	            <xsd:element name="TimeStamp" type="xsd:date"/>	            <xsd:element name="RemoteUser" type="xsd:string"/>	            <xsd:element name="RemoteHost" type="xsd:string"/>	            <xsd:element name="StatusCode" type="inno:StatusCode"/>	            <xsd:element name="LicenseID" type="xsd:string"/>	        </xsd:sequence>	    </xsd:complexType>		</xsd:schema>
1||SOAP reponses sent at the Server and SOAP Request send by the Client are always 1.1.  There is no way to send the SOAP1.2 messages.
2||The code that handles the "scope" of the service object (AbstractMessageReceiver.getTheImplementationObject()) is buggy in M2 release. I checked the latest code in the CVS today(1:00 PM IST on 5 july) and the code is improved but I think there is still one problem. Handling of the application scope is wrong :(		the current code is :		 } else if (scopeParam != null &&  Constants.APPLICATION_SCOPE.equals(scopeParam.getValue())) {	            SessionContext globalContext = msgContext.getSessionContext();	            synchronized(globalContext){	... 		Shouldn't it be 		SessionContext globalContext = msgContext.getServiceContext();		or 		SessionContext globalContext = msgContext.getSystemContext(); ?		I am not sure which one, but certainly not msgContext.getSessionContext(); right?
3||It's better to have a directory resolving object available at the run time with Axis 2. 	It  should be able to provide the full path for a folder or a file when given a relative path for a folder or file.	Care should be taken about  different  OS's and different ways one can deploy Axis2 (in a Servelet container, Simple Axis server...)		MTOM impl needs this for file caching. As well as in samples.
4||AddressingInHandler.extractCommonAddressingParameters() doesn't set the wsa:To properly.		 if (AddressingConstants.WSA_TO.equals(soapHeaderBlock.getLocalName())) {	      epr = messageInformationHeadersCollection.getTo();	       if (epr == null) {	            epr = new EndpointReference(AddressingConstants.WSA_TO, soapHeaderBlock.getText());	             messageInformationHeadersCollection.setTo(epr);	       }	}		The above code from the AddressingInHandler.extractCommonAddressingParameters() won't override the 'To' already set by the TransportListener. 		The code sould have been 		 if (AddressingConstants.WSA_TO.equals(soapHeaderBlock.getLocalName())) {	      epr = messageInformationHeadersCollection.getTo();	       if (epr == null) {	            epr = new EndpointReference(AddressingConstants.WSA_TO, "");	             messageInformationHeadersCollection.setTo(epr);	       }	      epr.setAddress(soapHeaderBlock.getText())	}		The actual problem we faced is the when the wsa:To has a value with a query string(e.g http://localhost:8081/axis2/services/DiagnosticLogRecordService/Get?ResourceURI=(http://example.com/xxx)), messageInformationHeadersCollection.getTo() returns me the value withought the query string(http://localhost:8081/axis2/services/DiagnosticLogRecordService/Get)!.
5||will attach a test case
6||The fault handling code in InOutMEPClient.invokeBlocking() looks like this:	 if (resenvelope.getBody().hasFault()) {	           throw new AxisFault(resenvelope.getBody().getFault().getException());	  }		But how can we expect to have an Exception element in the details element of a soap fault, always?	So when we get a SOAP Fualt withought an exception element, the Call throws an Axisfault with the message 		org.apache.axis2.engine.AxisFault: No Exception element found in the SOAP Detail element; nested exception is:	java.lang.Exception: No Exception element found in the SOAP Detail element	at org.apache.axis2.clientapi.InOutMEPClient.invokeBlocking(InOutMEPClient.java:159)	at org.apache.axis2.clientapi.Call.invokeBlocking(Call.java:95)		which is of no use. It doesn't tell me any thing about the acatual fault recieved.		It will be better if InOutMEPClient.invokeBlocking()  throws an AxisFault with the content of the Fault detail element.		Also the AxisFault does contain the faulCode, subCode, reason etc. of the SOAPFault message recieved!
7||Throgh the Axis2 web addmin interfce provide a way to remove (turn off web services)	provide a way to change service specfic parameters
8||Currently Call has only a method to enagage a module (Call.engageModule(QName moduleName)), but no method to check if a module is already engaged. It will be useful to have a method Call.isEngaged(QName moduleName) as in AxisConfiguration.		Or call.engageModule() should not try to enagage the module if the module is already engaged.
9||Most of our test cases uses the our http transport even though defult is commons .. I get rid of our transport and found that number of test cases failing with the commons one. I am working on it.		I am planning to check in the code that remove the http transport while excluding the test failed.
10||Does xml/core work even when activation/javamail jars are absent? I'd think we need to do this by 1.0.		thanks,	dims
11||Since we mandate JDK1.4 as the minimum JDK version, Let's please use MerlinIO from Axis 1.X instead of the JDK13IO that we currently use. It loads and saves more kinds of images than JDK13IO.		thanks,	dims
12||When serilizing following OMElement		<foo xmlns:a="http://opensource.lk">	  <bar1 b:attr="test attr value1" xmlns:b="http://opensource.lk/ns1">test1</bar1>	  <bar2 b:attr="test attr value2" xmlns:b="http://opensource.lk/ns1">test2</bar2>	</foo>		Produced output is:		<foo xmlns:a="http://opensource.lk">	  <bar1 b:attr="test attr value1">test1</bar1>	  <bar2 b:attr="test attr value2">test2</bar2>	</foo>		Note that the attribute namespaces are missing.		This is a blocker for the WS-Security interop tests :-(		Will attach a test to reproduce the problem.
13||In AxisEngine there are methods to store and retrieve data 		public Object store(ConfigurationContext context, Object obj) 	public Object retrieve(ConfigurationContext context, Object key) 		And the underline implementations is based on an interface , so there should be a way to specify the implementation class in axis2.xml
14||for soap 1.2 the SOAPAction value needs to be set as a parameter of the content type header and not as the SOAPAction http header.
15||I've finally tracked down what I thought was a classloader problem, namely the runtime couldnt find my service class.		the problem was I'd put in a linefeed in the declaration	  <parameter name="ServiceClass" locked="xsd:false">	    org.smartfrog.services.deployapi.transport.endpoints.PortalEndpoint</parameter>		And because there is no trim() called on the read data, the class wasnt being found. And of course extra whitespace isnt obvious in error messages, particularly those you arent used to.		I would recommend that everywhere you are extracting text from inside an XML element, you trim it first.
16||I wish the codegen tool generated code was indented nicely so that it improves redability and understandability of the generated code.
17||Seeing numerous Javadoc warnings when building OM javadoc using JDK 1.4.		This might take some time.  I'm working on patches that I hope Axis developers will apply.
18||Seems like its not possible to access the out message context of a web service invocation, from an inflow handler placed in the Dispatch or PostDispatch phases. - I experienced this with a blocking in-out message on a single channel.		In the above instances the we can access the operation context from the message context in the inflow with:	OperationContext opCtx = msgContext.getOperationContext();	but both 'inMessageContext' and 'outMessageContext' references were null.		I ran into this problem when updating the security module, where we have to communicate the signature 'values' of the outgoing message to the handler in the inflow to verify against the values sent in the wsse11:SignatureConfirmation element.		The workaround used for this situation is to have a ThreadLocal reference in a util class to hold the values set by the outflow handler (WSDoAllSender) and to be picked up by the inflow handler (WSDoAllReceiver)		What do u folks think about this?
19||The OMNode interface includes functions like:	    public void setNextSibling(OMNode node);	    public void setPreviousSibling(OMNode previousSibling);	    public void setParent(OMContainer element);	    public void setComplete(boolean state);	    public void setType(int nodeType) throws OMException;		OMContainer includes:	    public void setComplete(boolean state);	    public void setFirstChild(OMNode omNode);		The availability of these functions in the interface means that clients can accidentally or intentionally misbehave and corrupt the data structures.		For example, intentional corruption:		OMNode next = om.getNextSibling();	om.detach();	next.setPreviousSibling(om);		Or the accidental:	OMElement parent = theParent;	OMNode lastChild = parent.getLastChild();	lastChild.setNextSibling(theNewSibling);  // you might reasonably think that this will insert into parent!		Where possible, these functions ought to be defined in a package visible interface particular to the implementation package, so that only the implementation can alter crucial details that affect the integrity of the tree structure.
20||In CommonsHttpTransportSender, the timeout for a read is hard coded to 60s. this is too short for debugging sessions, and for some uses of blocking two-way SOAP. Please make this a configurable option.
21||Extracted from the mail from Tushar Inamdar:		Please note that this error refers to Axis 2 v0.92. I dropped the axis2.war in my Tomcat webapps directory. Validation passed, but when I try to list the services, it generates the following StackTrace. I tried this under two independent environments to get the same result.		Environment:	J2SE 5.0 _04	Tomcat 5.5.9	WinXP		type Exception report		message		description The server encountered an internal error () that prevented it from fulfilling this request.		exception		javax.servlet.ServletException: Servlet.init() for servlet AxisServlet threw exception		org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)		org.apache.catalina.connector.CoyoteAdapter.service	(CoyoteAdapter.java:148)		org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)		org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744)		org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket	(PoolTcpEndpoint.java:527)		org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)		org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)		java.lang.Thread.run	(Unknown Source)		root cause		java.lang.NoClassDefFoundError: org.apache.ws.security.handler.WSHandler		java.lang.Class.forName0(Native Method)		java.lang.Class.forName(Unknown Source)		org.apache.axis2.deployment.DeploymentEngine.getHandlerClass	(DeploymentEngine.java:535)		org.apache.axis2.deployment.DeploymentEngine.addFlowHandlers(DeploymentEngine.java:516)		org.apache.axis2.deployment.DeploymentEngine.addNewModule(DeploymentEngine.java:547)		org.apache.axis2.deployment.DeploymentEngine.doDeploy	(DeploymentEngine.java:652)		org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:219)		org.apache.axis2.deployment.listener.RepositoryListenerImpl.update(RepositoryListenerImpl.java:142)			org.apache.axis2.deployment.listener.RepositoryListenerImpl.init(RepositoryListenerImpl.java:155)		org.apache.axis2.deployment.listener.RepositoryListenerImpl.<init>(RepositoryListenerImpl.java:72)		org.apache.axis2.deployment.scheduler.SchedulerTask	.<init>(SchedulerTask.java:42)		org.apache.axis2.deployment.DeploymentEngine.startSearch(DeploymentEngine.java:395)		org.apache.axis2.deployment.DeploymentEngine.load(DeploymentEngine.java:253)		org.apache.axis2.context.ConfigurationContextFactory.buildConfigurationContext	(ConfigurationContextFactory.java:48)		org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:62)		org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)		org.apache.catalina.connector.CoyoteAdapter.service	(CoyoteAdapter.java:148)		org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)		org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744)		org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket	(PoolTcpEndpoint.java:527)		org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)		org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)		java.lang.Thread.run	(Unknown Source)
22||As per email from Sanjiva (http://marc.theaimsgroup.com/?l=axis-dev&m=112812822615088&w=2), this bug captures his suggestion that:		OMDocument.serialize() --> serializeAndConsume	OMDocument.serializeWithCache() --> serialize		I concur.		Also from that email thread, OMDocumentImpl.buildNext() should throw an IllegalStateException() if the "serializeAndConsume()" function has been used.
23||The following functions:		OMNode.serializeWithCache(OMOutputImpl omOutput)	OMNode.serialize(OMOutputImpl omOutput)		OMDocument.serialize(OMOutputImpl omOutput)	OMDocument.serialize(OMOutputImpl omOutput, boolean includeXMLDeclaration)	OMDocument.serializeWithCache(OMOutputImpl omOutput)	OMDocument.serializeWithCache(OMOutputImpl omOutput, boolean includeXMLDeclaration)		All reference OMOutputImpl - which is found in the "om.impl" package, rather than the "om" package.  It seems to me that perhaps there should be an interface called "OMOutput", or something like that.
24||I have a client that sends a document to my Axis2 web service (doc/lit). In the document I have XML comments which I can see on the wire. With these comments I get a ClassCastException during the deserialization process. Without comments things work fine.		I tracked down the problem a little bit and found the issue in the class org.apache.axis2.om.impl.llom.OMStaxWrapper in the method getText (line 372) where lastNode, which is actually from type OMComment, is casted to OMText. This causes the ClassCastException.		Sorry, can't provide any test case.
25||running WSDL2Code on a WSDL that has operations with headers generates code that doesn't compile, in addition, headers get repeated multiple times in the method signatures, e.g.		        public codegen.databindingurn_partner_soap_sforce_com.GetDeletedResponseDocument getDeleted(	         codegen.databindingurn_partner_soap_sforce_com.GetDeletedDocument param9,	         codegen.databindingurn_partner_soap_sforce_com.SessionHeaderDocument param10,	         codegen.databindingurn_partner_soap_sforce_com.CallOptionsDocument param11,	         codegen.databindingurn_partner_soap_sforce_com.SessionHeaderDocument param12,	         codegen.databindingurn_partner_soap_sforce_com.CallOptionsDocument param13,	         codegen.databindingurn_partner_soap_sforce_com.SessionHeaderDocument param14,	         codegen.databindingurn_partner_soap_sforce_com.CallOptionsDocument param15,	         codegen.databindingurn_partner_soap_sforce_com.CallOptionsDocument param16,	         codegen.databindingurn_partner_soap_sforce_com.SessionHeaderDocument param17,	         codegen.databindingurn_partner_soap_sforce_com.CallOptionsDocument param18,	         codegen.databindingurn_partner_soap_sforce_com.AssignmentRuleHeaderDocument param19,	         codegen.databindingurn_partner_soap_sforce_com.SessionHeaderDocument param20,	         codegen.databindingurn_partner_soap_sforce_com.CallOptionsDocument param21) throws java.rmi.RemoteException{		compile errors include such things as	Severity	Description	Resource	In Folder	Location	Creation Time	2	The method toOM(LoginDocument) in the type SoaploginDatabindingSupporter is not applicable for the arguments (SessionHeaderDocument)	SoapStub.java	axis2PartnerTest/codegen	line 505	September 29, 2005 7:56:44 PM	Severity	Description	Resource	In Folder	Location	Creation Time	2	The method toOM(GetDeletedDocument) in the type SoapgetDeletedDatabindingSupporter is not applicable for the arguments (AssignmentRuleHeaderDocument)	SoapStub.java	axis2PartnerTest/codegen	line 783	September 29, 2005 7:56:44 PM		I'll attach the WSDL.
26||Addressing In Handler does not extract  information in the Adressing headers other than wsa:To and wsa:Action when used with addressing final namespace....		Problems with Axis2 addressing reference parameter handling has  made the progress of  the Kandula2 project to a stand still. I hope Axis2 devs will fix these Addressing issues soon allowing Kandula2 to make progress.....
27||The new change to the WSDLPump made this to fail. Our rule for making schema's by  wrapping causes this WSDL to have 2 identical global elements!
28||According to Ant Elder : Calling to UUIDGenerator.getUUID() is _really_ slow, takes about	1ms on my machine, accounting for about 65% of the total service invocation!		Solution Proposed by him : To make the UUID generator a bit faster how about doing all the complicated	computation to come up with a unique ID just the one time, then for all	subsequent requests just append an incrementing integer onto the original	unique id.
29||One can see two copies of addressing headers in the OUT message. The reason for this seems to be that the addressing out handler is being engaged twice in the out flow.
30||When we prohrammatically create an OM tree and when we are getting events, the last event recd is an END_DOCUMENT event. Since we are not throwing a START_DOCUMENT event, I think we should not throw the END_DOCUMENT events at should stop after throwing the END_ELEMENT event for the root element. 	This is a problem when some one feeds these events to a another thing like ADBPullParser, or a data binding tool.
31||When doing Call.invokeNonBlocking() over a single transport connection, the client JVM doesn't exit becuase 10 Axis2 thread pool worker threads are still running. I think we should make the ThreadWorker threads deamon threads. 		May be we need to add an constructor to ThreadWorker class like		public ThreadWorker(){	      this.setDaemon(true);	 }		Does that make sense?		Gopal.
32||The Code generation Engine throughs a null pointer Exception when there is no Input message in the binding.	Reported by Stuart, Jay Cameron <Jay.Stuart@usi.net>		Exception in thread "main"	org.apache.axis2.wsdl.codegen.CodeGenerationException	: java.lang.NullPointerException	       at	org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGener	ationEngine.java:104)	       at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:30)	       at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	Caused by: java.lang.NullPointerException	       at	org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.foo(XMLBean	sExtension.java:270)	       at	org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.checkCompat	ibility(XMLBeansExtension.java:264)	       at	org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLB	eansExtension.java:74)	       at	org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGener	ationEngine.java:75)	       ... 2 more
33||StxOMBuilder omits the settings for the namespace that is bound to the xml prefix. Hence it always return NULL for any attribute value which is bound to that namespace.		e.g.	<wsp:Policy xml:base="uri:thisBase"	xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy">	 ...	</wsp:Policy>		The attribute 'xml:base' always returns as NULL in the corresponding OMElement. The namespace bound to xml prefix is fixed and should be wired in any parser that is namespace aware.
34||Operation context returns its parents parent as the Configuration context . This happens to be Service Group context.			            ConfigurationContext configurationContext =	operationContext.getEngineContext();		...			I get the following exception:			java.lang.ClassCastException	        at	org.apache.axis2.context.OperationContext.getEngineContext(OperationContext.java:147)	        at	org.astrodas.ws.server.AstrodasServerMessageReceiver.invokeBusinessLogic(AstrodasServerMessageReceiver.java:41)	        at	org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver.receive(AbstractInOutSyncMessageReceiver.java:36)	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:158)	        at	org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:211)	        at	org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:181)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)	        at	org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)	        at	org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)	        at	org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214)	        at	org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)	        at	org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)	        at	org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)	        at	org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)	        at	org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)	        at	org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:825)	        at	org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:738)	        at	org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:526)	        at	org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)	        at	org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)	        at java.lang.Thread.run(Thread.java:552)
35||I was wondering if the current maintainer of AxisServlet could review the following changes to AxisServlet.   The refactoring is aimed at improving the extensibility of AxisServlet by allowing the override of initConfigContext().		The use-case I am trying to support is to obtain a ConfigurationContext from JNDI (instead of directly loading from file system) to share ConfigurationContext between loosely-coupled components in different classloading hierarchies and/or where the configuration repository is not deployed in the servlet's /WEB-INF directory.		I'm open to other approaches if anyone has better ideas on how to abstract the initialization of the ConfigurationContext, such as enhancing the ConfigurationContextFactory.  I was just going for the simplest solution to support this kind of extensibility.
36||Trying to get the wsdl in  AXIS2-184 bug working with ADB, am getting the following exception.		Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: org.apache.axis2.databinding.schema.SchemaCompilationException: java.lang.StringIndexOutOfBoundsException: String index out of range: -1		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:104)		at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:30)		at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	Caused by: java.lang.RuntimeException: org.apache.axis2.databinding.schema.SchemaCompilationException: java.lang.StringIndexOutOfBoundsException: String index out of range: -1		at org.apache.axis2.wsdl.codegen.extension.SimpleDBExtension.engage(SimpleDBExtension.java:122)		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:75)		... 2 more	Caused by: org.apache.axis2.databinding.schema.SchemaCompilationException: java.lang.StringIndexOutOfBoundsException: String index out of range: -1		at org.apache.axis2.databinding.schema.writer.JavaBeanWriter.write(JavaBeanWriter.java:104)		at org.apache.axis2.databinding.schema.SchemaCompiler.processNamedComplexSchemaType(SchemaCompiler.java:368)		at org.apache.axis2.databinding.schema.SchemaCompiler.processSchema(SchemaCompiler.java:281)		at org.apache.axis2.databinding.schema.SchemaCompiler.processElement(SchemaCompiler.java:225)		at org.apache.axis2.databinding.schema.SchemaCompiler.process(SchemaCompiler.java:449)		at org.apache.axis2.databinding.schema.SchemaCompiler.processParticle(SchemaCompiler.java:418)		at org.apache.axis2.databinding.schema.SchemaCompiler.processNamedComplexSchemaType(SchemaCompiler.java:343)		at org.apache.axis2.databinding.schema.SchemaCompiler.processSchema(SchemaCompiler.java:281)		at org.apache.axis2.databinding.schema.SchemaCompiler.processElement(SchemaCompiler.java:225)		at org.apache.axis2.databinding.schema.SchemaCompiler.processElement(SchemaCompiler.java:204)		at org.apache.axis2.databinding.schema.SchemaCompiler.compile(SchemaCompiler.java:139)		at org.apache.axis2.databinding.schema.SchemaCompiler.compile(SchemaCompiler.java:100)		at org.apache.axis2.wsdl.codegen.extension.SimpleDBExtension.engage(SimpleDBExtension.java:103)		... 3 more	Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1		at java.lang.String.substring(Unknown Source)		at org.apache.axis2.databinding.schema.writer.JavaBeanWriter.process(JavaBeanWriter.java:215)		at org.apache.axis2.databinding.schema.writer.JavaBeanWriter.write(JavaBeanWriter.java:99)		... 15 more		Thanks,	dims
37||If one runs Axis1.X's wsdl2java to generate both server and client, in the deploy.wsdd there are entries for each of the services specified in the /wsdl:definitions/wsdl:service. However in Axis2, we generate only 1 service in services.xml		Secondly, Axis 1.X generates a ServiceLocator which has information on *ALL* the endpoints and methods to access each of them. We need something similar for Axis2.
38||Hi,		I ran "java org.apache.axis2.wsdl.WSDL2Java -d adb -o work -s -p samples.ping -t -ss -sd -uri axis2modulessecurityinteropping.wsdl" then created an aar, dropped the services.xml and service.wsdl as follows. 		PingPort	---META-INF	        service.wsdl	        services.xml		When i run tomcat and view the wsdl. it's not the correct one that i placed in the META-INF directory.		thanks,	dims
39||Most of the Interop Tests in Integration/itest fail due to various reasons and I've started fixing those.		These interop tests have used XMLComparatorInterop to compare the returned Soap Envelope with the expected response. Since this class contains errors, we decided not to use it anymore. Instead, the /compare /method in WhiteMesaInterop class was changed and a new method, /compareXML /is added. So, should we remove XMLComparatorInterop, since it is not used anymore?
40||The recursive method WSDLPump.pushSchemaElement(...) does not protect against schemas with mutual recursion.  A check of already processed namespaces could be used to prevent the stack overflow in a manner similar to:		   ...	/** begin mod **/	    private HashSet schemaCache = new HashSet();	/**  end mod  **/		    private void pushSchemaElement(Schema originalSchema,Stack stack){	        if (originalSchema==null){	            return;	        }		/** begin mod **/	        if ( schemaCache.contains(originalSchema.getDocumentBaseURI())) {	            return;	        } else {	            schemaCache.add(originalSchema.getDocumentBaseURI());	        }	/**  end mod  **/		        stack.push(originalSchema);	        ...
41||WSDL contains soapAction="", so it should generate a SOAPAction: "" header, but doesn't.		POST /services/Soap/c/7.0 HTTP/1.1	User-Agent: Axis/2.0	SOAPAction: 	Connection: Keep-Alive	Host: www.salesforce.com	Transfer-Encoding: chunked	Content-Type: text/xml; charset=UTF-8
42||Please run WSDL2Java against the modulesintegrationtestsampleswsdlbenchBenchmark.wsdl and try to compile the generated code.		Compiling 55 source files to C:BENCHbuildclasses	C:BENCHsrceduindianaextremewwwwsdlbenchmark1EchoMeshInterfaceObjectsRequest.java:74: cannot find symbol	symbol  : method convertToArrayOfMeshInterfaceObject(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setInput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfMeshInterfaceObject(	                                                                                        ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1EchoMeshInterfaceObjectsResponse.java:74: cannot find symbol	symbol  : method convertToArrayOfMeshInterfaceObject(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setOutput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfMeshInterfaceObject(	                                                                                         ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1EchoSimpleEventsRequest.java:74: cannot find symbol	symbol  : method convertToArrayOfSimpleEvents(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setInput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfSimpleEvents(	                                                                                        ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1EchoSimpleEventsResponse.java:74: cannot find symbol	symbol  : method convertToArrayOfSimpleEvents(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setOutput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfSimpleEvents(	                                                                                         ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1ReceiveMeshInterfaceObjectsRequest.java:74: cannot find symbol	symbol  : method convertToArrayOfMeshInterfaceObject(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setInput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfMeshInterfaceObject(	                                                                                        ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1ReceiveSimpleEventsRequest.java:74: cannot find symbol	symbol  : method convertToArrayOfSimpleEvents(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setInput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfSimpleEvents(	                                                                                        ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1SendMeshInterfaceObjectsResponse.java:74: cannot find symbol	symbol  : method convertToArrayOfMeshInterfaceObject(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setOutput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfMeshInterfaceObject(	                                                                                         ^	C:BENCHsrceduindianaextremewwwwsdlbenchmark1SendSimpleEventsResponse.java:74: cannot find symbol	symbol  : method convertToArrayOfSimpleEvents(java.lang.String)	location: class org.apache.axis2.databinding.utils.ConverterUtil	                        object.setOutput(org.apache.axis2.databinding.utils.ConverterUtil.convertToArrayOfSimpleEvents(	                                                                                         ^	Note: Some input files use unchecked or unsafe operations.	Note: Recompile with -Xlint:unchecked for details.	8 errors		thanks,	dims
43||C:OAGISGetShowBalanceFlatCompositeBalanceBOD_05FlatWSDL>wsdl2java -s -d xmlbeans -o c:codeaxis2 -uri SOAPFrontGetShowBalanceJMS.wsdl	fails and reports problems 		Same wsdl runs OK with xmlbeans-2.1.0	C:OAGISGetShowBalanceFlatCompositeBalanceBOD_05FlatWSDL>scomp -src xmlbeansrc SOAPFrontGetShowBalanceJMS.wsdl	Time to build schema type system: 1.321 seconds	Time to generate code: 2.324 seconds	Time to compile code: 7.681 seconds	Compiled types to: xmltypes.jar		C:OAGISGetShowBalanceFlatCompositeBalanceBOD_05FlatWSDL>wsdl2java -s -d xmlbeans -o c:codeaxis2 -uri SOAPFrontGetShowBalanceJMS.wsdl		Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException	: java.lang.RuntimeException: org.apache.xmlbeans.XmlException: The filename, di	rectory name, or volume label syntax is incorrect (schemaorg_apache_xmlbeans.sys	tem.s5EC1B4967B23C5343BF5CD12561C30EE.schemaorg_apache_xmlbeans/javaname/org/ope	napplications/www/oagis/_9/currencycode/_54217:2001/CurrencyCodeContentType) - c	ode 9	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGener	ationEngine.java:118)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:31)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	Caused by: java.lang.RuntimeException: org.apache.xmlbeans.XmlException: The fil	ename, directory name, or volume label syntax is incorrect (schemaorg_apache_xml	beans.system.s5EC1B4967B23C5343BF5CD12561C30EE.schemaorg_apache_xmlbeans/javanam	e/org/openapplications/www/oagis/_9/currencycode/_54217:2001/CurrencyCodeContent	Type) - code 9	        at org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLB	eansExtension.java:205)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGener	ationEngine.java:80)	        ... 2 more	Caused by: org.apache.xmlbeans.XmlException: The filename, directory name, or vo	lume label syntax is incorrect (schemaorg_apache_xmlbeans.system.s5EC1B4967B23C5	343BF5CD12561C30EE.schemaorg_apache_xmlbeans/javaname/org/openapplications/www/o	agis/_9/currencycode/_54217:2001/CurrencyCodeContentType) - code 9	        at org.apache.xmlbeans.XmlBeans.wrappedException(XmlBeans.java:149)	        at org.apache.xmlbeans.XmlBeans.compileXmlBeans(XmlBeans.java:673)	        at org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLB	eansExtension.java:179)	        ... 3 more	Caused by: org.apache.xmlbeans.SchemaTypeLoaderException: The filename, director	y name, or volume label syntax is incorrect (schemaorg_apache_xmlbeans.system.s5	EC1B4967B23C5343BF5CD12561C30EE.schemaorg_apache_xmlbeans/javaname/org/openappli	cations/www/oagis/_9/currencycode/_54217:2001/CurrencyCodeContentType) - code 9	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$XsbReader.getSav	erStream(SchemaTypeSystemImpl.java:2214)	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$XsbReader.writeR	ealHeader(SchemaTypeSystemImpl.java:1589)	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl.savePointerFile(	SchemaTypeSystemImpl.java:373)	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl.savePointersForC	lassnames(SchemaTypeSystemImpl.java:356)	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl.savePointers(Sch	emaTypeSystemImpl.java:337)	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl.save(SchemaTypeS	ystemImpl.java:1305)	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler.compile(Sche	maTypeSystemCompiler.java:230)	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.	java:39)	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces	sorImpl.java:25)	        at java.lang.reflect.Method.invoke(Method.java:585)	        at org.apache.xmlbeans.XmlBeans.compileXmlBeans(XmlBeans.java:665)	        ... 4 more
44||I generated code using ADB for the attached Schame and I got the response as attached file , but databing rsponse gives me only one object eventhogh there are more than one object in the reponse. And othere thing is when the response is OMElemenent array databing can not handle that.
45||Will attach a Benchmark.wsdl. which is basically the doc/lit version of Alek's wsdl (http://www.extreme.indiana.edu/xgws/soap_bench/)
46||The classloader used for AAR doesn't work with Spring - when I put Spring inside the lib directory of the AAR, it's not able to access its applicationContext.xml. If I move the applicationContext to the WEB-INF/classes directory, then Spring is able to find it, but not to load the classes defined in it from the AAR.		However, I am able to access files in the AAR from within my own code directly inside the .AAR.		When I initially tried to reproduce this, I thought I wasn't able to access the contents of the .AAR at all - but I think this was because I was connecting to Tomcat via a debugger and running the "getResource" code in the context of the debug session, which seems to have given different results than when I call getResource from code.		This sounds like the behaviour I'd expect if Spring was in the Axis lib directory - but it isn't.		--		Error:		org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name 'myBean' defined in class path resource [testApplicationContext.xml]: Bean class [classpathtest.MyBean] not found; nested exception is java.lang.ClassNotFoundException: classpathtest.MyBean				Full error:		?		<soapenv:Envelope>	<soapenv:Header/>	?		<soapenv:Body>	?		<soapenv:Fault>	<faultcode>Client</faultcode>	?		<faultstring>	IOException parsing XML document from class path resource [testApplicationContext.xml]; nested exception is java.io.FileNotFoundException: class path resource [testApplicationContext.xml] cannot be opened because it does not exist; nested exception is: 		org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [testApplicationContext.xml]; nested exception is java.io.FileNotFoundException: class path resource [testApplicationContext.xml] cannot be opened because it does not exist	</faultstring>	<faultactor>http://myAxisServer/role/default</faultactor>	?		<detail>	?		<soapenv:Exception>	org.apache.axis2.AxisFault: IOException parsing XML document from class path resource [testApplicationContext.xml]; nested exception is java.io.FileNotFoundException: class path resource [testApplicationContext.xml] cannot be opened because it does not exist; nested exception is: 		org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [testApplicationContext.xml]; nested exception is java.io.FileNotFoundException: class path resource [testApplicationContext.xml] cannot be opened because it does not exist		at org.apache.axis2.AxisFault.makeFault(AxisFault.java:254)		at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:118)		at org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver.receive(AbstractInOutSyncMessageReceiver.java:37)		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:331)		at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPGetRequest(HTTPTransportUtils.java:147)		at org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:103)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:868)		at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:663)		at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)		at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)		at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)		at java.lang.Thread.run(Thread.java:595)	Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [testApplicationContext.xml]; nested exception is java.io.FileNotFoundException: class path resource [testApplicationContext.xml] cannot be opened because it does not exist		at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:180)		at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:148)		at org.springframework.beans.factory.xml.XmlBeanFactory.<init>(XmlBeanFactory.java:68)		at org.springframework.beans.factory.xml.XmlBeanFactory.<init>(XmlBeanFactory.java:56)		at classpathtest.ClasspathTest.testSpring(ClasspathTest.java:20)		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)		at java.lang.reflect.Method.invoke(Method.java:585)		at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:97)		... 20 more	Caused by: java.io.FileNotFoundException: class path resource [testApplicationContext.xml] cannot be opened because it does not exist		at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:137)		at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:167)		... 29 more	</soapenv:Exception>	</detail>	</soapenv:Fault>	</soapenv:Body>	</soapenv:Envelope>
47||FactoryFinder.findFactory is improperly setting the factory class name to the system property name instead of the system property value. 		In line 50 (in version 0.94):		factoryClassName = systemPropertyName;		should be replaced by 		factoryClassName = System.getProperty(systemPropertyName);		Because of that OMFactory and SOAPFactory cannot be created from OMAbstractFactory using different factories.		Regards,	Laurent Domenech
48||The soap monitor is really three components: An applet which displays responses / requests, a servlet which binds to a default port of 5001 and connects to the applet, and a handler used to intercept the soap messages. Therefore it requires three diferent pieces to be installed: applet classes --> *.class/WEB-INF, a servlet config in web.xml and the servlet classes in WEB-INF/lib etc, and a module with the handlers under WEB-INF/modules. The module also requires phases defined and placed in axis2.xml .   		Accordingly, I tried to fit these classes into a structure that matches axis2. The source files are under the directory --> modules/soapmonitor .  I did some guess work here as a starting point. 		Not needed but perhaps helpful is my build.xml along with my web.xml and axis2.xml, under the dir 'resources'in the zip file. 		The only needed change in the port - besides package name changes - was the SOAPMonitorHandler. A module was created with phase orders, and the handler determines whether the soap message is a request or a response by MessageContext.getFlow(). The axis 1.x soap handler depended on MessageContext.isResponseWritten() . However,  setResponseWritten() is never invoked in the axis2 code base. 		Attachment comming in comments.
49||Since development of the classes in the org.apache.axis2.om.impl.dom.jaxp package is still in progress, quite a few methods in the DocumentBuilderImpl class are still not implemented yet.	These methods throw UnsupportedOperationException("TODO") when called.	Currently, WSDoAllReceiver and WSDoAllSender make system-wide change by setting the "javax.xml.parsers.DocumentBuilderFactory" property to org.apache.axis2.om.impl.dom.jaxp.DocumentBuilderFactoryImpl.	This causes client modules to fail should there be a call to one of the unimplemented methods.	It is best to avoid using its DocumentBuilder until it is ready for testing.		SUGGESTED TEMPORARY WORKAROUND:	----------------------------------------------------------------	Use the DocumentBuilder from JDK (Crimson). Modify the newDocumentBuilder() method of the org.apache.axis2.om.impl.dom.jaxp.DocumentBuilderFactoryImpl class as follows:		  public DocumentBuilder newDocumentBuilder()	          throws ParserConfigurationException {	      /**	       * Juanda Zeng - 20060203	       * Since development is still in progress and a few methods are still not implemented yet,	       * it is best to avoid using its DocumentBuilder until it is ready for testing.	       * We will use the one from JDK (Crimson).	       */	      // return new DocumentBuilderImpl();	      return new org.apache.crimson.jaxp.DocumentBuilderFactoryImpl().newDocumentBuilder();	  }
50||Can we please add an Ant Task for Java2WSDL? 		thanks,	dims
51||When running with REST support, if there is a SOAP fault (in my case, I attempted to call an invalid service), the client application will encounter a ClassCastException (it should encounter an AxisFault).		The error is caused because when a response is received from the server, the StAXOMBuilder is used to build the envelope (instead of the StAXSOAPModelBuilder); this builds a generic OM, not a SOAP model.
52||Deployed latest WAR into tomcat55 and i see exceptions as follows:		INFO: XML validation disabled	- IOException while loading persisted sessions: java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: org.apache.axis2.description.AxisService	java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: org.apache.axis2.description.AxisService	        at java.io.ObjectInputStream.readObject0(Z)Ljava.lang.Object;(Unknown Source)	        at java.io.ObjectInputStream.readObject()Ljava.lang.Object;(Unknown Source)	        at java.util.HashMap.readObject(Ljava.io.ObjectInputStream;)V(Unknown Source)	        at java.lang.LangAccessImpl.readObject(Ljava.lang.Class;Ljava.lang.Object;Ljava.io.ObjectInputStream;)V(Unknown Source)	        at java.io.ObjectStreamClass.invokeReadObject(Ljava.lang.Object;Ljava.io.ObjectInputStream;)V(Unknown Source)	        at java.io.ObjectInputStream.readSerialData(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V(Unknown Source)	        at java.io.ObjectInputStream.readOrdinaryObject(Z)Ljava.lang.Object;(Unknown Source)	        at java.io.ObjectInputStream.readObject0(Z)Ljava.lang.Object;(Unknown Source)	        at java.io.ObjectInputStream.readObject()Ljava.lang.Object;(Unknown Source)	        at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1384)	        at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:919)	        at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:393)	        at org.apache.catalina.session.StandardManager.load(StandardManager.java:320)	        at org.apache.catalina.session.StandardManager.start(StandardManager.java:636)	        at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431)	        at org.apache.catalina.startup.ContextConfig.managerConfig(ContextConfig.java:403)	        at org.apache.catalina.startup.ContextConfig.start(ContextConfig.java:1066)	        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:261)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)	        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4111)	        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759)	        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739)	        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)	        at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:910)	        at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:873)	        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:474)	        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1118)	        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020)	        at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)	Caused by: java.io.NotSerializableException: org.apache.axis2.description.AxisService	        at java.io.ObjectOutputStream.writeObject0(Unknown Source)	        at java.io.ObjectOutputStream.writeObject(Unknown Source)	        at java.util.HashMap.writeObject(Unknown Source)	        at java.lang.LangAccessImpl.writeObject(Unknown Source)	        at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)	        at java.io.ObjectOutputStream.writeSerialData(Unknown Source)	        at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)	        at java.io.ObjectOutputStream.writeObject0(Unknown Source)	        at java.io.ObjectOutputStream.writeObject(Unknown Source)	        at org.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1460)	        at org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:936)	        at org.apache.catalina.session.StandardManager.doUnload(StandardManager.java:516)	        at org.apache.catalina.session.StandardManager.unload(StandardManager.java:462)	        at org.apache.catalina.session.StandardManager.stop(StandardManager.java:666)	        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4316)	        at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:892)	        at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1159)	        at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:1131)	        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:312)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)	        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1053)	        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1065)	        at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:447)	        at org.apache.catalina.core.StandardService.stop(StandardService.java:512)	        at org.apache.catalina.core.StandardServer.stop(StandardServer.java:734)	        at org.apache.catalina.startup.Catalina.stop(Catalina.java:601)	        at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:644)	- Exception loading sessions from persistent storage	java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: org.apache.axis2.description.AxisService	        at java.io.ObjectInputStream.readObject0(Z)Ljava.lang.Object;(Unknown Source)	        at java.io.ObjectInputStream.readObject()Ljava.lang.Object;(Unknown Source)	        at java.util.HashMap.readObject(Ljava.io.ObjectInputStream;)V(Unknown Source)	        at java.lang.LangAccessImpl.readObject(Ljava.lang.Class;Ljava.lang.Object;Ljava.io.ObjectInputStream;)V(Unknown Source)	        at java.io.ObjectStreamClass.invokeReadObject(Ljava.lang.Object;Ljava.io.ObjectInputStream;)V(Unknown Source)	        at java.io.ObjectInputStream.readSerialData(Ljava.lang.Object;Ljava.io.ObjectStreamClass;)V(Unknown Source)	        at java.io.ObjectInputStream.readOrdinaryObject(Z)Ljava.lang.Object;(Unknown Source)	        at java.io.ObjectInputStream.readObject0(Z)Ljava.lang.Object;(Unknown Source)	        at java.io.ObjectInputStream.readObject()Ljava.lang.Object;(Unknown Source)	        at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1384)	        at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:919)	        at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:393)	        at org.apache.catalina.session.StandardManager.load(StandardManager.java:320)	        at org.apache.catalina.session.StandardManager.start(StandardManager.java:636)	        at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431)	        at org.apache.catalina.startup.ContextConfig.managerConfig(ContextConfig.java:403)	        at org.apache.catalina.startup.ContextConfig.start(ContextConfig.java:1066)	        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:261)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)	        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4111)	        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759)	        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739)	        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)	        at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:910)	        at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:873)	        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:474)	        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1118)	        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020)	        at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)	Caused by: java.io.NotSerializableException: org.apache.axis2.description.AxisService	        at java.io.ObjectOutputStream.writeObject0(Unknown Source)	        at java.io.ObjectOutputStream.writeObject(Unknown Source)	        at java.util.HashMap.writeObject(Unknown Source)	        at java.lang.LangAccessImpl.writeObject(Unknown Source)	        at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)	        at java.io.ObjectOutputStream.writeSerialData(Unknown Source)	        at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)	        at java.io.ObjectOutputStream.writeObject0(Unknown Source)	        at java.io.ObjectOutputStream.writeObject(Unknown Source)	        at org.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1460)	        at org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:936)	        at org.apache.catalina.session.StandardManager.doUnload(StandardManager.java:516)	        at org.apache.catalina.session.StandardManager.unload(StandardManager.java:462)	        at org.apache.catalina.session.StandardManager.stop(StandardManager.java:666)	        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4316)	        at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:892)	        at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1159)	        at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:1131)	        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:312)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)	        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1053)	        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1065)	        at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:447)	        at org.apache.catalina.core.StandardService.stop(StandardService.java:512)	        at org.apache.catalina.core.StandardServer.stop(StandardServer.java:734)	        at org.apache.catalina.startup.Catalina.stop(Catalina.java:601)	        at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:644)
53||schema validation error:	Attribute 'name' is not allowed to appear in element 'soap:operation'. 		 <wsdl:binding name="versionBinding" type="tns:versionPort">	      <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" />	      <wsdl:operation name="getVersion">	         <soap:operation name="operation" soapAction="getVersion" style="document" />	         <wsdl:input>	            <soap:body use="literal" namespace="http://www.org.apache.axis2" />	         </wsdl:input>	         <wsdl:output>	            <soap:body use="literal" namespace="http://www.org.apache.axis2" />	         </wsdl:output>	      </wsdl:operation>	   </wsdl:binding>
54||I was adding secuirty/ addressing and my one module and Axis2 run out of memory. This happens when they are called in specific order. I have recreate the problem and atached a test case + my repository. make sure you add the repositorty path right when you run the test case
55||To allow maximum code reuse of AxisServlet by extended it, change all private methods and fields except  "serialVersionUID"	field from private to protected.  thx
56||In the invokeBusinessLogic method, and particulary in the handleResult() method, when calling the engine.send(..) method, the incoming MessageContext is send (messageCtx) rather than result one (result).		Here after the fixed source code  :		public abstract class AbstractInOutAsyncMessageReceiver extends AbstractMessageReceiver {	    protected Log log = LogFactory.getLog(getClass());		    public abstract void invokeBusinessLogic(MessageContext inMessage, MessageContext outMessage,	                                             ServerCallback callback)	            throws AxisFault;		    public final void receive(final MessageContext messageCtx) throws AxisFault {	        final ServerCallback callback = new ServerCallback() {	            public void handleResult(MessageContext result) throws AxisFault {	                AxisEngine engine =	                        new AxisEngine(messageCtx.getOperationContext().getServiceContext()	                                .getConfigurationContext());		                // BUG	                //engine.send(messageCtx);		                // FIXED	                engine.send(result);		            }		            public void handleFault(AxisFault fault) throws AxisFault {	                AxisEngine engine =	                        new AxisEngine(messageCtx.getOperationContext().getServiceContext()	                                .getConfigurationContext());	                MessageContext faultContext = engine.createFaultMessageContext(messageCtx, fault);		                engine.sendFault(faultContext);	            }	        };	        Runnable theadedTask = new Runnable() {	            public void run() {	                try {	                    MessageContext newmsgCtx = Utils.createOutMessageContext(messageCtx);	                    newmsgCtx.getOperationContext().addMessageContext(newmsgCtx);		                    invokeBusinessLogic(messageCtx, newmsgCtx, callback);	                } catch (AxisFault e) {	                    log.error(e);	                }	            }	        };		        messageCtx.getConfigurationContext().getThreadPool().execute(theadedTask);	    }	}
57||Sorry for the aggressive title, I had a moment of weakness.		Looking at your example: 	   EchoNonBlockingDualClient.java		The code after the:	   sender.sendReceiveNonblocking( payload, callback );	is not called until the callback completes!  I expect the send() to complete immediately and not wait for the callback.  This does not appear to run asynchronously.		I can test this by putting a long delay in the callback:	      Callback callback = new Callback() {	                public void onComplete( AsyncResult result ) {	                    try {	                        sleep( 60000 );	                        System.out.println( "In callback" )	                        ..etc..		and adding a 	   println( "sent" ) 		immediately after 	  sender.sendReceiveNonblocking( payload, callback );		and the output is:	   In callback	   sent
58||When loading a soap message which was created using a different namespace prefix for the soapenvelope than Axis2 does, the namespace definition using the 'soapenv' prefix is added.		When loading the message using the MessageFactory it will internally create a new instance of the class org.apache.axis2.soap.impl.dom.SOAPEnvelopeImpl by using the constructor:	 public SOAPEnvelopeImpl(DocumentImpl doc, OMXMLParserWrapper builder,	                         SOAPFactory factory)		In this constructor it calls the parent constructor with the new namespace definition using the default prefix. When the to be loaded soap message uses a different prefix, this will result into two xmlns definitions with the soap envelope namespace url when writing the message out again. 		A possible solution could be just don't create a the new namespace in the class SOAPEnvelopeImpl and pass null to the parent constructor. 		I tested with axis2 from svn trunk revision 388932.			Sample code:	import java.io.FileInputStream;	import java.io.InputStream;		import javax.xml.soap.MessageFactory;	import javax.xml.soap.SOAPMessage;		public class Test	{	    public static void main(String[] args)	    {	        InputStream in = null;	        try	        {	            in = new FileInputStream("minimalMessage.xml");	            SOAPMessage msg = MessageFactory.newInstance().createMessage(null, in);	            msg.setProperty(SOAPMessage.WRITE_XML_DECLARATION, "true");	            msg.writeTo(System.out);	        }	        catch (Exception e)	        {	            e.printStackTrace();	        }	        finally	        {	            try { in.close(); } catch (Exception e) { }	        }	    }	}				MinimalMessage:	<?xml version='1.0' ?>	<env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">	    <env:Body/>	</env:Envelope>			Output:	<?xml version='1.0' encoding='utf-8'?><env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">	    <soapenv:Body/>	</env:Envelope>
59||Hello!!	> I have a file .aar that contains an .java , .class, manifest and servies.xml files.	> Wen i make the deploy in the axis auto-depoly  	> http://localhost:8080/axis2/ it makes my aplication an avaliable 	> service but wen i try to access to it it give me an error lie this  	> <?xml version="1.0" encoding="UTF-8" ?>	> - <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">	>   <soapenv:Header />	> - <soapenv:Body>	> - <soapenv:Fault>	>   <faultcode>Client</faultcode> 	>   <faultstring>no scheam found for the service; nested exception is: java.lang.Exception: no scheam found for the service</faultstring> 	>   <faultactor>http://myAxisServer/role/default</faultactor>	> - <detail>	>   <soapenv:Exception>org.apache.axis2.AxisFault: no scheam found for the service; nested exception is: java.lang.Exception: no scheam found for the service at org.apache.axis2.description.AxisService.printUsingWOM(AxisService.java:373) at org.apache.axis2.description.AxisService.printWSDL(AxisService.java:322) at org.apache.axis2.transport.http.ListingAgent.listService(ListingAgent.java:469) at org.apache.axis2.transport.http.ListingAgent.handle(ListingAgent.java:393) at org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:111) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:667) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Unknown Source) Caused by: java.lang.Exception: no scheam found for the service at org.apache.axis2.description.AxisService2WOM.generateWOM(AxisService2WOM.java:86) at org.apache.axis2.description.AxisService.printUsingWOM(AxisService.java:362) ... 20 more</soapenv:Exception> 	>   </detail>	>   </soapenv:Fault>	>   </soapenv:Body>	>   </soapenv:Envelope>		> Can you give an hint  for this??!!	> Thanks
60||In 0.95, the Java2WSDL class generates invalid WSDL. 		The following WSDL was generated with Java2WSDL:		java2wsdl -cn com.mycompany.r002.R002 -cp bin -tn http://com.mycompany.r002 -stn http://com.mycompany.r002.schema -stp r002schema -sn r002 -of r002.wsdl		This generated the following WSDL:		<?xml version="1.0" encoding="UTF-8"?>	<wsdl:definitions targetNamespace="http://com.mycompany.r002" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://com.mycompany.r002">	  <wsdl:types>	    <xs:schema targetNamespace="http://com.mycompany.r002.schema" elementFormDefault="unqualified" attributeFormDefault="unqualified" xmlns:r002schema="http://com.mycompany.r002.schema">	      <!-- Type definitions (omitted) -->	    </xs:schema>	  </wsdl:types>	  <wsdl:message name="calculateResponseMessage">	    <wsdl:part name="part1" element="r002schema:calculateResponse"/>	  </wsdl:message>	  <wsdl:message name="calculateRequestMessage">	    <wsdl:part name="part1" element="r002schema:calculateRequest"/>	  </wsdl:message>	  <wsdl:portType name="r002PortType">	    <wsdl:operation name="calculate">	      <wsdl:input message="tns:calculateRequestMessage"/>	      <wsdl:output message="tns:calculateResponseMessage"/>	    </wsdl:operation>	  </wsdl:portType>	  <wsdl:binding name="r002Binding" type="tns:r002PortType">	    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>	    <wsdl:operation name="calculate">	      <soap:operation soapAction="calculate" style="document"/>	      <wsdl:input>	        <soap:body use="literal" namespace="http://com.mycompany.r002"/>	      </wsdl:input>	      <wsdl:output>	        <soap:body use="literal" namespace="http://com.mycompany.r002"/>	      </wsdl:output>	    </wsdl:operation>	  </wsdl:binding>	  <wsdl:service name="r002">	    <wsdl:port name="r002Port" binding="axis2:r002Binding">	      <soap:address location="http://127.0.0.1:8080/axis2/services/r002"/>	    </wsdl:port>	  </wsdl:service>	</wsdl:definitions>		This WSDL is invalid due to the following errors:			- The value 'axis2:r002Binding' of attribute 'binding' on element 'wsdl:port' is not valid with respect to its type, 'QName'.	- The value 'r002schema:calculateRequest' of attribute 'element' on element 'wsdl:part' is not valid with respect to its type, 'QName'.	- The value 'r002schema:calculateResponse' of attribute 'element' on element 'wsdl:part' is not valid with respect to its type, 'QName'.		- Cannot resolve 'axis2:r002Binding' as a QName: the prefix 'axis2' is not declared.	- Cannot resolve 'r002schema:calculateRequest' as a QName: the prefix 'r002schema' is not declared.	- Cannot resolve 'r002schema:calculateResponse' as a QName: the prefix 'r002schema' is not declared.
61||At some point we ended up with a namespace starting with urn://. To be honest I don't know whether this namespace may be used in WSDL and schema definitions or not. 	However it causes problems using WSDL2Java and xmlbeans binding since  URLProcessor#makePackageName returns null and generates invalid java source. (Empty package names and so on).
62||If a client does not send a http content type a NullPointer occurs.		2006-04-08 12:42:26,196 [ERROR] [http-8080-Processor25] [[AxisServlet]] Servlet.service() for servlet AxisServlet threw exception	java.lang.NullPointerException	        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:262)	        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:160)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)	        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)	        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)	        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)	        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)	        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)	        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)	        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)	        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)	        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)	        at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)	        at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)	        at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)	        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)	        at java.lang.Thread.run(Thread.java:613)
63||The WS-Addressing spec defines the RelatesTo element as:		/wsa:RelatesTo		    This OPTIONAL (repeating) element information item contributes one abstract [relationship] property value, in the form of an (IRI, IRI) pair. The content of this element (of type xs:anyURI) conveys the [message id] of the related message.		The relevant APIs however only provide access to a single RelatesTo e.g. Options.getRelatesTo(), Options.setRelatesTo(), MessageContext.getRelatesTo(), MessageContext.setRelatesTo(). Because of this the AddressingInHandler extracts all present RelatesTo elements and calls options.setRelatesTo() for each which means that only the last RelatesTo element to be processed will be available via the API. While Axis2 clients cannot add multiple RelatesTo, other implementations may or specifications require may multiple relationships thus this is a potential interoperability problem.		I intend to provide a patch for this and will bring up the proposed changes on the mailing list.
64||Per jira AXIS2-304 and long running tasks timing out even though its inOnly, the issued is resolved but you have to write your own message receiver that extends AbstractInOutAsyncMessageReceiver. There is a test case,  modules/integration/test/org/apache/axis2/async/AsyncMessageReceiver.java . It would be nice if we had a receiver for Async InOnly . Deepal mentioned "before the next release I will implement them all :) "
65||The code in ServiceClient.java:418 that waits for a callback reply throws a generic AxisFault( null ) when there is a timeout. Would expect a "responseTimeOut" exception. 		Also the callback.wait( timeout ) can end prematurely and that situation needs to be handled, see the javadoc for Object.wait(long timeout):			Current code in ServiceClient.java:418		 long timeout = options.getTimeOutInMilliSeconds();		 synchronized (callback) {			  try {					callback.wait(timeout);			  } catch (InterruptedException e) {					throw new AxisFault(Messages							  .getMessage("responseTimeOut"));			  }		 }	 	 // process the resule of the invocation		 if (callback.envelope != null) {			  // building soap enevlop			  callback.envelope.build();			  // closing tranport			  return callback.envelope.getBody().getFirstElement();		 } else {			  if (callback.error instanceof AxisFault) {					throw (AxisFault) callback.error;			  } else {					throw new AxisFault(callback.error);			  }		 }		Suggested code:		 long timeout = options.getTimeOutInMilliSeconds();	*	 long waitTime = timeout;	*	 long startTime = System.currentTimeMillis();			 synchronized (callback) {	*		  while( ! callback.isComplete() && waitTime >= 0 ) {					try {						 callback.wait(timeout);					} catch (InterruptedException e) {	*					 // We were interrupted for some reason, keep waiting	*					 // or throw new AxisFault( "Callback was interrupted by someone?" );					}	*				// The wait finished, compute remaining time	*				// - wait can end prematurly, see Object.wait( int timeout )	*				waitTime = timeout - ( System.currentTimeMillis() - startTime );			  }		 }			 // process the resule of the invocation		 if (callback.envelope != null) {			  // building soap enevlop			  callback.envelope.build();			  // closing tranport			  return callback.envelope.getBody().getFirstElement();		 } else {			  if (callback.error instanceof AxisFault) {					throw (AxisFault) callback.error;			  } else if( callback.error != null ) {					throw new AxisFault(callback.error);	*		  } else if( ! callback.isComplete() ) {	*				throw new AxisFault(Messages.getMessage( "responseTimeOut" ) );	*		  } else	*				throw new AxisFault( "Callback completed but there was no envelope or error" );	 }			This change is necessary because we are quering the isComplete() above.  	Shouldn't call notify() until the setComplete() has been called.	Current code in ServiceClient.java:594.	    public void onComplete(AsyncResult result) {			  this.envelope = result.getResponseEnvelope();			  this.msgctx = result.getResponseMessageContext();			  synchronized (this) {					notify();			  }		 }				Suggested code in CallbackReceiver:35 		 public void onComplete(AsyncResult result) {			  this.envelope = result.getResponseEnvelope();			  this.msgctx = result.getResponseMessageContext();	*	 }		*	 public void setComplete( boolean complete ) {	*		  super.setComplete( complete );	*		  synchronized (this) {	*				notify();	*		  }	*	 }
66||A late change to the WS-Addressing SOAP Binding added the text:		A message MUST NOT contain more than one wsa:To, wsa:ReplyTo, wsa:FaultTo, wsa:Action, or wsa:MessageID header targeted at a recipient; headers with an incorrect cardinality MUST NOT be used to populate the corresponding abstract properties.		Currently the AddressingInHandler inthe case of an InvalidCardinality for MessageID will add the 'first' message id as a relates to on the fault reply, meaning that its being used as the abstract property [message id]		I have a patch to fix this to follow shortly.
67||In class DeploymentEngine		Some of the code appears to look in the conf directory for the axis2.xml file.	   line100: File axis2conf = new File(axisRepo, "conf") 		while another branch of the code ignores it:  	   line 548: in = new FileInputStream(axis2_xml_file_name);	where axis2_xml_file_name is "axis2.xml" , but should be:	   in = new FileInputStream( new File( axis2repository + File.separatorChar + DIRECTORY_CONF, axis2_xml_file_name) );
68||It should be setTransportOut(), not setTranportOut().
69||I'm using the SVN source tree.		String valuepairs[]  = value.split(",");		given an NPE when using the Ant task.
70||Java2WSDL generates all types under a single schema element and namespace even if relevant java classes belonged to differnt Java packages.  When the generated WSDL is used to generate Java code it will lead to incorrect packaging of Java classes.  Besides, grouping all types under a single namespace could result in type collisions
71||Three of the four subclasses of DescriptionBuilder (ModuleBuilder, ServiceBuilder, ServiceGroupBuilder) override the superclasses's protected AxisConfiguration axisConfig variable with their own private version.  When both are set (which is in most cases) they are set to the same value.  However, in ServiceDescriptionBuilder(InputStrream, AxisConfiguration, AxisService) the super.axisConfig is set via a call to super(InputStream, AxisConfiguration); however the overridden ServiceDescriptionBuilder.axisConfiguration is not set which causes an NPE when axisConfig is used elsewhere in the class without the super qualification.		From looking at the code, I don't think the subclasses need to (or should) override AxisConfiguration.  I will submit a patch shortly with that as the fix.  If I'm wrong and the subclasses do need to override AxisConfiguration, then the fix is to simply set this.axisConfiguration in ServiceDescriptionBuilder(InputStrream, AxisConfiguration, AxisService)
72||It's great that there is the option -ns2p for namespace mapping now. Thanks!	Can you please improve this functionality to allow the user to optionally specify the name of a file which contains these mappings.	Axis 1.x had this functionality as well and it is very useful when working with many different namespaces.
73||In InstanceDispatcher.java, some code has no effect:		    public void invoke(MessageContext msgContext) throws AxisFault {	        .....	        // setting myEPR	        String transportURL = (String) msgContext.getProperty(Constants.Configuration.TRANSPORT_IN_URL);	        if (serviceContext != null) {	            if (transportURL != null) {	                serviceContext.setMyEPR(msgContext.getTo());	            }	            serviceContext.setMyEPR(msgContext.getTo());	        }	   }		No matter the transportURL is null or not, the result is that myEPR will be set to msgContext.getTo(). That is, the code can be simplified as:		        if (serviceContext != null) {	            serviceContext.setMyEPR(msgContext.getTo());	        }
74||I was thinking about the change i just made for shutting down jms stuff in cleanup(MessageContext)...that is just wrong :)		We need a stop() method in TransportSender (just like the one in TransportListener) and we need to call it from ListenerManager.		thanks,	dims
75||Quote from Jens Schumann : Discussion @ http://marc.theaimsgroup.com/?t=114626733700001&r=1&w=2		Since I was trying to come up with a fix for Axis2-595 I was looking for	something within Axis2 codebase which would help to do some cleanup during	shutdown. It turned out that the Axis2 deployment engine is not exposed for	clean shutdown and Handler#cleanup()/ TransportSender#cleanUp(MessageContext	msgContext) is never called.		Before spending too many cycles in refactoring could someone from the axis2	team comment on the current plans for full lifecycle support, especially	shutdown which can be called externally.		Specifically I would like to	- Shutdown the deployment engine and with it the scheduler,	- Ensure to call all cleanup() methods,	- Release all Classloader references during shutdown,	- Remove the ShutdownHook from JMSSender and move it to a global	ShutdownHook which is used for standalone axis2 mode only (the sender should	deregister from JMS within cleanup() ).
76||This enhancement was originally reported in Jira 341.  It was supposedly fixed in 0.96 - I did not personally verify though.  I tried 1.0 RC4 and init/destroy is not called and the destroy method is actually listed as an operation via http://host:8080/axis2/services ui.
77||The modifications applied by Axis2 to the WSDL provided in the aar are buggy:		The wsdl:messages are duplicated as many times as they are referenced by operations.		Furthermore all parts are renamed (This doesn't cause any problem to me but but is it really necessary?)
78||using the WSDL from AXIS2-694		ran WSDL2Java -s -u -uri partner.wsdl		the WSDL includes an xsd:any on the definition of SObject, which doesn't appear to have made it into the SObject class, this may be related, the QueryResult complexType ends up with the records array being declared as an OMElement array, not an SObject array. (Axis2-694 stops me from seeing if this array contains anything useful), from the schema	            <complexType name="sObject">	                <sequence>	                    <element name="type"               type="xsd:string"/>	                    <element name="fieldsToNull"       type="xsd:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>	                    <element name="Id"                 type="tns:ID" nillable="true" />	                    <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>	                </sequence>	            </complexType>		            <complexType name="QueryResult">	                <sequence>	                    <element name="done"         type="xsd:boolean"/>	                    <element name="queryLocator" type="tns:QueryLocator" nillable="true"/>	                    <element name="records"      type="ens:sObject" nillable="true" minOccurs="0" maxOccurs="unbounded"/>	                    <element name="size"         type="xsd:int"/>	                </sequence>	            </complexType>		If ADB doesn't support these schema constructs, it should fail with a useful error message during WSDL2Java.
79||From: Steve Barham <steve.barham@formicary.net>	Mailed-By: ws.apache.org	Reply-To: axis-user@ws.apache.org	To: axis-user@ws.apache.org	Date: May 8, 2006 6:20 AM	Subject: [Axis2] Webapp bugs		Hiya,		Am surprised that noone else has mentioned these so far. Clearly too many	Tomcat users on this project!		1. In the service listing, the links to the services are emitted in the	following style:		http://localhost/axis2-web/services/version?wsdl		This will fail to work under certain application containers, most notable	Ironflare Orion. This is because the list service is checked with the	following conditional (ListingAgent, line 87):		if (httpServletRequest.getParameter("wsdl") != null ||	   httpServletRequest.getParameter("xsd") != null) {	   processListService(httpServletRequest, httpServletResponse);	} else {	   super.handle(httpServletRequest, httpServletResponse);	}		In this case, as wsdl or xsd do not have any value assigned to them, they	do not have entries in the httpServletRequest parameter map. This can be	solved by changing the links to be of the following form:		http://localhost/axis2-web/services/version?wsdl=1		An alternative change would be to use the pathinfo to determine what	action to take, rather than the parameter value.		2. The listServices.jsp page is included by ListingAgent. As such, the	content type declaration of text/html with utf-8 encoding made in the	page's JSP header is clobbered, resulting in FireFox and other browsers	displaying it as text/plain.		Cheers,		steve
80||I deployed a service in the Axis2 webapp.		The WSDL (UTF-8 encoded) in the aar contains accents (e.g. word "prénom") in the XSD element annotations.	When I try to get WSDL from deployed service (MyService?wsdl) an Exception is thrown :		javax.servlet.ServletException: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 middle byte 0x6e (at char #1999, byte #-1); nested exception is: 		org.apache.axiom.om.OMException: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 middle byte 0x6e (at char #1999, byte #-1)		org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:111)		javax.servlet.http.HttpServlet.service(HttpServlet.java:689)		javax.servlet.http.HttpServlet.service(HttpServlet.java:802)		cause mère		org.apache.axis2.AxisFault: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 middle byte 0x6e (at char #1999, byte #-1); nested exception is: 		org.apache.axiom.om.OMException: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 middle byte 0x6e (at char #1999, byte #-1)		org.apache.axis2.description.AxisService.getWSDL(AxisService.java:558)		org.apache.axis2.description.AxisService.printWSDL(AxisService.java:533)		org.apache.axis2.transport.http.ListingAgent.processListService(ListingAgent.java:144)		org.apache.axis2.transport.http.ListingAgent.handle(ListingAgent.java:89)		org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:109)		javax.servlet.http.HttpServlet.service(HttpServlet.java:689)		javax.servlet.http.HttpServlet.service(HttpServlet.java:802)		The WSDL was created with JAXP/DOM : Here is the java code to write DOM document to file		Transformer xformer = TransformerFactory.newInstance().newTransformer();	xformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8"); //$NON-NLS-1$	OutputStream os = new FileOutputStream(getWSDLFile());	Writer writer = new OutputStreamWriter(os, "UTF8");             //$NON-NLS-1$	xformer.transform(new DOMSource(mDocument), new StreamResult(writer));	os.close();
81||1) Start Tomcat.	2) Put an aar file such as test.aar into webapps/Axis2/WEB-INF/services to hot-deploy it.	3) Try to delete the aar file. It says something to the effect of "file is being used by another process and can't be deleted".		It means one can never hot-undeploy a service by deleting the aar file. This issue should have nothing to do with antiJARLocking as Axis2 is using a ZipInputStream to access the aar file. In fact, I've even tried setting antiJARLocking to true but the problem persists.
82||The AddressingSubmissionInHandler does not deserialise EPR extensibility attributes and elements whereas the AddressingFinalInHandler does. These extensibility elements and attributes are valid in both specifications and thus should be deserialised in both.		Patch including the fix to this and the new and updated unit tests which found it to follow shortly.
83||WSDL2Code cannot find code template for C#...		Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: org.apache.axis2.wsdl.codegen.CodeGenerationException: org.apache.axis2.wsdl.codegen.CodeGenerationException: template for this writer is not found!	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:185)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:32)	Caused by: org.apache.axis2.wsdl.codegen.CodeGenerationException: org.apache.axis2.wsdl.codegen.CodeGenerationException: template for this writer is not found!	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.emitSkeleton(AxisServiceBasedMultiLanguageEmitter.java:640)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:168)	        ... 1 more	Caused by: org.apache.axis2.wsdl.codegen.CodeGenerationException: template for this writer is not found!	        at org.apache.axis2.wsdl.codegen.writer.ClassWriter.loadTemplate(ClassWriter.java:80)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.writeClass(AxisServiceBasedMultiLanguageEmitter.java:1346)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.writeSkeletonInterface(AxisServiceBasedMultiLanguageEmitter.java:1092)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.emitSkeletonService(AxisServiceBasedMultiLanguageEmitter.java:686)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.emitSkeleton(AxisServiceBasedMultiLanguageEmitter.java:638)	        ... 2 more
84||WSDL2Java generates source code, resources (service.xml, wsdl, xsd) and a build.xml file.	The user can specify a destination folder for all of these files, but they all go into the same folder.		When generating code for more than one service, you'll generally want to have the source code for all services in the same src-folder.	That's why you would specify the same destination folder for all services. However, in this causes the problem that the build.xml files 	and the resources for all the services go into the same folder as well and interfere with each other, or a overwritten respectively.	Therefore, it would be great if the user could specify two separate destination folders: one for the source code and the second one for 	the build file and the resources. Of course, the build files would have to reflect the new folder structure.		Alternative suggestion: WSDL2Java could do this automatically by introducing a service-specific folder	under resouces:		/resources/MyService1/service.xml	/resources/MyService1/MyService.wsdl	/resources/MyService1/MyService.xsd	/resources/MyService2/service.xml	/resources/MyService2/MyService.wsdl	/resources/MyService2/MyService.xsd		For the build files a similar solution could be used.
85||I've added support for using the JAX-B RI with WSDL2Java.  This patch just includes the initial support to get the appropriate databinding extension registered, and calling the RI's XJC compiler.  Code gen is working for basic cases -- I have not yet started on runtime support.		I've followed the reflection-based pattern for loading the RI, per the recent changes in the XMLBeans and JiBX binding extensions.  Compile-time deps on the RI are limited to the new jaxbri module, and at runtime if the JAX-B RI JARs are not available on the classpath, WSDL2Java will throw an appropriate exception & msg.		A sample command line:		wsdl2java -uri foo.wsdl -d jaxbri
86||When I use EchoBlockingDualClient to invoke echoF service which throws AxisFault, I run into a strange(?) situation.		Server returnes back an error through the *first* channel. Error says "Transport error 500 . Error Message is <html><head><title>Apache Tomcat/5.5.14 - Error report...". Then it sends the actual error over the *second* channel. 		When I look at the server logs, there is only one trace that indicates the AxisFault error thrown by echoF. There seems no transport related errors.		However, client catches *only* the first error and writes it down to the console. Then, it throws another exception that says "org.apache.axis2.AxisFault: Time out while waiting for the server to send the response"		I tried followings:	- Throwing XMLStreamException instead of AxisFault for conforming the original echo sample.	- Adding FaultTo EPR to the request. 		Neither of them worked.		Since separate listener case is very important, I beleive this is actually a blocker issue. (If I'm not missing something)			--------------------------------------------------------------------	public OMElement echoF(OMElement element) throws AxisFault {	  throw new AxisFault("MyFault message", "MyFaultCode");	}		--------------------------------------------------------------------	- Transport error 500 . Error Message is <html><head><title>Apache	Tomcat/5.5.14 - Error report</title><style><!--H1	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;}	H2	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;}	H3	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;}	BODY	{font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;}	B	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;}	P	{font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A	{color : black;}A.name {color : black;}HR {color : #525D76;}--></style>	</head><body><h1>HTTP Status 500 - </h1><HR size="1"	noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b>	<u></u></p><p><b>description</b> <u>The server encountered an internal	error () that prevented it from fulfilling this request.</u></p><HR	size="1" noshade="noshade"><h3>Apache Tomcat/5.5.14</h3></body></html>;	nested exception is: 	...			org.apache.axis2.AxisFault: Time out while waiting for the server to	send the response[SimpleHTTPServer] Stop called		at	org.apache.axis2.client.ServiceClient.sendReceive(ServiceClient.java:448)		at	org.apache.axis2.client.ServiceClient.sendReceive(ServiceClient.java:399)		at	userguide.clients.EchoBlockingDualClient.main(EchoBlockingDualClient.java:54)
87||Original email:	http://mail-archives.apache.org/mod_mbox/ws-axis-dev/200605.mbox/%3cOF220CACBE.411DB84B-ON8525716B.0074F142-8525716B.007C5C4F@wendys.com%3e		1.   Annoyance:  WSDL2Java.bat issues a warning because Log4J cannot be 	properly configured.	When running WSDL2Java.bat, the following warning is displayed:	        log4j:WARN No appenders could be found for logger 	(org.apache.axis2.i18n.ProjectResourceBundle).	        log4j:WARN Please initialize the log4j system properly.		To fix this, add the following line:	        set 	AXIS2_CLASS_PATH=%AXIS2_CLASS_PATH%;%AXIS2_HOME%modulescoreconf		into the WSDL2Java.bat file, after these lines:	        rem loop through the libs and add them to the class path	        set AXIS2_CLASS_PATH=%AXIS2_HOME%	        FOR %%c in ("%AXIS2_HOME%lib*.jar") DO set 	AXIS2_CLASS_PATH=!AXIS2_CLASS_PATH!;%%c		%AXIS2_HOME%modulescoreconf is the location of the Axis2-distributed 	log4j.properties file.		14.  Annoyance:  The log4j.properties file shipped with Axis2 circumvents 	the ability for the developers to change the logging level of their 	classes.	I have included a modified log4j.properties file that actually allows me 	to put my classes into DEBUG level while leaving Axis2 and Tomcat logging 	at their levels.			15.  Annoyance:  Axis2 only allows for Log4J.properties to configure 	logging, not Log4J.xml	Log4J can be configured using either a properties or an xml file.  There 	is a growing number of Logging capabilities that are only configurable 	using the XML file.  The code that sets up configuration of Log4J in Axis2 	should allow for both types of configuration files.			16.  Annoyance:  Axis2 does not use ConfigureAndWatch capabilities of 	Log4J	Log4J can be configured using a ConfigureAndWatch method that causes Log4J 	to monitor its configuration file and automatically apply changes made to 	that file to its configuration.  This means that if support personnel need 	to modify the logging configuration of a production application, only the 	log4j configuration file needs to be modified and the Application server 	does not need  to be restarted.		Following is a snippet of code for a Log4jUtils class that addresses 	Annoyances 15 and 16.	The configureAndWatch method of this utility class should be called by an 	initialization servelet or some other configuration and initialization 	class.		------		import org.apache.log4j.BasicConfigurator;	import org.apache.log4j.PropertyConfigurator;	import org.apache.log4j.helpers.FileWatchdog;	import org.apache.log4j.net.SyslogAppender;	import org.apache.log4j.xml.DOMConfigurator;		    .	    .	    .	/**	 * A collection of static utility methods for logging with Log4J.	 */	public final class Log4jUtils {	    private static final Logger LOG = 	Logger.getInstance(Log4jUtils.class);	    private static loggingConfigured = false;		    private Log4jUtils() {	        // All methods are static, this class should not be instantiated	    }		    .	    .	    .		    /**	     * Implements configureAndWatch for the current ClassLoader hierarchy 	using the Log4J	     * default number of seconds.	     */	    public static void configureAndWatch() {	        configureAndWatch(FileWatchdog.DEFAULT_DELAY);	    }		    /**	     * Implements configureAndWatch for the current ClassLoader hierarchy.	     * 	     * @param watchMillisecs The number of milliseconds to wait between 	checking to see if the 	     * log4j configuration file has changed.	     */	    public static void configureAndWatch(long watchMillisecs) {	        if (loggingConfigured) return;		        Class myClass = Log4jUtils.class;	        ClassLoader classLoader = myClass.getClassLoader();		        // Initialize LOG4J	        URL resourceUrl = classLoader.getResource("log4j.xml");	        if (resourceUrl != null) {	            String configFile = resourceUrl.getFile();	            DOMConfigurator.configureAndWatch(configFile, watchMillisecs);	        } else {	            resourceUrl = classLoader.getResource("log4j.properties");	            if (resourceUrl != null) {	                String configFile = resourceUrl.getFile();	                PropertyConfigurator.configureAndWatch(configFile, 	watchMillisecs);	            } else {	                // Since we aren't going to be able to pull our "real" 	settings,	                // let's at least make sure we get some output 	                BasicConfigurator.configure();		                // Log an error with detail regarding the problem (and 	suspected cause)	                LOG.error(myClass.getName(), "Unable to find log4j.xml or 	log4j.properties. " + 	                                             "Make sure the log4j 	configuration file is in the Classpath.");	            }	        }	        loggingConfigured = true;	    }
88||To reproduce the bug, use the attached file demo-fault.wsdl to generate a AAR with WSDL2Java.	The defined service contains a port type with two methods. Both methods can throw the same fault ("DemoFault" called in the example). If you now deploy this service and retrieve the WSDL from the axis2 server, it contains two duplicate definitions of the fault message (see attached file axis2-services-xxx.wsdl).		This causes several client code generators to fail with errors.		I have added a patch for org.apache.axis2.description.AxisService2OM fixing this behaviour.
89||This causes the same configurationContext different serviceClient scenarios to fail. The CallbackReceiver object set in the operations of the configurationContext  get replaced, everytime a new ServiceClient is used.	Instead of storing the callbackReceiver in the serviceClient, it could be set directly in the respective operations.
90||I'm deploying my Web Service using the RawXMLINOutMessageReceiver and providing my own WSDL in the META-INF folder. However the WSDL that is returned from the ?wsdl URL specifies a namespace for the <soap:body> elements even though it is a doc/literal binding. This is disallowed explicitly by the WS-I Basic Profile 1.1	http://www.ws-i.org/Profiles/BasicProfile-1.1-2004-08-24.html#Namespaces_for_soapbind_Elements
91||Please run wsdl2java on Benchmark.wsdl. It generates code (snippet below) inEchoBase64Response#parse		                if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.extreme.indiana.edu/wsdl/Benchmark1", "echoBase64Return").equals(reader.getName()))	                {	                    java.lang.String content = getElementTextProperly(reader);	                    object.setEchoBase64Return(	                            org.apache.axis2.databinding.utils.ConverterUtil.convertTobase64Binary(content));	                    reader.next();	                }  // End of if for expected property start element		On the wire the string being received is base64 encoded, so we need to decode it. (So the name is wrong?). the convertTobase64Binary method just wraps up the bytes of the string into a data handler which is wrong. 		Patch is as follows:		Index: modules/adb/src/org/apache/axis2/databinding/utils/ConverterUtil.java	===================================================================	--- modules/adb/src/org/apache/axis2/databinding/utils/ConverterUtil.java       (revision 405712)	+++ modules/adb/src/org/apache/axis2/databinding/utils/ConverterUtil.java       (working copy)	@@ -327,7 +327,7 @@	             throws Exception{	         // reusing the byteArrayDataSource from the Axiom classes	         ByteArrayDataSource byteArrayDataSource = new ByteArrayDataSource(	-                s.getBytes()	+                Base64.decode(s)	         );	         return new DataHandler(byteArrayDataSource);	     }		Thanks,	dims
92||Report from Yanlun:		Original mail: http://marc.theaimsgroup.com/?l=axis-dev&m=114721187825993&w=2		In following code of org.apache.axis2.deployment.util.Utils, the File.createTempFile("axis2", entryName.substring(4)); got IO exception and said "Invalid path".  Add the line "new File(System.getProperty("java.io.tmpdir")).mkdirs();" can solve this problem.				Please take a look,				See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4847239  for the proposed walkaround.				Thanks,				Yanlun						                if ((entryName != null) && entryName.toLowerCase().startsWith("lib/")		                        && entryName.toLowerCase().endsWith(".jar")) {		                    byte data[] = new byte[2048];		                    int count;		                    new File(System.getProperty("java.io.tmpdir")).mkdirs();		                    File f = File.createTempFile("axis2", entryName.substring(4));		                    f.deleteOnExit();		                    FileOutputStream out = new FileOutputStream(f);		                    while ((count = zin.read(data, 0, 2048)) != -1) {		                        out.write(data, 0, count);		                    }		                    out.close();		                    array.add(f.toURL());		                }
93||The following patch replaces the SimpleHttpServer implementation based on the testing framework of Commons HttpClient 3.x with a one based on Jakarta HttpComponents HttpCore. Compiled against Axis2 trunk and HttpCore trunk		* Removes all references to Commons HttpClient classes	* Enables streaming of schema definitions and similar content	* Improves content buffering of SOAP response 	* Improves handling of fault conditions and exception handling	* Fixes a number of NPEs in AxisEngine	* Improves performance and reliability of the HTTP transport
94||When sending client message with multiple MTOM/binary attachments, the server side builds the OMElement up incorrectly. The first attachment seems to to it's correct location, but any additional attachments either are attached to the parent element or disappear (if not deep enough).		Reproducable test case attached, which does the following:	1) Client constructs a message to the server with an XML document and 3 binary attachments.	2) Server echoes the element back to the client.		As seen from the SOAP message examples below, the echoed message as has the binary attachments attached to incorrect elements.		Client sends:		<?xml version="1.0" encoding="UTF-8"?>	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">		<soapenv:Header/>		<soapenv:Body>			<MTOMAttachmentWS:service xmlns:MTOMAttachmentWS="http://MTOMAttachmentWS.test">				<MTOMAttachmentWS:payload>					<TestContent>test</TestContent>				</MTOMAttachmentWS:payload>				<MTOMAttachmentWS:attachments>					<MTOMAttachmentWS:attachmentsDeep>						<MTOMAttachmentWS:attachment1 MTOMAttachmentWS:fileName="test1.jpg">							<xop:Include href="cid:1.urn:uuid:8ABA4EE5929B471DCF11480616813283@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include"/>						</MTOMAttachmentWS:attachment1>						<MTOMAttachmentWS:attachment2 MTOMAttachmentWS:fileName="test2.jpg">							<xop:Include href="cid:2.urn:uuid:8ABA4EE5929B471DCF11480616813284@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include"/>						</MTOMAttachmentWS:attachment2>						<MTOMAttachmentWS:attachment3 MTOMAttachmentWS:fileName="test3.jpg">							<xop:Include href="cid:3.urn:uuid:8ABA4EE5929B471DCF11480616813285@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include"/>						</MTOMAttachmentWS:attachment3>					</MTOMAttachmentWS:attachmentsDeep>				</MTOMAttachmentWS:attachments>			</MTOMAttachmentWS:service>		</soapenv:Body>	</soapenv:Envelope>		Server echoes back:		<?xml version="1.0" encoding="UTF-8"?>	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">		<soapenv:Header/>		<soapenv:Body>			<MTOMAttachmentWS:service xmlns:MTOMAttachmentWS="http://MTOMAttachmentWS.test" xmlns:tns="http://MTOMAttachmentWS.test">				<MTOMAttachmentWS:payload>					<TestContent>test</TestContent>				</MTOMAttachmentWS:payload>				<MTOMAttachmentWS:attachments>					<MTOMAttachmentWS:attachmentsDeep>						<MTOMAttachmentWS:attachment1 MTOMAttachmentWS:fileName="test1.jpg">							<xop:Include href="cid:1.urn:uuid:8ABA4EE5929B471DCF11480616813283@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include"/>						</MTOMAttachmentWS:attachment1>					</MTOMAttachmentWS:attachmentsDeep>					<MTOMAttachmentWS:attachment2 MTOMAttachmentWS:fileName="test2.jpg">						<xop:Include href="cid:2.urn:uuid:8ABA4EE5929B471DCF11480616813284@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include"/>					</MTOMAttachmentWS:attachment2>				</MTOMAttachmentWS:attachments>				<MTOMAttachmentWS:attachment3 MTOMAttachmentWS:fileName="test3.jpg">					<xop:Include href="cid:3.urn:uuid:8ABA4EE5929B471DCF11480616813285@apache.org" xmlns:xop="http://www.w3.org/2004/08/xop/include"/>				</MTOMAttachmentWS:attachment3>			</MTOMAttachmentWS:service>		</soapenv:Body>	</soapenv:Envelope>
95||To override method AbstractMessageReceiver.makeNewServiceObject() , one would need to create a new Class - SpringAbstractMessageReceiver for example - and all classes that implement the MEP types need to do an extends of that class. The current implementation makes it hard to override makeNewServiceObject() in a way that doesn't require a message receiver in services.xml that  has, for example, SpringRawXMLINOutMessageReceiver: 		                                     AbstractMessageReceiver	                                                      ^	                                                      | 	                                                      |	                            SpringAbstractMessageReceiver -- override makeNewServiceObject() 	                                                      ^	                                                      |	                                                      |	                    SpringAbstractInOutSyncMessageReceiver 	                                                      ^	                                                      |	                                                      |	                         SpringRawXMLINOutMessageReceiver		There should be a less intrusive way to override makeNewServiceObject() and get the class loaded in an alternative way.
96||Support setting the correct wsa:Action on response messages		These Action values can some from 3 places:		1. services.xml (actionMapping, outputActionMapping and faultActionMapping elements - the latter break apart generic multiple actions to specific in, out, fault)		2. wsaw:Action value in a WSDL 1.1 file		3. generated using the DefaultActionPattern from a WSDL 1.1 file		wsaw:Action values added to generated WSDL when present in the AxisOperation object		Patch to follow shortly
97||org.apache.axis2.rpc.receivers.RPCMessageReceiver is currently in axis2-codegen-SNAPSHOT.jar...why "codegen"? can we please have just the compile/build time stuff in "codegen"?
98||The following code in AARWSDLLocator.java will fail in a certain scenario (described below):		...	            while ((entry = zin.getNextEntry()) != null) {	                String entryName = entry.getName();	                if ((entryName.startsWith(DeploymentConstants.META_INF.toLowerCase())	                        || entryName.startsWith(DeploymentConstants.META_INF))	                        && entryName.endsWith(importLocation)) {	...		If I have a wsdl file that has an import like:		<s:import namespace="some_namespace" schemaLocation="xsd/some_namespace.xsd"/>		And then, in my aar file, I have the files:		META-INF/xsd/some_namespace.xsd	META-INF/some_bad_other_xsd/some_namespace.xsd		The locator seems to try and load both files.  At the very least, the if condition is met, and later down the line, an XMLSchemaException is thrown as follows:		Error: org.apache.axis2.deployment.DeploymentException: java.lang.RuntimeException: org.apache.ws.commons.schema.XmlSchemaException: No namespace found in given base simple content type		If you remove the excess xsd file, the problem goes away.  So...I think the if statement here needs to be fixed to not include directories that happen to end with the import location.		Marking as minor since I can change my directory strutcure, but would be major for someone who was unable to change the stucture of their files.
99||I ran the EchoNonBlockingDualClient sample, and I got the following response:		<?xml version='1.0' encoding='utf-8'?>	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing">	    <soapenv:Header>	        <wsa:To>http://192.168.0.3:6060/axis2/services/annonService682633392/annonOutInOp</wsa:To>	        <wsa:ReplyTo>	            <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>	        </wsa:ReplyTo>	        <wsa:From>	            <wsa:Address>http://127.0.0.1:8080/axis2/services/MyService</wsa:Address>	        </wsa:From>	        <wsa:FaultTo>	            <wsa:Address>http://127.0.0.1:8080/axis2/services/MyService</wsa:Address>	        </wsa:FaultTo>	        <wsa:MessageID>urn:uuid:49A31646AF3D47558411489061935466</wsa:MessageID>	        <wsa:Action>urn:echo</wsa:Action>	        <wsa:RelatesTo wsa:RelationshipType="wsa:Reply">urn:uuid:39C96FAC83790886C811489061932341</wsa:RelatesTo>	    </soapenv:Header>	    <soapenv:Body>	        <example1:echo xmlns:example1="http://example1.org/example1" xmlns:tns="http://ws.apache.org/axis2">	            <example1:Text>Axis2 Echo String </example1:Text>	        </example1:echo>	    </soapenv:Body>	</soapenv:Envelope>		according to the 2005/08 WS-Addressing spec, it should include the following:		        <wsa:RelatesTo wsa:RelationshipType="http://www.w3.org/2005/08/addressing/reply">urn:uuid:39C96FAC83790886C811489061932341</wsa:RelatesTo>		or,		        <wsa:RelatesTo>urn:uuid:39C96FAC83790886C811489061932341</wsa:RelatesTo>
100||When the method getDataHandler() in the class org.apache.axis2.saaj.AttachmentPartImpl it checks internally if there is content available by testing whether the getContent() method returns null or not. 	The getContent() method will internally return the content of the datahandler which is the (File)InputStream in my case.	This InputStream is not closed anymore which results into locked files (until the application exits).		I think it does not make sense to check if there is really content available - the check if the dataHandler is not null (like it was in the Axis1 implementation) should be enough.
101||The javadoc for ConfigurationContextFactory.createConfigurationContextFromFileSystem() says:		     * <li>If axis2xml is null , then the repository will be the value specfied by	     * path parameter and , system will try to find axis2.xml from sub directory	     * called "conf" inside the repository, so if system find	     * repository/conf/axis2/xml then AxisConfiguration will be created using that	     * else AxisConfiguration will be created using default_axis2.xml</li>		However, FileSystemConfigurator only checks for the axis2xml parameter or the axis2.xml system property before falling back to the default_axis2.xml.  I expect many users aren't getting there expect axis2.xml configs.  The functionality promised in the javadoc should be there.
102||public EchoSwA() {	    }		    public void setOperationContext(OperationContext oc) throws AxisFault {	        msgcts = oc.getMessageContext(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);	    }		should be 	  public EchoSwA() {	    }		    public void setOperationContext(OperationContext oc) throws AxisFault {	        msgcts = oc.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);	    }			I have already done the fix in xdocs/latest.... Some body please update the site.. 	I have seen in the mailing list that some people already went in to trouble due to this buggy code peice,...
103||I am using AXIS2, RPCMessageReceiver.		I am passing following obbject as a parameter in one of my call.		WMemberInfo		|- ID		|- WMemberAttribute []			|- Name			|- Value			|- isChanged		 I can get value of ID properly. But I cannot get WMemberAttribute properly. On SOAP monitor I can see request XML is proper. But I get null in all the place holders in WMemberAttribute ( i.e Name, value are null and isChanged is false default value.). 		I checked the tracker variables, all the tracker variables are true. ( I think it means it will serialize the object.)		_________________________		SOAP Request: ( From SOAP Monitor)		<?xml version='1.0' encoding='utf-8'?>	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">	  <soapenv:Header />	  <soapenv:Body>	    <ns3:submitWMemberChanges xmlns:ns3="http://webs.shared.clemenza.vistaar.com/xsd">	      <sessionId>DummySessionId</sessionId>	      <dimName>Kit</dimName>	      <wmems>	        <id>53603208326</id>	        <memberAttributes>	          <changed>false</changed>	          <name>Name</name>	          <value>KIT - SKP-404B</value>	        </memberAttributes>	        <memberAttributes>	          <changed>false</changed>	          <name>Code</name>	          <value>SKP-404B</value>	        </memberAttributes>	        <memberAttributes>	          <changed>false</changed>	          <name>Description</name>	          <value>SKP-404B KIT, PISTON 2</value>	        </memberAttributes>	        <memberAttributes>	          <changed>true</changed>	          <name>ParentId</name>	          <value>39</value>	        </memberAttributes>	      </wmems>	    </ns3:submitWMemberChanges>	  </soapenv:Body>	</soapenv:Envelope>
104||The calls ServiceClient.addStringHeader() and ServiceClient.addHeader() cause the message to be not received.		Using tcpmon and the MyService sample (provided with Axis2) you get:		1) no headers added:	HTTP/1.1 200 OK	Server: Apache-Coyote/1.1	Set-Cookie: JSESSIONID=CF2A6A3A366706087FBBD8818E91A62C; Path=/axis2	Content-Type: multipart/related;	boundary=MIMEBoundaryurn_uuid_1CAAD3F62EB8F21F2011478815557861;	type="application/xop+xml";	start="<0.urn:uuid:1CAAD3F62EB8F21F2011478815557862@apache.org>";	start-info="text/xml";charset=UTF-8	Transfer-Encoding: chunked	Date: Wed, 17 May 2006 15:59:15 GMT		23e	--MIMEBoundaryurn_uuid_1CAAD3F62EB8F21F2011478815557861	content-type:application/xop+xml; charset=UTF-8; type="text/xml";	content-transfer-encoding:binary	content-id:<0.urn:uuid:1CAAD3F62EB8F21F2011478815557862@apache.org>		<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header	/><soapenv:Body><example1:echo	xmlns:example1="http://example1.org/example1"	xmlns:tns="http://ws.apache.org/axis2"><example1:Text>Axis2 Echo String	</example1:Text></example1:echo></soapenv:Body></soapenv:Envelope>	3b		--MIMEBoundaryurn_uuid_1CAAD3F62EB8F21F2011478815557861--	0			2) sender.addHeader(OMElement), where the OMElement is very similar to	the object returned by ClientUtil.getEchoElement():		HTTP/1.1 500 Internal Server Error	Server: Apache-Coyote/1.1	Content-Type: text/html;charset=utf-8	Content-Length: 2118	Date: Wed, 17 May 2006 16:01:31 GMT	Connection: close		<html><head><title>Apache Tomcat/5.5.15 - Error	report</title><style><!--H1	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;}	H2	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;}	H3	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;}	BODY	{font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;}	B	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;}	P	{font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A	{color : black;}A.name {color : black;}HR {color : #525D76;}--></style>	</head><body><h1>HTTP Status 500 - </h1><HR size="1"	noshade="noshade"><p><b>type</b> Exception report</p><p><b>message</b>	<u></u></p><p><b>description</b> <u>The server encountered an internal	error () that prevented it from fulfilling this	request.</u></p><p><b>exception</b>	<pre>org.apache.axiom.om.OMException:	com.ctc.wstx.exc.WstxUnexpectedCharException: Unexpected character	'&gt;' (code 62) expected '='	 at [row,col {unknown-source}]: [1,226]		org.apache.axiom.om.impl.builder.StAXOMBuilder.next(StAXOMBuilder.java:207)		org.apache.axiom.om.impl.llom.OMElementImpl.getNextOMSibling(OMElementImpl.java:263)		org.apache.axiom.om.impl.traverse.OMChildrenQNameIterator.next(OMChildrenQNameIterator.java:101)		org.apache.axiom.om.impl.llom.OMElementImpl.getFirstChildWithName(OMElementImpl.java:223)		org.apache.axiom.soap.impl.llom.SOAPEnvelopeImpl.getHeader(SOAPEnvelopeImpl.java:76)		org.apache.axis2.engine.AxisEngine.createFaultMessageContext(AxisEngine.java:194)		org.apache.axis2.transport.http.AxisServlet.handleFault(AxisServlet.java:168)		org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:153)		javax.servlet.http.HttpServlet.service(HttpServlet.java:709)		javax.servlet.http.HttpServlet.service(HttpServlet.java:802)	</pre></p><p><b>note</b> <u>The full stack trace of the root cause is	available in the Apache Tomcat/5.5.15 logs.</u></p><HR size="1"	noshade="noshade"><h3>Apache Tomcat/5.5.15</h3></body></html>					3) sender.addStringHeader(new QName("qname"), "Header text"):		HTTP/1.1 500 Internal Server Error	Server: Apache-Coyote/1.1	Content-Type: text/html;charset=utf-8	Content-Length: 1857	Date: Wed, 17 May 2006 16:06:42 GMT	Connection: close		<html><head><title>Apache Tomcat/5.5.15 - Error	report</title><style><!--H1	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;}	H2	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;}	H3	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;}	BODY	{font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;}	B	{font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;}	P	{font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A	{color : black;}A.name {color : black;}HR {color : #525D76;}--></style>	</head><body><h1>HTTP Status 500 - </h1><HR size="1"	noshade="noshade"><p><b>type</b> Exception report</p><p><b>message</b>	<u></u></p><p><b>description</b> <u>The server encountered an internal	error () that prevented it from fulfilling this	request.</u></p><p><b>exception</b> <pre>java.lang.NullPointerException		org.apache.axiom.soap.impl.llom.SOAPHeaderImpl.getHeaderBlocksWithNSURI(SOAPHeaderImpl.java:217)		org.apache.axis2.handlers.addressing.AddressingInHandler.invoke(AddressingInHandler.java:64)		org.apache.axis2.engine.Phase.invoke(Phase.java:378)		org.apache.axis2.engine.AxisEngine.invoke(AxisEngine.java:492)		org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:462)		org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:283)		org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:137)		javax.servlet.http.HttpServlet.service(HttpServlet.java:709)		javax.servlet.http.HttpServlet.service(HttpServlet.java:802)	</pre></p><p><b>note</b> <u>The full stack trace of the root cause is	available in the Apache Tomcat/5.5.15 logs.</u></p><HR size="1"	noshade="noshade"><h3>Apache Tomcat/5.5.15</h3></body></html>
105||I have been trying out Axis 2.0 over the past week, with the configuration : 	Axis2 version 1.0 	Tomcat 5.5.17 	jdk 1.5.0_04 		I have tried using the sample "Axis2SampleDocLitService" that has been given. I generated the stubs and skeletons using the wsdl provided with the axis2 distribution (samples/wsdl/Axis2SampleDocLit.wsdl) ,  as shown in the user guide, using the xmlbeans option for data binding. I have also filled in the Skeleton class with the same code as given in the user guide.		I have a http client which I use to post the xml request to the server, and I got proper responses when I tested it with the client.		However, I have noticed that when I pump requests at a rapid rate, the memory usage keeps on increasing rapidly (checked using jmx console), in some cases ultimately leading to a jvm crash with an OutOfMemory Exception.  This was occurring when default mx(which is 64M) was used.		I also tried setting the JVM mx option to 128M (-Xmx128M)  and ran the test again. However, the memory usage keeps increasing all the way till it reaches 128 Mb, too, where it again crashes if I continue pumping further. 		If I stop pumping requests at around that time, and wait for around half an hour, I notice that the memory usage begins to reduce, and slowly come back to the original value (10M approx.)  upon forcing a GC. 		I have also deployed axis1 on the same tomcat installation, with the intention of comparing performance. When I try the same test there, ie, pumping requests, I don't find any alarming memory increase.		Why is so much memory being used, and why does it grow to fill however much memory is available ? Is it a memory leak, or is there any way I can limit the amount of memory being used ? The memory usage does come down, but it takes a very long time for this. This would surely affect the performance of any webservice I try to deploy with axis2, and it may even result in the service being unavailable because of a crash.
106||I tested this with Axis2 current SVN build.		I created java class that returns array of java beans, 	then made it web service with RPCMessageReceiver.	And I checked the namespace of generated WSDL.		There are 4 issues.	- namespace as "ns1" never used in generated WSDL.	- namespace as "ns0" and "ns" are the same.	- namespace as "stn_x" seems wrong. I think "ns" should be used.	- import namespace="/xsd" needed ?		I checked these issues by 4 different services.xml.		(1) no namespace is defined in services.xml		    http://localhost:8080/axis2/services/WsdlTest0?wsdl		    <wsdl:definitions> has,	    targetNamespace="http://ws.apache.org/axis2"	    xmlns:axis2="http://ws.apache.org/axis2"	    xmlns:ns0="http://ws.apache.org/axis2/xsd" 	    xmlns:ns1="http://org.apache.axis2/xsd"		    <xs:schema> has,	    targetNamespace="http://ws.apache.org/axis2/xsd" 	    xmlns:ns="http://ws.apache.org/axis2/xsd" 	    xmlns:stn_4="/xsd" 		    <xs:import namespace="/xsd" /> contained in WSDL.		    # prefix used in WSDL	    axis2	    ns0, ns, stn_4		(2) service namespace is defined in services.xml		    <wsdl:definitions> has,	    targetNamespace="http://ws.aaa.bbb"	    xmlns:axis2="http://ws.aaa.bbb"	    xmlns:ns0="http://ws.apache.org/axis2/xsd"	    xmlns:ns1="http://org.apache.axis2/xsd"		    <xs:schema> has,	    targetNamespace="http://ws.apache.org/axis2/xsd"	    xmlns:stn_6="/xsd"	    xmlns:ns="http://ws.apache.org/axis2/xsd"		    <xs:import namespace="/xsd" /> contained in WSDL.		    # prefix used in WSDL	    axis2	    ns0, ns, stn_6		(3) schema namespace is defined in services.xml		    <wsdl:definitions> has,	    targetNamespace="http://ws.apache.org/axis2"	    xmlns:axis2="http://ws.apache.org/axis2"	    xmlns:ns0="http://ws.aaa.bbb/types"	    xmlns:ns1="http://org.apache.axis2/xsd"		    <xs:schema> has,	    targetNamespace="http://ws.aaa.bbb/types"	    xmlns:ns="http://ws.aaa.bbb/types" 	    xmlns:stn_8="/xsd" 		    <xs:import namespace="/xsd" /> contained in WSDL.		    # prefix used in WSDL	    axis2	    ns0, ns, stn_8		(4) service and schema namespace is defined in services.xml		    <wsdl:definitions> has,	    targetNamespace="http://ws.aaa.bbb"	    xmlns:axis2="http://ws.aaa.bbb"	    xmlns:ns0="http://ws.aaa.bbb/types"	    xmlns:ns1="http://org.apache.axis2/xsd"		    <xs:schema> has,	    targetNamespace="http://ws.aaa.bbb/types"	    xmlns:ns="http://ws.aaa.bbb/types" 	    xmlns:stn_10="/xsd" 		    <xs:import namespace="/xsd" /> contained in WSDL.		    # prefix used in WSDL	    axis2	    ns0, ns, stn_10		Thanks.
107||Command: WSDL2Java.bat -uri security.wsdl -s -ss -g -sd				Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException	: org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeExcept	ion: WSDL writing failed!	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGener	ationEngine.java:185)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:32)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	Caused by: org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.Runt	imeException: WSDL writing failed!	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEm	itter.emitSkeleton(AxisServiceBasedMultiLanguageEmitter.java:640)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGener	ationEngine.java:168)	        ... 2 more	Caused by: java.lang.RuntimeException: WSDL writing failed!	        at org.apache.axis2.wsdl.codegen.writer.WSDLWriter.writeWSDL(WSDLWriter.	java:45)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEm	itter.writeWSDLFiles(AxisServiceBasedMultiLanguageEmitter.java:737)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEm	itter.emitSkeletonService(AxisServiceBasedMultiLanguageEmitter.java:703)	        at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEm	itter.emitSkeleton(AxisServiceBasedMultiLanguageEmitter.java:638)	        ... 3 more	Caused by: org.apache.axis2.AxisFault: null; nested exception is:	        java.lang.NullPointerException	        at org.apache.axis2.description.AxisService.getWSDL(AxisService.java:558	)	        at org.apache.axis2.description.AxisService.printWSDL(AxisService.java:5	45)	        at org.apache.axis2.wsdl.codegen.writer.WSDLWriter.writeWSDL(WSDLWriter.	java:40)	        ... 6 more	Caused by: java.lang.NullPointerException	        at java.io.Writer.write(Writer.java:126)	        at com.ctc.wstx.sw.BaseNsStreamWriter.doWriteAttr(BaseNsStreamWriter.jav	a:442)	        at com.ctc.wstx.sw.BaseNsStreamWriter.writeAttribute(BaseNsStreamWriter.	java:205)	        at org.apache.axiom.om.impl.MTOMXMLStreamWriter.writeAttribute(MTOMXMLSt	reamWriter.java:138)	        at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeAttribute(OMS	erializerUtil.java:76)	        at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeAttributes(OM	SerializerUtil.java:266)	        at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeStartpart(OMS	erializerUtil.java:232)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:765)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:754)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:769)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:754)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:769)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:754)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:769)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMEleme	ntImpl.java:754)	        at org.apache.axiom.om.impl.llom.OMNodeImpl.serialize(OMNodeImpl.java:31	0)	        at org.apache.axiom.om.impl.llom.OMNodeImpl.serialize(OMNodeImpl.java:35	1)	        at org.apache.axis2.description.AxisService.getWSDL(AxisService.java:554	)	        ... 8 more
108||- fix spelling (axis2Steram -> axis2Stream)	- if axisurl != null case would not set the axisConfig, gave null pointer error on old line #81	- fix spelling (unableHttp -> enableHttp)	- add warning message when could not find the axis2.xml anywhere and using default one in classpath resource.	- externalize init parameter strings as constants and provide documentation.		- add javadoc comments to class and other methods.
109||Previously I was able to send customized axis fault by doing the following:		----------------------------------------------------------------------------------------------------------------------------------------------	messageContext.setProperty(SOAP12Constants.SOAP_FAULT_CODE_LOCAL_NAME, soapFaultCode);	messageContext.setProperty(SOAP12Constants.SOAP_FAULT_REASON_LOCAL_NAME, soapFaultReason);	messageContext.setProperty(SOAP12Constants.SOAP_FAULT_DETAIL_LOCAL_NAME, soapFaultDetail);		AxisFault axisFault = new AxisFault("Some message");	throw axisFault;	----------------------------------------------------------------------------------------------------------------------------------------------		Now I try to do the same thing in 1.0 as follows:		MessageContext messageContext = _operationContext.getMessageContext("Out");	if (messageContext != null) {	    messageContext.setProperty(SOAP12Constants.SOAP_FAULT_CODE_LOCAL_NAME, soapFaultCode);	    messageContext.setProperty(SOAP12Constants.SOAP_FAULT_REASON_LOCAL_NAME, soapFaultReason);	    messageContext.setProperty(SOAP12Constants.SOAP_FAULT_DETAIL_LOCAL_NAME, soapFaultDetail);	}		AxisFault axisFault = new AxisFault("Some message");	throw axisFault;	----------------------------------------------------------------------------------------------------------------------------------------------		It just returns a general axis2 fault similar to the following:		<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header /><soapenv:Body><soapenv:Fault><faultcode>soapenv:Client</faultcode><faultstring>unknown</faultstring><detail><Exception>org.apache.axis2.AxisFault&#13;		at org.apache.axis2.receivers.RawXMLINOutMessageReceiver.invokeBusinessLogic(RawXMLINOutMessageReceiver.java:102)&#13;		at org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver.receive(AbstractInOutSyncMessageReceiver.java:37)&#13;		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:454)&#13;		at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:284)&#13;		at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:136)&#13;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)&#13;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)&#13;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)&#13;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)&#13;		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)&#13;		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)&#13;		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)&#13;		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)&#13;		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)&#13;		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)&#13;		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)&#13;		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744)&#13;		at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)&#13;		at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)&#13;		at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)&#13;		at java.lang.Thread.run(Thread.java:534)&#13;	</Exception></detail></soapenv:Fault></soapenv:Body></soapenv:Envelope>		Is this the best way to return customized faults?  If not how?  Is so I need this fixed.
110||If Axis2 is deployed at:	C:Program FilesApache Software FoundationTomcat 5.5webappsaxis2, I would expect serviceContext.getConfigurationContext().getRealPath("services") to return a file that represents:	C:Program FilesApache Software FoundationTomcat 5.5webappsaxis2WEB-INFservices	Likewise, serviceContext.getConfigurationContext().getRealPath("lib") should return:	C:Program FilesApache Software FoundationTomcat 5.5webappsaxis2WEB-INFlib.
111||After populating an AxisService using		DeploymentEngine engine = new DeploymentEngine();	AxisService svc = engine.buildService(new AxisService(), new FileInputStream("services.xml"), Thread.currentThread().getContextClassLoader(), engine.getAxisConfig());		where services.xml contains		<service name="TestService"/>		calling svc.getName() returns null, and svc.getServiceDescription() returns "TestService".
112||Would like to see the XMLStreamReader and XMLStreamWriter logged so it's easy to see what StAX impl got instantiated.  See related improvement request:		http://issues.apache.org/jira/browse/WSCOMMONS-39		It appears it would only require a log.info() call in StAXUtils wherever createXMLStreamReader and createXMLStreamWriter are called.
113||Please see the discussion here:		http://marc.theaimsgroup.com/?t=115006964200003&r=1&w=2
114||We need to clean up the code for the new HttpCore based SimpleHTTPServer.		Per Oleg:		I still would like to clean things up a little here and there (at the very least the old classes from HttpClient testing framework should be removed). I would also like to refactor the session context management code and improve cookie handling. Presently Set-Cookie2 headers generated by the HTTPWorker are not spec compliant.		Per my commit message:		Still to do:	    1. Identify and remove any Commons classes that are no longer referenced	    2. Extend HttpFactory and config parameters for additional options	    3. Document in xdocs
115||The JAXWSTest is currently starting and stopping the server for each test.
116||Axis2 wsdl generated from a service operation signature containing byte[]	as a parameter is - xsd:byte minOccurs="0" maxOccurs="unbounded" which is	not right and the correct representation should be xsd:base64Binary.
117||When the service element of a WSDL is not in the first level file, there is an exception like this:		    [java] Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: Error parsing WSDL	     [java] at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:94)	     [java] at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:32)	     [java] at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	     [java] Caused by: org.apache.axis2.AxisFault: No service element found in the WSDL; nested exception is:	     [java] org.apache.axis2.AxisFault: No service element found in the WSDL	     [java] at org.apache.axis2.description.WSDL2AxisServiceBuilder.populateService(WSDL2AxisServiceBuilder.java:243)	     [java] at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:87)		I am pretty sure the spec allows services definitions to be imported.	The book from which I am learning web services has a specific example using this way of organizing WSDL (J2EE Web Services by Richard Monson-Haefel, page  136 : 5.2.4).		So, assuming service definitions of imported WSDL should be visible, here is my patch:	The reason for this problem is that the code in WSDL2AxisServiceBuilder method processImports does not recursively include the services in the current level's hash map:		...	                            //add messages	                            Map messagesMap = importedDef.getMessages();	                            wsdl4JDefinition.getMessages().putAll(messagesMap);		                            //add portypes	                            Map porttypeMap = importedDef.getPortTypes();	                            wsdl4JDefinition.getPortTypes().putAll(porttypeMap);		                            //add bindings	                            Map bindingMap = importedDef.getBindings();	                            wsdl4JDefinition.getBindings().putAll(bindingMap);	//------------------------------------------------------------------------------------------------	// Must add services of imported definitions into current wsdl definitions.	//-------------------------------------------------------------------------------------------------	                        }	...		I simply added:								    //add services							    Map serviceMap = importedDef.getServices();							    wsdl4JDefinition.getServices().putAll(serviceMap);		And it worked.		I tested this using on the refactored version: WSDL11ToAxisServiceBuilder			Here is the patch:		Index: WSDL11ToAxisServiceBuilder.java	===================================================================	--- WSDL11ToAxisServiceBuilder.java	(revision 415081)	+++ WSDL11ToAxisServiceBuilder.java	(working copy)	@@ -916,6 +916,9 @@	                             Map bindingMap = importedDef.getBindings();	                             wsdl4JDefinition.getBindings().putAll(bindingMap);		+				    //add services	+				    Map serviceMap = importedDef.getServices();	+				    wsdl4JDefinition.getServices().putAll(serviceMap);	                         }		                     }
118||This is the JIRA isse mentioned in an earlier note.  This is an initial pass at some of the JAX-WS APIs.		We'd like to submit this for inclusion within the existing Axis2 JAX-WS module.  Please see the attached README.txt for more info.
119||Presently HTTPWorker class unnecessarily meddles with HTTP transport parameters such content chunking and HTTP protocol version. In most cases HttpCore is much better equipped to pick up optimal transport settings depending on properties of the incoming request. HttpCore automatically downgrades the protocol version to HTTP/1.0 if the client does not support HTTP/1.1. Likewise it automatically applies the chunk coding if the content length is unknown.		I understand this one may be a little controversial, nonetheless I would like to put forth this patch for your consideration		Oleg
120||If convertToString(Calendar) is passed a calendar object with a timezone other than GMT/UTC/Zulu, it is not treated appropriately.  		For example, if I pass (Wed Jun 14 13:33:50 PDT 2006) as a calendar object, it is formatted by convertToString() to "2006-06-14T13:33:50.784Z".  Notice the GMT/UTC/Zulu designation "Z" at the end of the string.  Clearly these two dates are not equivalent.  convertToString() should return either "2006-06-14T13:33:50.784-7:00" or "2006-06-14T20:33:50.784Z"		See: modules/adb/src/org/apache/axis2/databinding/utils/ConverterUtil.java:136
121||This patch addresses a number of issues with the session management in SimpleHttpServer	* Fixes RFC2965 (aka Cookie2) compliance problems. 'Cookie2' request headers are no longer used incorrectly. 'Set-Cookie2' response headers now include the mandatory version attribute and an optional port attribute	* Fixes cookie parsing code. Cookies with attributes, such as 'Cookie: uid:nnnnn; $path="/"; $version=1', will be correctly processed and the correct session context will be selected as a result	* Provides a separate session manager instance per SimpleHttpServer. Multiple server instances can maintain different session contexts	* Minor clean-ups here and there		Oleg
122||The javax.xml.ws.handler.MessageContext class is missing the following fields:		- INBOUND_MESSAGE_ATTACHMENTS 	- OUTBOUND_MESSAGE_ATTACHMENTS	- PATH_INFO	- QUERY_STRING 		It looks like MESSAGE_ATTACHMENTS can be removed.
123||Setting the value of TRANSPORT_NON_BLOCKING property to a parameter named isTransportBlocking seems incorrect, although it doesn't lead to any problem by it's incorrect use :)		I created the patch under "...modulescoresrcorgapacheaxis2engine"" folder.,,,,,,,,27/Jun/06 1:45 PM,,,,55095,,,Error rendering 'sd-sla-field'. Please contact your JIRA administrators.,,,,,,,,,,1,,,,,,,,,,,,,,,,,,,,,115976,,,,,,0|i0k75j: Axis2,AXIS2-850,NullPointerException in AbstractHTTPSender,Bug,Resolved,Critical,Invalid,Deepal Jayasinghe,Michele Mazzucco,Michele Mazzucco,26/Jun/06 15:19, ,08/Jun/07 08:23,08/Jun/07 02:59, , ,transports, ,0,0,,,,, ,,,Windows XP SP2
124||To reproduce:	- Use wsdl2java to create a web service	- create a custom handler extending AbstractHandler	- Add a <phase> entry in the axis.xml to execute the handler PostDispatch	- In the web service skeleton class, implement the service by throwing the declared exception.  The exception should cause the  fault message defined in the wsdl to be returned in the SOAP response	- run a test on the web service	- When the custom handler is invoked, attempt to retrieve the "In" soap envelope using	      msgContext.getOperationContext().getMessageContext("In").getEnvelope()	- the "In" envelope is the "Fault" envelope, but it should be the original incoming soap message envelope.		Note that if the exception is not thrown in the skeleton class, the "In" envelope is the correct value.		As far as I can see, the offending code is: AxisServlet.handleFault() line 368:		366 : 	saminda 	509437 	 MessageContext faultContext =	367 : 	  	  	MessageContextBuilder.createFaultMessageContext(msgContext, e);	368 : 	saminda 	509952 	msgContext.setEnvelope(faultContext.getEnvelope());				from		Eran Chinthaka <chinthaka@opensource.lk>		reply-to		axis-user@ws.apache.org	 		to		axis-user@ws.apache.org	 		date		Jun 24, 2007 12:44 AM	 		subject		Re: [Axis2] Accessing SOAP message from MessageContexts in Handlers	 		mailed-by		ws.apache.org	 	-----BEGIN PGP SIGNED MESSAGE-----	Hash: SHA1		This seems to be a bug for me. Can you please create a JIRA giving	enough information to re-create this problem. Also please mark the issue	as a blocker as I think this should be fixed before the next release.		Thanks,	Chinthaka		Kevin TierOne wrote:	> Hi Wayne,	>	> We've talked about this but I thought I'd post to see if anyone else can	> give us insight.	>	>	> The original message context of the	> MySoapReceiverInOut.invokeBusinessLogic() code stores the incoming soap	> envelope.  If your skeleton throws an exception, AxisFault.handleFault()	> will replace the messageContext's soap envelope with	> faultContext.getEnvelope().  If there is no exception in your code, the	> setEnvelope() call is not invoked.	>	>	> The reason why you cannot use	> msgContext.getOperationContext().getMessageContext("In") to get the	> orignal envelope, is that the getMessage("In") refers to the original	> message context (because the hashmap stores a reference to original	> message context).  Its envelope was overwritten with the fault envelope	> during the fault handling.  Not sure why there is also a	> getMessage("Fault") that returns the same envelope.  Perhaps it's a bug	> or maybe there is a reason for this.  I don't know enough about the	> Axis2 code.	>	>	> Kevin	>	> ------------------------------------------------------------------------	> From: weeznat@hotmail.com <mailto:weeznat@hotmail.com>	> To: axis-user@ws.apache.org <mailto:axis-user@ws.apache.org>	> Subject: Accessing SOAP message from MessageContexts in Handlers	> Date: Wed, 20 Jun 2007 16:09:20 -0400	>	>	>     Using Axis2 1.2.  Is there a way to read the original SOAP message	>     within a PostDispatch Handler?	>	>     I'm invoking a custom handler in the PostDispatch phase.  The	>     handler reads the uses the MessageContext to get the original soap	>     request message.  Something like this:	>	>       String	>     incomingMsg=msgContext.getOperationContext().getMessageContext("In").getEnvelope().toString();	>       System.out.println("Original SOAPMessage: "+incomingMsg);	>	>     This works fine in the success case.  The problem is if the Skeleton	>     code throws an exception, the above code prints the "Fault" soap	>     message.  For example, the following code prints exactly the same	>     output:	>	>       String	>     incomingMsg=3DmsgContext.getOperationContext().getMessageContext("In").getEnvelope().toString();	>       System.out.println("SOAPMessage: "+incomingMsg);=0A=	>	>       String	>     faultMsg=3DmsgContext.getOperationContext().getMessageContext("Fault").getEnvelope().toString();	>       System.out.println("SOAPMessage: "+faultMsg);	>	>     Am I doing something incorrectly?  Is there another way to get the	>     original SOAP message in a Handler?	>	>     Thanks,	>     Wayne	>
125||SOAPMessageContext.getHeaders() returns a null. While testing the Handler code I found that we get a NullPointerException as the getHeader() method on SOAPMessageContext is not implemented correctly. I will provide the implementation to return correct headers from this method.
126||In start from java case for RPC the Unmarshalling of request fails when the server implementation has a String[] defnied as input parameter to the operation while the sei defines a wrapped StringArray with List<String>. This scenario only happens in start from java case.		I will provide the fix for this issue.
127||The WSDL4JWrapper should provide a Java2 security compliant way to grab an input stream for a URLConnection object.
128||The JAX-WS layer should provide a way to allow for the registration of a thread excecutor factory. This executor factory will be used by the ServiceDelegate to obtain an instance of an Executor.
129||WebResultAnnot.name should be initialized to "" instead of "return". Any defaulting logic that	needs to take place will occur in the JAX-WS Description layer.
130||A Test case is ecountering NPE when start from java case when soap message has header. Following is the stack trace:		javax.xml.ws.soap.SOAPFaultException: org.apache.axis2.jaxws.wrapper.impl.JAXBWrapperException:	java.lang.NullPointerException		at org.apache.axis2.jaxws.marshaller.impl.alt.MethodMarshallerUtils.createSystemException(MethodMarshallerUtils.java:11	38)		at org.apache.axis2.jaxws.marshaller.impl.alt.MethodMarshallerUtils.demarshalFaultResponse(MethodMarshallerUtils.java:9	01)		at org.apache.axis2.jaxws.marshaller.impl.alt.DocLitBareMethodMarshaller.demarshalFaultResponse(DocLitBareMethodMarshal	ler.java:356)		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.getFaultResponse(JAXWSProxyHandler.java:395)		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.createResponse(JAXWSProxyHandler.java:371)		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.invokeSEIMethod(JAXWSProxyHandler.java:294)		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.invoke(JAXWSProxyHandler.java:147)		at $Proxy7.helloString6(Unknown Source)		at com.bea.ts.tests.jws.webparam.webparam2.client.Client.testHelloString6(Client.java:373)		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)		at java.lang.reflect.Method.invoke(Method.java:615)		at com.sun.ts.lib.harness.EETest.run(EETest.java:495)		at com.sun.ts.lib.harness.ServiceEETest.run(ServiceEETest.java:95)		at com.sun.ts.lib.harness.EETest.getPropsReady(EETest.java:392)		at com.sun.ts.lib.harness.ServiceEETest.run(ServiceEETest.java:198)		at com.sun.ts.lib.harness.EETest.run(EETest.java:204)		at com.bea.ts.tests.jws.webparam.webparam2.client.Client.main(Client.java:169)
131||The runtime ArtifactProcessor throws a NoClassDefFound error when annotation pointing to arteffect is incorrec. Here is the stack trace for the issue,		Caused by: java.lang.NoClassDefFoundError: com.sun.ts.tests.jaxws.ee.w2j.rpc.literal.marshalltest.QnameTest (wrong name:	com/sun/ts/tests/jaxws/ee/w2j/rpc/literal/marshalltest/QNameTest)		at java.lang.ClassLoader.defineClassImpl(Native Method)		at java.lang.ClassLoader.access$200(ClassLoader.java:32)		at java.lang.ClassLoader$1.run(ClassLoader.java:232)		at java.security.AccessController.doPrivileged(AccessController.java:215)		at java.lang.ClassLoader.defineClass(ClassLoader.java:230)		at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:148)		at java.net.URLClassLoader.defineClass(URLClassLoader.java:557)		at java.net.URLClassLoader.access$400(URLClassLoader.java:120)		at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:962)		at java.security.AccessController.doPrivileged(AccessController.java:275)		at java.net.URLClassLoader.findClass(URLClassLoader.java:488)		at java.lang.ClassLoader.loadClass(ClassLoader.java:607)		at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:327)		at java.lang.ClassLoader.loadClass(ClassLoader.java:573)		at java.lang.Class.forNameImpl(Native Method)		at java.lang.Class.forName(Class.java:163)		at org.apache.axis2.jaxws.runtime.description.marshal.impl.ArtifactProcessor$1.run(ArtifactProcessor.java:341)		at java.security.AccessController.doPrivileged(AccessController.java:242)		at org.apache.axis2.java.security.AccessController.doPrivileged(AccessController.java:137)		at org.apache.axis2.jaxws.runtime.description.marshal.impl.ArtifactProcessor.forName(ArtifactProcessor.java:336)		at org.apache.axis2.jaxws.runtime.description.marshal.impl.ArtifactProcessor.loadClass(ArtifactProcessor.java:324)		at org.apache.axis2.jaxws.runtime.description.marshal.impl.ArtifactProcessor.findArtifact(ArtifactProcessor.java:297)		at org.apache.axis2.jaxws.runtime.description.marshal.impl.ArtifactProcessor.build(ArtifactProcessor.java:103)		at org.apache.axis2.jaxws.runtime.description.marshal.impl.MarshalServiceRuntimeDescriptionBuilder.init(MarshalServiceR	untimeDescriptionBuilder.java:79)		I will provide the fix for the issue.
132||Currently, it is possible to have the USE_ASYNC_MEP property setting on a sync or oneway invocation. This will not be	allowed past the AxisInvocationController.
133||A NullPointerException is resulted when getHandlerChain() is invoked on handler resolver. After looking at the code the getHandlerChain method is not implemented, I will provide the implementation for this method. Here is the stack trace for the issue.		java.lang.NullPointerException		at com.sun.ts.tests.jaxws.ee.w2j.rpc.literal.handlertest.Client$1.getHandlerChain(Client.java:313)		at org.apache.axis2.jaxws.BindingProvider.initialize(BindingProvider.java:80)		at org.apache.axis2.jaxws.BindingProvider.<init>(BindingProvider.java:51)		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.<init>(JAXWSProxyHandler.java:95)		at org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:251)		at org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:215)		at javax.xml.ws.Service.getPort(Service.java:45)
134||This is an issue that cropped up while doing some interop testing with Sandesha, and .net. We were invoking serveral operations on a service, and were async-on-the-wire. The algorithm that the engine uses to choose the replyTo address includes the operation name, which means that the replyTo address changes from message to message.		The .net runtime doesn't like it when the replyTo changes... so the testcase failed. There doesn't seem to be any need to include the operation name in the replyTo, so it seemed simplest to ignore it, and build the replyTo based on the service name.		I'll attach a patch shortly.
135||I am submitting for your consideration a patch that upgrades Simple HTTP and NIO HTTP transports to HttpCore 4.0-ALPHA5 and adds some incremental improvements to the I/O debug logging (such as prettier I/O session logs and optional HTTP header logs).		Oleg
136||When constructing the operation QName, the RPCLitMethodMarshaller should first consult the binding operation element to determine if there is a namespace specified. If there is no namespace on the binding operation, it should then use the target namespace of the WSDL document. As it stands now, the RPCLitMethodMarshaller always uses the target namespace of the WSDL document.
137||Control operations are appended to wsdl2 if the service contains any of them. Please deploy the attached service and check ?wsdl2 of that service.	You can see that the wsdl1 will not contain getMetaData control operation. However wsdl2 of the same service includes it.		Steps to reproduce:	================	1. Deploy the attached service	2. Issue http://localhost:8080/axis2/services/Articleservice?wsdl2	3. Following element can be seen there.		<wsdl2:operation name="GetMetadata" pattern="http://www.w3.org/ns/wsdl/in-out">	<wsdl2:input element="#none" wsaw:Action="urn:GetMetadata"/>	<wsdl2:output element="#none"/>	</wsdl2:operation>
138||The ping sample's client will not run out of the box, since the required ping module is not available in the repository, The README.TXT does not state this requirement.	In the googlespecllcheck sample build.xml, there is a link to an unavailable url for the wsdl (http://tools.wso2.net:12001/axis2/services/SimplifiedSpellCheck?wsdl).
139||when i run wsdl2java against the uploaded wsdl with the following command line:	wsdl2java.bat -ss -sd -uri EmployeeRecordService.wsdl -o generated		and then try to build the generated code, i get the following errors:	    [javac] Compiling 12 source files to C:axis2-SNAPSHOTempgeneratedbuildclasses	    [javac] C:axis2-SNAPSHOTempgeneratedsrcorgwso2employeeEmployeeRecordServiceServiceMessageReceiverInOut.java:63: incompatible types	    [javac] found   : org.wso2.employee.EmployeeNotFoundException	    [javac] required: java.lang.Throwable	    [javac]         } catch (EmployeeNotFoundException e) {	    [javac]                  ^	    [javac] C:axis2-SNAPSHOTempgeneratedsrcorgwso2employeeEmployeeRecordServiceServiceMessageReceiverInOut.java:66: createAxisFault(java.lang.Exception) in org.wso2.employee.EmployeeRecordServ	iceServiceMessageReceiverInOut cannot be applied to (org.wso2.employee.EmployeeNotFoundException)	    [javac]             org.apache.axis2.AxisFault f = createAxisFault(e);	    [javac]                                            ^	    [javac] C:axis2-SNAPSHOTempgeneratedsrcorgwso2employeeEmployeeRecordServiceServiceMessageReceiverInOut.java:67: cannot find symbol	    [javac] symbol  : method getFaultMessage()	    [javac] location: class org.wso2.employee.EmployeeNotFoundException	    [javac]             if (e.getFaultMessage() != null){	    [javac]                  ^	    [javac] C:axis2-SNAPSHOTempgeneratedsrcorgwso2employeeEmployeeRecordServiceServiceMessageReceiverInOut.java:68: cannot find symbol	    [javac] symbol  : method getFaultMessage()	    [javac] location: class org.wso2.employee.EmployeeNotFoundException	    [javac]                 f.setDetail(toOM(e.getFaultMessage(),false));	    [javac]                                   ^	    [javac] C:axis2-SNAPSHOTempgeneratedsrcorgwso2employeeEmployeeRecordServiceServiceSkeleton.java:27: incompatible types	    [javac] found   : org.wso2.employee.EmployeeNotFoundException	    [javac] required: java.lang.Throwable	    [javac]             throws EmployeeNotFoundException{	    [javac]                    ^	    [javac] Note: C:axis2-SNAPSHOTempgeneratedsrcorgwso2employeeEmployeeRecordServiceServiceMessageReceiverInOut.java uses or overrides a deprecated API.	    [javac] Note: Recompile with -Xlint:deprecation for details.	    [javac] Note: Some input files use unchecked or unsafe operations.	    [javac] Note: Recompile with -Xlint:unchecked for details.	    [javac] 5 errors
140||If commons-httpclient jar is absent, we get the following exception when we run java2wsdl.		An error occured while generating codeorg.apache.axis2.deployment.DeploymentException: org/apache/commons/httpclient/HttpException
141||It is not possible to omit the ReplyTo header in outgoing one way messages if WS-Addressing submission version is used.	It is set to anonymous. The INCLUDE_OPTIONAL_HEADERS option only takes effect when final version is used.		The semantic of ReplyTo is "I expect a reply" which is not the case in some scenarios.		See also mails at axis-users (27.06.2007)
142||Exception when reading wsdl schema. Following Stack trace is received when a relative path is used to read the wsdl definition.		org.apache.axis2.AxisFault: org.apache.ws.commons.schema.XmlSchemaException: C:AvailabilityService_schema1.xsd (The system cannot find the file specified.);	nested exception is:  java.lang.RuntimeException: org.apache.ws.commons.schema.XmlSchemaException: C:AvailabilityService_schema1.xsd	(The system cannot find the file specified.)	          org.apache.axis2.AxisFault: org.apache.ws.commons.schema.XmlSchemaException: C:AvailabilityService_schema1.xsd	(The system cannot find the file specified.); nested exception is:	        java.lang.RuntimeException: org.apache.ws.commons.schema.XmlSchemaException: C:AvailabilityService_schema1.xsd	(The system cannot find the file specified.)	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateService(WSDL11ToAxisServiceBuilder.java:293)	        at org.apache.axis2.jaxws.description.impl.EndpointDescriptionImpl.buildAxisServiceFromWSDL(EndpointDescriptionI	mpl.java:771)	        at org.apache.axis2.jaxws.description.impl.EndpointDescriptionImpl.setupAxisService(EndpointDescriptionImpl.java	:636)	        at org.apache.axis2.jaxws.description.impl.EndpointDescriptionImpl.<init>(EndpointDescriptionImpl.java:213	)	        at org.apache.axis2.jaxws.description.impl.EndpointDescriptionImpl.<init>(EndpointDescriptionImpl.java:182	)	        at org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.updateEndpointDescription(ServiceDescriptionIm	pl.java:275)	        at org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.updateEndpoint(DescriptionFactoryImpl.java:218	)	        at org.apache.axis2.jaxws.description.DescriptionFactory.updateEndpoint(DescriptionFactory.java:96)	        at org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:220)	        at javax.xml.ws.Service.getPort(Service.java:37)			I will provide the fix for this issue.
143||When the server gets a non-mtom (no mime stuff) soap request, it should respond the same way...w/o the mime stuff :(
144||I have deployed a service which requires WS-Addressing - here is a parrt of the WSDL		---	<wsdl:binding name="AddressBookServiceSOAP11Binding" type="axis2:AddressBookServicePortType">		    <wsaw:UsingAddressing wsdl:required="true" />	        <wsdl:operation name="addEntry">	            <soap:operation soapAction="urn:addEntry" style="document"/>	            <wsdl:input>	                <soap:body use="literal"/>	            </wsdl:input>	        </wsdl:operation>	        <wsdl:operation name="findEntry">	            <soap:operation soapAction="urn:findEntry" style="document"/>	            <wsdl:input>	                <soap:body use="literal"/>	            </wsdl:input>	            <wsdl:output>	                <soap:body use="literal"/>	            </wsdl:output>	        </wsdl:operation>	    </wsdl:binding>	    <wsdl:service name="AddressBookService">	        <wsdl:port name="AddressBookServiceSOAP11port_http" binding="axis2:AddressBookServiceSOAP11Binding">	            http://localhost:8080/axis2/services/AddressBookService"/>	            <wsa:EndpointReference>	                    <wsa:Address>RouterService</wsa:Address>	                    <wsa:ReferenceParameters>	                        <test>hello</test>                    	                    </wsa:ReferenceParameters>	            <wsa:Metadata>	               <wsaw:ServiceName>ServiceXXX</wsaw:ServiceName>	            </wsa:Metadata>	                </wsa:EndpointReference>	        </wsdl:port>	    </wsdl:service>	--	When I generate a stub with this wsdl, I do not see any of the wsa:EndpointReference that I specify in the wsdl. I thought that the stub  should contain this and generate the content in the ws-addressing headers. Instead I only get the following headers in the outgoing call:		---	<soapenv:Header>	        http://localhost:8070/axis2/services/AddressBookService	        <wsa:MessageID>urn:uuid:E21E2EE85BA5DDC1121183011196876</wsa:MessageID>	        <wsa:Action>urn:addEntry</wsa:Action>	    </soapenv:Header>	---		It should be  mandatory to include the wsa:Metadata and wsaReferenceParameters etc from the wsdl in outgoing call from the client. The user should not have to do this manually - the generated stub should include these just as it includes the wsa:Action now.
145||adb databinding for union types checks for wrong types. Method org.apache.axis2.databinding.types.Union.setObject() checks for type "dobule" instead of "double" and "datetime" instead of "dateTime". Note that the XML schema "http://www.w3.org/2001/XMLSchema" specifically defines dateTime with a capital "Time" and not lowercase "time".		The above causes client input of these union types to fail with Object not found and unexpected element.
146||If we read say the version wsdl (captured by running ?wsdl) against a tomcat instance and print it again. there are differences between the the two.		Example: the dynamic wsdl has the following entry		    <wsdl:portType name="VersionPortType">	        <wsdl:operation name="getVersion">	            <wsdl:input xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" message="axis2:getVersionRequest"	                        wsaw:Action="urn:getVersion"/>	            <wsdl:output message="axis2:getVersionResponse"/>	            <wsdl:fault message="axis2:getVersionFault" name="getVersionFault"/>	        </wsdl:operation>	    </wsdl:portType>		Whereas the one that we print by loading the dynamic wsdl using WSDL11ToAllAxisServicesBuilder and printing it again has this:		    <wsdl:portType name="VersionPortType">	        <wsdl:operation name="getVersion">	            <wsdl:input message="axis2:getVersionRequest" wsaw:Action="urn:getVersion"/>	            <wsdl:output message="axis2:getVersionResponse"	                         wsaw:Action="http://axisversion.sample/VersionPortType/getVersionResponse"/>	            <wsdl:fault message="axis2:getVersionFault" name="getVersionFault"	                        wsaw:Action="http://axisversion.sample/VersionPortType/getVersion/Fault/getVersionFault"/>	        </wsdl:operation>	    </wsdl:portType>		Am checking in a test case but commenting out the assertion (WSDL11ToAxisServiceBuilderTest)		thanks,	dims
147||(All credit for this Jira goes to Nick Gallardo, including the below text, and attached patch.)		With some QoSes applied, the thread that JAX-WS gets to process the response on does not have the appropriate ClassLoader	setup.  It has the same content, but is a different instance which results in a ClassCastException when we try to unmarshall	the response content with JAXB.		The fix is to set the Thread's context ClassLoader to same one that was used to load the AsyncHandler callback class.	That ensures we have both the right content and the right instance.
148||When code generated code is converted to doom, build() method of the SOAPEnvelope is called. This would create the SOAPEnvelope that is wrong. 		In Rampart29 case	===============	Please remove the <base64Binary> element out from the message. This element is added by "public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName){" in the generated code		<data xmlns:axis2ns1="http://www.w3.org/2005/05/xmlmime"	axis2ns1:contentType="application/pdf">	<base64Binary xmlns="http://www.w3.org/2001/XMLSchema">	Y29udGVtcG9yYXJ5C ........29tbXVuaXRpZXMgbGl2aW5nIG91dHNpZGUgdGhlIGxhbmQgb2YgSbXVuaXRpZXMuCg==	</base64Binary>	</data>			In Rampart53 case 	=============== 	SOAPEnvelope's build() method does not add the type parameter for type hierarchies. For example  xsi:type="s1:van" is missing in the evelope.		What the SOAP envelope should be:		<?xml version='1.0' encoding='UTF-8'?>	   <soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">	      <soapenv:Body>	         <ns2:getVehicleResponse xmlns:ns2="http://messages.sample/xsd">	            <ns2:vehicle xmlns:s1="http://sample/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="s1:van">	               <s1:vehicleID>1</s1:vehicleID>	               <s1:weight>0</s1:weight>	               <s1:passengers>0</s1:passengers>	               <s1:maxload>0</s1:maxload>	            </ns2:vehicle>	         </ns2:getVehicleResponse>	      </soapenv:Body>	   </soapenv:Envelope> 		What we get now:	<?xml version='1.0' encoding='UTF-8'?>	   <soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">	      <soapenv:Body>	         <ns2:getVehicleResponse xmlns:ns2="http://messages.sample/xsd">	            <vehicle xmlns="http://messages.sample/xsd">	               <vehicleID xmlns="http://sample/xsd">1</vehicleID>	               <weight xmlns="http://sample/xsd">0</weight>	               <passengers xmlns="http://sample/xsd">0</passengers>	               <maxload xmlns="http://sample/xsd">0</maxload>	            </vehicle>	         </ns2:getVehicleResponse>	      </soapenv:Body>	   </soapenv:Envelope>0
149||Hi all,		Herewith I have attached a patch which will enable WSDL2Java to generate code based on JAX-WS 2.0 standard. I would like to mark this as experimental because there are several thins to be completed..		1. Improve the usage of annotations.	2. Support for wrapper style mapping of method parameters.		Once these things are completed this feature can be put into the actual usage.		I would like to make a humble request to you all to use this feature and let me know your comments.		Sameera jayasoma.
150||The NIO HTTPS transport is throwing a java.nio.charset.MalformedInputException when a connection was being attempted. This was seen on Axis2 1.3 RC1
151||If two versions of the same module present in the respository, Axis2 allows to engage both versions to the same service.		For example suppose you have module-test-1.1.mar and module-test-1.2.mar in your repo. Then If you deploy a service with engaging module-test, you get module-test-1.2.mar as the engaged module since it is the latest version.	Now try to engage module-test-1.1.mar to the same service.	You can engage that as well. 		I think Axis2 should not allow to engage older version to the service.
152||A REST service that works fine under 1.1.1 generates an exception under 1.2.		To make this easy to spot, I tweaked the samples/pojo project. I simply added a constructor to AddressBookService  to add an Entry to the addressbook, e.g.,		  public AddressBookService() {	    Entry entry = new Entry();	    entry.setName("John");	    entry.setStreet("1 Broadway");	    entry.setCity("Cambridge");	    entry.setState("MA");	    entry.setPostalCode("02142");	    addEntry(entry);	  }		Then I built and deployed as usual.		Under 1.1.1, a request to http://localhost:8080/axis2/rest/AddressBookService/findEntry?param0=John returns:		<ns:findEntryResponse	xmlns:ns="http://service.addressbook.sample/xsd"><ns:return><city	xmlns="http://entry.addressbook.sample/xsd">Cambridge</city><name	xmlns="http://entry.addressbook.sample/xsd">John</name><postalCode	xmlns="http://entry.addressbook.sample/xsd">02142</postalCode><state	xmlns="http://entry.addressbook.sample/xsd">MA</state><street	xmlns="http://entry.addressbook.sample/xsd">1	Broadway</street></ns:return></ns:findEntryResponse>		Under 1.2 a request to the services endpoint (which in the default deploy handles everything) http://localhost:8080/axis2/services/AddressBookService/findEntry?param0=John		returns this in the log:		Jul 6, 2007 11:10:26 AM	org.apache.axis2.rpc.receivers.RPCMessageReceiver invokeBusinessLogic	SEVERE: Exception occurred while trying to invoke service method findEntry	org.apache.axis2.AxisFault: namespace mismatch require	http://service.addressbook.sample/xsd found none	       at	org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:98)	       at	org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver.receive(AbstractInOutSyncMessageReceiver.java:39)	       at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:144)	       at	org.apache.axis2.transport.http.util.RESTUtil.invokeAxisEngine(RESTUtil.java:122)	       at	org.apache.axis2.transport.http.util.RESTUtil.processURLRequest(RESTUtil.java:116)	       at	org.apache.axis2.transport.http.AxisServlet$ProcessRESTRequest.processURLRequest(AxisServlet.java:776)	       at org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:238)	       at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)		I will zip up and attach my modified samples/pojo
153||Some necessary details are missing in the READMEs.
154||can not codegen to the attached wsdl. it has Binding message level polices
155||I upgraded to 1.3 RC1 and notice this warning message during tomcat's startup:		WARNING: Dispatcher org.apache.axis2.engine.InstanceDispatcher is now deprecated. Please edit axis2.xml and replace with the same class in org.apache.axis2.dispatchers package			When I did that, I get ClassNotFoundException org.apache.axis2.dispatchers.InstanceDispatcher 	I looked into the distributed jar files and there is no InstanceDispatcher  class in org.apache.axis2.dispatchers package.	There is one in org.apache.axis2.engine though.		Not sure which package this class is supposed to be in.
156||Certain changes that were made to BeanUtil in adb's databinding package cause my client to break due to 2 changes.	The changes were made in revision 546616.	http://svn.apache.org/viewvc/webservices/axis2/trunk/java/modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java?r1=543752&r2=546616		Issue 1:	------------------------------------------------------------------------------------------------------------		What the change essentially did from my client's perspective is this:		ClassA {	   int i = 0;	   ClassB b = null;	}		When the BeanUtil class serialized this object, the resulting ObjectA's state is like this:	ObjectA { i=0; b = ObjectB} as opposed to b=null.		I hope I made my point clear, when I supply it an object with a field whose value is null, the resulting object's field is no longer null, but an actual instance is created (always!).		And here is the change that's doing this (from revision 546616 diff to its previous):	@@ -363,15 +374,14 @@	                     PropertyDescriptor proprty = propDescs[i];	                     properties.put(proprty.getName(), proprty);	                 }	-                boolean tuched = false;	                 Iterator elements = beanElement.getChildren();	+                if (beanObj == null) {	+                    beanObj = objectSupplier.getObject(beanClass);	+                }	                 while (elements.hasNext()) {	                     // the beanClass could be an abstract one.	                     // so create an instance only if there are elements, in	                     // which case a concrete subclass is available to instantiate.	-                    if (beanObj == null) {	-                        beanObj = objectSupplier.getObject(beanClass);	-                    }	                     OMElement parts;	                     Object objValue = elements.next();	                     if (objValue instanceof OMElement) {	@@ -405,14 +415,9 @@	                         if (writeMethod != null) {	                             writeMethod.invoke(beanObj, parms);	                         }	-                        tuched = true;	                     }	                 }	-                if (tuched) {	-                    return beanObj;	-                } else {	-                    return null;	-                }	+                return beanObj;	             }			See how the variable 'tuched' is no longer used and beanObj is always instantiated  (even when there is no next element) outside the while loop. 	This creates objects whose inner references are never going to be null (when they really may be if the client never populated them).	Was there any reason that change was made (there was no code comment to suggest that) ? If not, I think that code should be reverted back.			Issue 2:	--------------------------------------------------------------------------------------------------------	From the same diff, notice this change:	@@ -609,8 +614,12 @@	                                          helper, true, objectSupplier);	                 valueList.add(o);	             }	-            retObjs[count] = ConverterUtil.convertToArray(arrayClassType,	-                                                          valueList);	+            if(valueList.get(0)==null){	+                retObjs[count] = null;	+            } else {	+                retObjs[count] = ConverterUtil.convertToArray(arrayClassType,	+                        valueList);	+            }			Notice how the return array is always created irrespective of the valueList being empty.	ConverterUtil.convertToArray creates an array object which is null when valueList  is empty. 	When my client provides a null array I expect that it  comes out of BeanUtil as null rather than as a non-null array object with an empty element.		Again, if this was not done for any good reason, should probably be reverted back.			Thanks,	Sathija.
157||When an application throws an exception, the JAXWSMessageReceiver	throws a new exception which does not include as it's initalCause	the initial exception. This is done by the following code:	  faultToReturn = new AxisFault("An error was detected during JAXWS processing",	                                          axisResponseMsgCtx);		This results in the following logging data which is totally uninformative and doesn't make clear	that the exception came from user code, nor will it help them debug their application	(note, the application exception is not output to SystemOut or SystemErr)		The original exception caught from the user application should be retained and set as the	initial cause on the new AxisFault so that exception will be outputted.		This fix will allow the original 'caused by' exception to be captured and retained for logging purposes
158||There is a few typos in this newly added class.  attaching a patch in a minute.
159||JAX-WS client is being returned NULL application Scoped handler properties. BindingProvider.getResponseContext call on any of the application scope handler properties are not returned correctly. I will modify the code so we read this properties from MEPContext that is hung from the MessageContext.		I will provide the patch for this fix.
160||this patch provide re-sizable wizard panels for service archive wizard.
161||In some server-side environments, there is an out-of-memory problem when      	attempting to handle a large number of JAXWS-based web service applications.  		In the test scenario that fails, the server is attempting to load and start   	100 web service applications. A variety of heap sizes was tried to see if     	a heap size for the server could be found to work, ranging from 1 GB to 4 GB. 	Increasing the heap size did not work - the out-of-memory error continued to  	occur.                                                                        		In analyzing the java heap dumps, one of the biggest consumers of the memory  	is with the wsdl4j WSDLDefinition objects.  In the test scenario, the         	wsdl4j-related objects consumed about a quarter to a third of the entire heap.		The WSDLDefinition object is a very heavy-weight object, much of which stems  	from its use of the xerces dom objects as underlying support, particularly    	for the schemas.                                                              		One area to investigate is the saving of the WSDLDefinition as a Parameter    	in the AxisService's ParameterInclude list so that, if some component needs   	to utilize the WSDLDefinition object, it can be accessed via the AxisService  	object.                                                                       		Is it possible to reduce the utilization of the WSDLDefinition?               	Some ideas are:                                                               	(a) releasing it when it is no longer needed                                  	         - this might not be possible to determine                            		(b) putting a wrapper on the WSDLDefinition                                   	         - so that the WSDLDefinition,or a portion of the WSDLDefinition,     	           can be released                                                    	         - but if the WSDLDefinition is accessed after it was released,       	           the wrapper can reload the WSDLDefinition transparently to the     	           user                                                               		(c) create a layer for caching wsdl-related information                       	         - this would allow for releasing memory based on some algorithm      	           and/or interface that could indicate what's no longer needed
162||With JDK 1.4, FastInfoset jar version 1.1.* should be used. Maven2 script need to be modified to achieved this.
163||The DescriptionFactoryImpl.createServiceDescription() function attempts to cache/reuse the ServiceDescription objects and that leads to memory leaks.		First, a Hashtable is used for the cache. That means, any ServiceDescription created will always live in the cache and won't ever be reclaimed (and there is no clear cache function). Some sort of WeakHashMap could help the problem so that at least some unused ServiceDescription objects could be reclaimed. 		Second, the createServiceDescription() uses the DescriptionFactory.createClientConfigurationFactory().getClientConfigurationContext() to get the client configuration context. It looks like by default the ClientConfigurationFactory.getClientConfigurationContext() does NOT cache the configuration context. Therefore, each call creates a new configuration object. That means, that by default ServiceDescription will NOT be reused since the configuration context object instance is used to determine if the ServiceDescription should be reused or not (see DescriptionKey.equals() function). 		So, a simple program that calls createServiceDescription() repeatably in a loop (with the same arguments) will quickly run out of memory.
164||When an OMElement is deserialized into a POJO and the POJO has a setter/getter pair with an Array parameter, the result object is created and set into the POJO once for each member of the array.  So for example an object with	 String [] getHeaders()	 void setHeaders(String[] h)		where h[] is an array with 80 elements, the array h will be created 80 times and setHeaders will be called 80 times rather than once.  This causes incredibly poor performance.	It appears to be due to a pattern where each child in the element tree causes a jump back up to the parent and a re-creation of that array result.  This is very easy to recreate by instrumenting a set method that accepts an array.		I patched this locally in the 1_1_1 version of BeanUtil by changing line 283 from	                    PropertyDescriptor prty = (PropertyDescriptor) properties.get(partsLocalName);	to	                    PropertyDescriptor prty = (PropertyDescriptor) properties.remove(partsLocalName);		This removes the definition of the set method after it's called the first time, so the remainder of the array elements don't cause the entire result to be recreated over and over.	I looked at the 1.2 code and this does not appear to be resolved.  The performance impact in my case, with 4700 result objects in an array, with each result object having a further array of 77 fields, was huge.
165||When making REST GET calls to an API, Axis 2 core sets its input stream to null and then complains later that its stream has been closed. The following partial stack trace demonstrates the problem.		ApplicationXMLBuilder.processDocument(InputStream, String, MessageContext) line: 49		TransportUtils.createSOAPMessage(MessageContext, InputStream, String) line: 130		RESTUtil.processURLRequest(MessageContext, OutputStream, String) line: 98		AxisServlet$ProcessRESTRequest.processURLRequest() line: 776		AxisServlet.doGet(HttpServletRequest, HttpServletResponse) line: 238		AxisServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 707		AxisServlet(HttpServlet).service(ServletRequest, ServletResponse) line: 820		ServletHolder.handle(ServletRequest, ServletResponse) line: 487		...		In RESTUtil, method processURLRequest, the following call is made on line 98	                soapEnvelope = TransportUtils	                        .createSOAPMessage(msgContext, null, contentType);	where the null is supposed to be the input stream		Thus, when line 49 of ApplicationXMLBuilder in method processDocument is encountered,	            PushbackInputStream pushbackInputStream = new PushbackInputStream(inputStream);		where inputStream is null,		the exception "java.io.IOException: Stream closed" is generated once the empty stream is read at line 51	of ApplicationXMLBuilder:	           if ((b = pushbackInputStream.read()) > 0) {		For straight Axis use, this issue is a blocker, but I have worked around the problem by filtering empty get methods at the servlet level and am populating them with content for now.
166||using POJO's ..		in Attachments :		Res.java (the response object)	Test.java (server)	Test_client.java	services.wsdl		this happens when the response is some object with byte[] parameter inside it.		this wsdl & service.xml is generated automatically by the eclipse plug-in		so, test2() always works, small/larger byte[] size	in test() if you test with "some string".getBytes() will work	but larger ... no		here is the soap payload :		ns:byteData>104</ns:byteData><ns:byteData>111</ns:byteData><ns:byteData>109</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>44</ns:byteData><ns:byteData>32</ns:byteData><ns:byteData>86</ns:byteData><ns:byteData>101</ns:byteData><ns:byteData>114</ns:byteData><ns:byteData>100</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>110</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>44</ns:byteData><ns:byteData>32</ns:byteData><ns:byteData>65</ns:byteData><ns:byteData>114</ns:byteData><ns:byteData>105</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>108</ns:byteData><ns:byteData>44</ns:byteData><ns:byteData>32</ns:byteData><ns:byteData>72</ns:byteData><ns:byteData>101</ns:byteData><ns:byteData>108</ns:byteData><ns:byteData>118</ns:byteData><ns:byteData>101</ns:byteData><ns:byteData>116</ns:byteData><ns:byteData>105</ns:byteData><ns:byteData>99</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>59</ns:byteData><ns:byteData>13</ns:byteData><ns:b	yteData>10</ns:byteData><ns:byteData>9</ns:byteData><ns:byteData>102</ns:byteData><ns:byteData>111</ns:byteData><ns:byteData>110</ns:byteData><ns:byteData>116</ns:byteData><ns:byteData>45</ns:byteData><ns:byteData>115</ns:byteData><ns:byteData>105</ns:byteData><ns:byteData>122</ns:byteData><ns:byteData>101</ns:byteData><ns:byteData>58</ns:byteData><ns:byteData>32</ns:byteData><ns:byteData>49</ns:byteData><ns:byteData>48</ns:byteData	><ns:byteData>112</ns:byteData><ns:byteData>116</ns:byteData><ns:byteData>59</ns:byteData><ns:byteData>13</ns:byteData><ns:byteData>10</ns:byteData><ns:byteData>9</ns:byteData><ns:byteData>102</ns:byteData><ns:byteData>111</ns:byteData><ns:byteData>110</ns:byteData><ns:byteData>116</ns:byteData><ns:byteData>45</ns:byteData><ns:byteData>119</ns:byteData><ns:byteData>101</ns:byteData><ns:byteData>105</ns:byteData><ns:byteData>103</ns:byteData><ns:byteData>104</ns:byteData><ns:byteData>116</ns:byteData><ns:byteData>58</ns:byteData><ns:byteData>32</ns:byteData><ns:byteData>110</ns:byteData><ns:byteData>111</ns:byteData><ns:byteData>114</ns:byteData><ns:byteData>109</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>108</ns:byteData><ns:byteData>59</ns:byteData><ns:byteData>13</ns:byteData><ns:byteData>10</ns:byteData><ns:byteData>125</ns:byteData><ns:byteData>13</ns:byteData><ns:byteData>10</ns:byteData><ns:byteData>46</ns:byteData><ns:byteData>99</ns:byteData><ns:byteData>111</ns:byteData><ns:byteData>110</n	s:byteData><ns:byteData		2000		>116</ns:byteData><ns:byteData>101</ns:byteData><ns:byteData>110</ns:byteData><ns:byteData>116</ns:byteData><ns:byteData>49</ns:byteData><ns:byteData>123</ns:byteData><ns:byteData>13</ns:byteData><ns:byteData>10</ns:byteData><ns:byteData>9</ns:byteData><ns:byteData>109</ns:byteData><ns:byteData>97</ns:byteData><ns:byteData>114</ns:byteData><ns:byteData>103</ns:byteData><ns:byteData>105</ns:byteData><ns	:byteData>110</ns:byteData><ns:byteData>58</ns:byteData>			is not encoded in base64 !?		Best Regards	George
167||WSDL 2.0 validation is turned off by default in Woden. It'll be good if we can turn this on. I will check this into trunk. Thanks Chathura for pointing this out. Deepal can we check this into the 1.3 branch too?
168||The new axis2.war does not work properly on websphere. There are problems with the wsdl2 generation, and the wsdl 1.1 genaration.
169||When a module has control operations and does not have soap action, getting ?wsdl2 returns an axisfault.		-Engage a module to a service which has control operations 	- Issue ?wsdl2		java.lang.NullPointerException	        at com.ctc.wstx.sw.BaseNsStreamWriter.doWriteAttr(BaseNsStreamWriter.java:468)	        at com.ctc.wstx.sw.SimpleNsStreamWriter.writeAttribute(SimpleNsStreamWriter.java:96)	        at org.apache.axiom.om.impl.MTOMXMLStreamWriter.writeAttribute(MTOMXMLStreamWriter.java:142)	        at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeStartpart(OMSerializerUtil.java:415)	        at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeStartpart(OMSerializerUtil.java:172)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:768)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:756)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:772)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:756)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:772)	        at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:756)	        at org.apache.axiom.om.impl.llom.OMNodeImpl.serialize(OMNodeImpl.java:345)	        at org.apache.axiom.om.impl.llom.OMNodeImpl.serialize(OMNodeImpl.java:383)	        at org.apache.axis2.description.AxisService.printWSDL2(AxisService.java:1154)
170||Axis codegen has a problem when there are objects with the same name in different namespaces. I will upload a sample wsdl. If you use wsdl2java to create a service like this: wsdl2java -uri EVBService-2.0.1.0.wsdl -ss -sd -d jaxbri -o service	you will get an exception on console: 		Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: java.lang.	reflect.InvocationTargetException	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:256)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:32)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	Caused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	        at org.apache.axis2.wsdl.codegen.extension.JAXBRIExtension.engage(JAXBRIExtension.java:109)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:209)	        ... 2 more	Caused by: java.lang.reflect.InvocationTargetException	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	        at java.lang.reflect.Method.invoke(Method.java:585)	        at org.apache.axis2.wsdl.codegen.extension.JAXBRIExtension.engage(JAXBRIExtension.java:98)	        ... 3 more	Caused by: java.lang.RuntimeException: java.lang.NullPointerException	        at org.apache.axis2.jaxbri.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:126)	        ... 8 more	Caused by: java.lang.NullPointerException	        at org.apache.axis2.jaxbri.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:105)	        ... 8 more			... which seems to be an "optimizable" design, because you do not see the real exception. When I debugged the code I got the real exception: 	>>>>>>>	org.xml.sax.SAXParseException: A class/interface with the same name "net.bipro.www.namespace.evb.CTStatusResponse" is already in use. Use a class customization to resolve this conflict.	<<<<<<<<<<<<<	I saw that JAXBs XJC compiler does not have any problems with our schema, so there had to be a difference of parameters between xjc batch and axis2 codegen. So I found out that if you comment out the statement "sc.setDefaultPackageName(pkg);" in CodeGenerationUtility:processSchemas(), everything is generated just fine!		This might have some side effects, so someone who really knows what happens down the code should have a look at this. Maybe a solution would be to have another command line parameter for wsdl2java to not set the default package.			There is another, smaller problem which occurs when you use my bugfix:  when the code is generated, the message receiver class cannot be compiled because of an obviously wrong code: the method toOM() needs three parameters, but only two are submitted: toOM(e.getFaultMessage(),false));	If you change it to toOM(e.getFaultMessage(), getSOAPFactory(msgContext), false), everything can be compiled and works.
171||In our project ,we need to manage the status of service and need to log it.After read the user guide I implement it by using listener .I create a class implements AxisObeserver and make it in the classpath and I make <parameter name="hotupdate">true</parameter>  and add a listener in axis2.xml .	   Start tomcat successfully ,run the axis2 successfully and deploy the webservice successfully.there is a log about my webservice deployment and undeployment.but when I deactivate Service or activate service there is nothing happened,although my buddies and I have tested several times the result is same.So I think it is a bug.	  Check it please!thanks.	  You done a greate job!!
172||When running wsdl2java on the attached wsdl & xsd files i got:		 [java] Caused by: org.apache.xmlbeans.XmlException: project://local/xmldsig-core-schema.xsd:6:1: error: sch-props-correct.2: Duplicate global type: SignatureType@http://www.w3.org/2000/09/xmldsig# (Original global type found in file: xmldsig-core-schema.xsd)		xmldsig-core-schema.xsd is imported from xkms.xsd and from xenc-schema.xsd		seems to be very similar to AXIS2-1885 and AXIS2-1781
173||src/main/java/org/apache/ideaplugin/bean/ValidateXMLFile.java:[49,80] cannot resolve symbol	symbol  : variable W3C_XML_SCHEMA_NS_URI 	location: class javax.xml.XMLConstants
174||I have a wsdl that imports a schema with no namespace; I've attached a sample wsdl that generates the error. Trying to generate a client stub fails with both xmlbeans and adb, the error is:		Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:256)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:32)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:21)	Caused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	        at org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLBeansExtension.java:103)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:209)	        ... 2 more	Caused by: java.lang.reflect.InvocationTargetException	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	        at java.lang.reflect.Method.invoke(Method.java:585)	        at org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLBeansExtension.java:92)	        ... 3 more	Caused by: java.lang.RuntimeException: org.apache.xmlbeans.XmlException: error: src-resolve.a: Could not find element 'AccountBOS@http://some.namespace'. Do you mean to refer to the element named AccountBOS?	        at org.apache.axis2.xmlbeans.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:310)	        ... 8 more	Caused by: org.apache.xmlbeans.XmlException: error: src-resolve.a: Could not find element 'AccountBOS@http://some.namespace'. Do you mean to refer to the element named AccountBOS?	        at org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler.compile(SchemaTypeSystemCompiler.java:225)	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	        at java.lang.reflect.Method.invoke(Method.java:585)	        at org.apache.xmlbeans.XmlBeans.compileXmlBeans(XmlBeans.java:667)	        at org.apache.axis2.xmlbeans.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:174)		I've independently run xmlbeans generation on this and it succeeds, correctly generating AccountBOS in noNamespace. The problem with wsdl2java is that the reference to AccountBOS is being assigned a namespace when it shouldn't be, this is an import, not an include.
175||Axis2 idea plugin has some java class without apache licensed. so this patch is adding license to class which has without  apache license.
176||After I copied my StockQuoteService.aar file into tomcat 4.1.36 under folder axis2WEB-INFservices, from this URL: http://localhost:8080/axis2/services/listServices, I can see all the services including Version and StockQuoteService, I did the same thing to NES6.2, I could not see the StockQuoteService from the listServices URL, for NES, only I manually added StockQuoteService.aar to services.LIST file under axis2WEB-INFservices, then I can see the StockQuoteService and everything works normally. But I checked the result on tomcat, nothing is added to services.LIST file, but it still lists all the services.		After I debug into the code, I found in WarBasedAxisConfigurator.java, there are three getRealPath("") calls, in NES6.2 environment, they returned null, but in Tomcat, they returned the real path string, in order to work for more web servers, they should be changed to getRealPath("/") , that will always return the real path as: C:apache-tomcat-4.1.36webappsaxis2 in windows or optredhat-eshttps-dduRHL.pkipro/web-apps/axis2.	I did the change in my version of axis2-1.2 release, it now work for both tomcat and NES6.2.
177||I have introduced some code blocks to "org.apache.axis2.jaxbri.CodeGenerationUtility" class which will make jaxbri to support unwrapping of schema elements.		This is really an essential feature for implementing wrapper style mapping of method parameters in JAX-WS ( When generating code). Therefore I would really appreciate if this patch can be committed to the trunk early.		Thanks	Sameera.
178||We're trying to create some Axis 2 services which are usable by other clients (including .NET and Axis 1). At first, we had problems due to AXIS2-2294, but upgrading to Axis 2 1.3-RC2 fixed that. However, the WSDL is still unreadable to the Axis 1 client because of the SOAP 1.2 bindings which are also present in the file:		java.io.IOException: ERROR: Missing <soap:fault> element inFault "XMLStreamException" in operation "XMLStreamException", in binding sayHello		The attached patch (disable-soap-1.1.patch) adds a configuration option to disable generation of these bindings.
179||Currently the <InFlow> and <OutFlow> elements in module.xml must read EXACTLY that way - in particular <inflow> and <outflow> will not be recognized.		We should make the read of these elements (ModuleBuilder:160 onwards) case-insensitive, IMO, to make things easier on the developer.  <inflow> or <INFLOW> shouldn't fail silently.
180||This code:		public static void main(String[] args) {		  String s = "<?xml version=""1.0"" encoding=""UTF-8""?>" + 	                    "<registryInfo xmlns=""urn:uddi-org:api"">" +	                    "<property xmlns=""urn:uddi-org:api_v2"" name=""operatorEmailAddress"" value=""admin@juddi.org""/>" +	                    "<property xmlns=""urn:uddi-org:api_v2"" name=""operatorName"" value=""jUDDI.org""/>" +	                    "<property xmlns=""urn:uddi-org:api_v2"" name=""registryVersion"" value=""0.9rc4""/>" +	                    "<property xmlns=""urn:uddi-org:api_v2"" name=""uddiVersion"" value=""2.0""/>" +	                    "</registryInfo>";		  try {	    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();	    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();	    Document doc = docBuilder.parse(new ByteArrayInputStream(s.getBytes()));	    writeXmlFile(doc);	    SOAPMessage soapRes = null;	    MessageFactory msgFactory = MessageFactory.newInstance();	    soapRes = msgFactory.createMessage();	    soapRes.getSOAPBody().addDocument(doc);	    System.out.println("n-----------------------------------------------------------------------");	    writeXmlFile(soapRes.getSOAPBody());		  }	  catch (Exception e) {	    System.out.println(e.getMessage());	  }	}		public static void writeXmlFile(Node node) {	  try {	    Source source = new DOMSource(node);	    Result result = new StreamResult(System.out);	    Transformer xformer = TransformerFactory.newInstance().newTransformer();	    xformer.transform(source, result);	  } catch (TransformerConfigurationException e) {	  } catch (TransformerException e) {	  }	}			produces this output (indents added for readability):		<?xml version="1.0" encoding="UTF-8"?>	<registryInfo xmlns="urn:uddi-org:api">	  <property xmlns="urn:uddi-org:api_v2" name="operatorEmailAddress" value="admin@juddi.org"/>	  <property xmlns="urn:uddi-org:api_v2" name="operatorName" value="jUDDI.org"/>	  <property xmlns="urn:uddi-org:api_v2" name="registryVersion" value="0.9rc4"/>	  <property xmlns="urn:uddi-org:api_v2" name="uddiVersion" value="2.0"/>	</registryInfo>	-----------------------------------------------------------------------	<?xml version="1.0" encoding="UTF-8"?>	<soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis2ns1="">	  <axis2ns3:registryInfo xmlns:axis2ns2="" xmlns:axis2ns3="">	    <property name="operatorEmailAddress" value="admin@juddi.org"/>	    <property name="operatorName" value="jUDDI.org"/>	    <property name="registryVersion" value="0.9rc4"/>	    <property name="uddiVersion" value="2.0"/>	  </axis2ns3:registryInfo>	</soapenv:Body>		Where the namespaces are blank after adding the XML to the SOAPMessage's body.		This is using the simplest example I could make.  In my actual project, where essentially the same code is being executed, I get something like this returned, which is the opposite problem...too many namespaces:		<?xml version="1.0" encoding="UTF-8"?>	<soapenv:Body xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis2ns18="urn:uddi-org:api">	  <axis2ns24:registryInfo xmlns:axis2ns24="urn:uddi-org:api" xmlns:axis2ns13="urn:uddi-org:api_v2" xmlns:axis2ns17="urn:uddi-org:api_v2" xmlns:axis2ns19="urn:uddi-org:api" xmlns:axis2ns5="urn:uddi-org:api_v2" xmlns:axis2ns9="urn:uddi-org:api_v2">	    <axis2ns5:property xmlns:axis2ns20="urn:uddi-org:api_v2" name="operatorEmailAddress" value="admin@juddi.org" xmlns:axis2ns5="urn:uddi-org:api_v2"/>	    <axis2ns9:property xmlns:axis2ns21="urn:uddi-org:api_v2" name="operatorName" value="jUDDI.org" xmlns:axis2ns9="urn:uddi-org:api_v2"/>	    <axis2ns13:property xmlns:axis2ns22="urn:uddi-org:api_v2" name="registryVersion" value="0.9rc4" xmlns:axis2ns13="urn:uddi-org:api_v2"/>	    <axis2ns17:property xmlns:axis2ns23="urn:uddi-org:api_v2" name="uddiVersion" value="2.0" xmlns:axis2ns17="urn:uddi-org:api_v2"/>	  </axis2ns24:registryInfo>	</soapenv:Body>
181||If policy is attached using a serivces.xml the those policies should appear in the Axis2 description hierarchy instead of the binding hierarchy.		For instance policies that are includes inside the <service> element ( service level scope) should appear in the <wsdl:service> element instead of each <wsdl:port>. 		If a policy that are include inside the <message> element, it should appear in the appropriate <wsdl:input> or <wsdl:output> element of each <wsdl:portType> element.
182||This patch provide improvements to the following areas		1. Usage of Holder Class for the in/out method parameters	2. Usage of annotations in the generated SEI.		Thanks	Sameera
183||To simplify I have retained the same directory structure as the samples and deployed the aar in the exploded Axis2 war.		# Setup #	     * Generate service (server) using WSDL2Java	%AXIS2_HOME%/bin/WSDL2Java -uri resources/META-INF/IntegrationServices.wsdl -p samples.quickstart.service.xmlbeans -d xmlbeans -s -ss -sd -ssi -o build/service	     * Build the project	     * Copy %ProjectHome%buildservicebuildlibIntegrationPortTypeImplService.aar to the axis2 exploded war service directory (%WebLogicAppDir%axis2WEB-INFservices)	     * Copy %ProjectHome%buildservicebuildlibXBeans-packaged.jar to %WebLogicAppDir%axis2WEB-INFlib		WSDL and generated binding code attached.		The service code is nothing more than an output statement w/ the original throw exception statement left in there, just trying to get into the function. I was able to successfully implement the client/service using adb.		# Testing #	     * Create/Validate request using soapUI		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:bean="http://strongauth.zionsbank.com/webservices/beans">	   <soapenv:Header/>	   <soapenv:Body>	      <bean:ValidatePasswordRequest>	         <!--Zero or more repetitions:-->	         <credentials>	            <type>CustomerUserId</type>	            <value>user_id</value>	         </credentials>	         <credentials>	            <type>CustomerPassword</type>	            <value>password</value>	         </credentials>	      </bean:ValidatePasswordRequest>	   </soapenv:Body>	</soapenv:Envelope>		     * Post to service, get response		<soapenv:Envelope	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">	   <soapenv:Body>	      <soapenv:Fault>	         <faultcode>soapenv:Client</faultcode>		<faultstring>org.apache.xmlbeans.impl.values.XmlComplexContentImpl</faul	tstring>	         <detail>	            <Exception>org.apache.axis2.AxisFault:	org.apache.xmlbeans.impl.values.XmlComplexContentImpl	 at	org.apache.axis2.AxisFault.makeFault(Ljava.lang.Throwable;)Lorg.apache.a	xis2.AxisFault;(AxisFault.java:417)	 at	samples.quickstart.service.xmlbeans.IntegrationPortTypeImplServiceMessag	eReceiverInOut.fromOM(Lorg.apache.axiom.om.OMElement;Ljava.lang.Class;Lj	ava.util.Map;)Lorg.apache.xmlbeans.XmlObject;(IntegrationPortTypeImplSer	viceMessageReceiverInOut.java:147)	 at	samples.quickstart.service.xmlbeans.IntegrationPortTypeImplServiceMessag	eReceiverInOut.invokeBusinessLogic(Lorg.apache.axis2.context.MessageCont	ext;Lorg.apache.axis2.context.MessageContext;)V(IntegrationPortTypeImplS	erviceMessageReceiverInOut.java:42)	 at	org.apache.axis2.receivers.AbstractInOutSyncMessageReceiver.invokeBusine	ssLogic(Lorg.apache.axis2.context.MessageContext;)V(AbstractInOutSyncMes	sageReceiver.java:42)	 at	org.apache.axis2.receivers.AbstractMessageReceiver.receive(Lorg.apache.a	xis2.context.MessageContext;)V(AbstractMessageReceiver.java:95)	 at	org.apache.axis2.engine.AxisEngine.receive(Lorg.apache.axis2.context.Mes	sageContext;)Lorg.apache.axis2.engine.Handler$InvocationResponse;(AxisEn	gine.java:145)	 at	org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostReques	t(Lorg.apache.axis2.context.MessageContext;Ljava.io.InputStream;Ljava.io	.OutputStream;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Lor	g.apache.axis2.engine.Handler$InvocationResponse;(HTTPTransportUtils.jav	a:276)	 at	org.apache.axis2.transport.http.AxisServlet.doPost(Ljavax.servlet.http.H	ttpServletRequest;Ljavax.servlet.http.HttpServletResponse;)V(AxisServlet	.java:119)	 at	javax.servlet.http.HttpServlet.service(Ljavax.servlet.http.HttpServletRe	quest;Ljavax.servlet.http.HttpServletResponse;)V(HttpServlet.java:760)	 at	javax.servlet.http.HttpServlet.service(Ljavax.servlet.ServletRequest;Lja	vax.servlet.ServletResponse;)V(HttpServlet.java:853)	 at	weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run()L	java.lang.Object;(ServletStubImpl.java:1006)	 at	weblogic.servlet.internal.ServletStubImpl.invokeServlet(Ljavax.servlet.S	ervletRequest;Ljavax.servlet.ServletResponse;Lweblogic.servlet.internal.	FilterChainImpl;)V(ServletStubImpl.java:419)	 at	weblogic.servlet.internal.ServletStubImpl.invokeServlet(Ljavax.servlet.S	ervletRequest;Ljavax.servlet.ServletResponse;)V(ServletStubImpl.java:315	)	 at	weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.r	un()Ljava.lang.Object;(WebAppServletContext.java:6718)	 at	weblogic.security.acl.internal.AuthenticatedSubject.doAs(Lweblogic.secur	ity.subject.AbstractSubject;Ljava.security.PrivilegedAction;)Ljava.lang.	Object;(AuthenticatedSubject.java:321)	 at	weblogic.security.service.SecurityManager.runAs(Lweblogic.security.acl.i	nternal.AuthenticatedSubject;Lweblogic.security.acl.internal.Authenticat	edSubject;Ljava.security.PrivilegedAction;)Ljava.lang.Object;(SecurityMa	nager.java:121)	 at	weblogic.servlet.internal.WebAppServletContext.invokeServlet(Lweblogic.s	ervlet.internal.ServletRequestImpl;Lweblogic.servlet.internal.ServletRes	ponseImpl;)V(WebAppServletContext.java:3764)	 at	weblogic.servlet.internal.ServletRequestImpl.execute(Lweblogic.kernel.Ex	ecuteThread;)V(ServletRequestImpl.java:2644)	 at	weblogic.kernel.ExecuteThread.execute(Lweblogic.kernel.ExecuteRequest;)V	(ExecuteThread.java:219)	 at weblogic.kernel.ExecuteThread.run()V(ExecuteThread.java:178)	 at java.lang.Thread.startThreadFromVM(Ljava.lang.Thread;)V(Unknown	Source)	Caused by: java.lang.ClassCastException:	org.apache.xmlbeans.impl.values.XmlComplexContentImpl	 at	com.zionsbank.strongauth.webservices.beans.ValidatePasswordRequestDocume	nt$Factory.parse(Ljavax.xml.stream.XMLStreamReader;Lorg.apache.xmlbeans.	XmlOptions;)Lcom.zionsbank.strongauth.webservices.beans.ValidatePassword	RequestDocument;(ValidatePasswordRequestDocument.java:86)	 at	samples.quickstart.service.xmlbeans.IntegrationPortTypeImplServiceMessag	eReceiverInOut.fromOM(Lorg.apache.axiom.om.OMElement;Ljava.lang.Class;Lj	ava.util.Map;)Lorg.apache.xmlbeans.XmlObject;(IntegrationPortTypeImplSer	viceMessageReceiverInOut.java:123)	 ... 19 more</Exception>	         </detail>	      </soapenv:Fault>	   </soapenv:Body>	</soapenv:Envelope>		# Manually generating using XML Beans 2.3.0 scomp #	As a side note: I did notice that when I was attempting to generate the XML Binding code manually (using scomp), there were some things that were not being generated, namely org.w3.www._2004._06.xmlmime.*, org.xmlsoap.schemas.soap.encoding.*, both source and resources. I attempted to merge the old resources w/ the new that I generated and replace the existing source files with the generated ones and was unsuccefull at getting this to work. Recieved a null pointer on the server side (Axis2 Servlet) and the returning soap message was an html page stating "Internal server error".		# Server Exception	<Aug 2, 2007 2:19:07 PM MDT> <Error> <HTTP> <BEA-101020> <[ServletContext(id=5987488,name=axis2,context-path=/axis2)] Servlet failed with Exception	java.lang.NullPointerException	 at org.apache.axis2.transport.http.AxisServlet.doPost(Ljavax.servlet.http.HttpServletRequest;Ljavax.servlet.http.HttpServletResponse;)V(AxisServlet.java:170)	 at javax.servlet.http.HttpServlet.service(Ljavax.servlet.http.HttpServletRequest;Ljavax.servlet.http.HttpServletResponse;)V(HttpServlet.java:760)	 at javax.servlet.http.HttpServlet.service(Ljavax.servlet.ServletRequest;Ljavax.servlet.ServletResponse;)V(HttpServlet.java:853)	 at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run()Ljava.lang.Object;(ServletStubImpl.java:1006)	 at weblogic.servlet.internal.ServletStubImpl.invokeServlet(Ljavax.servlet.ServletRequest;Ljavax.servlet.ServletResponse;Lweblogic.servlet.internal.FilterChainImpl;)V(ServletStubImpl.java:419)	 at weblogic.servlet.internal.ServletStubImpl.invokeServlet(Ljavax.servlet.ServletRequest;Ljavax.servlet.ServletResponse;)V(ServletStubImpl.java:315)	 at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run()Ljava.lang.Object;(WebAppServletContext.java:6718)	 at weblogic.security.acl.internal.AuthenticatedSubject.doAs(Lweblogic.security.subject.AbstractSubject;Ljava.security.PrivilegedAction;)Ljava.lang.Object;(AuthenticatedSubject.java:321)	 at weblogic.security.service.SecurityManager.runAs(Lweblogic.security.acl.internal.AuthenticatedSubject;Lweblogic.security.acl.internal.AuthenticatedSubject;Ljava.security.PrivilegedAction;)Ljava.lang.Object;(SecurityManager.java:121)	 at weblogic.servlet.internal.WebAppServletContext.invokeServlet(Lweblogic.servlet.internal.ServletRequestImpl;Lweblogic.servlet.internal.ServletResponseImpl;)V(WebAppServletContext.java:3764)	 at weblogic.servlet.internal.ServletRequestImpl.execute(Lweblogic.kernel.ExecuteThread;)V(ServletRequestImpl.java:2644)	 at weblogic.kernel.ExecuteThread.execute(Lweblogic.kernel.ExecuteRequest;)V(ExecuteThread.java:219)	 at weblogic.kernel.ExecuteThread.run()V(ExecuteThread.java:178)	 at java.lang.Thread.startThreadFromVM(Ljava.lang.Thread;)V(Unknown Source)		# Soap Post Response (posted soap message same as above using soapUI)			<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">	<html>	  <head>								<base href="http://localhost:7001/axis2/"/>	    <title>Axis2 :: Internal server error</title>	    <link href="axis2-web/css/axis-style.css" rel="stylesheet" type="text/css"/>	    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>	  </head>		  <body>	    <table width="100%">	      <tr>	        <td align="left"><img src="axis2-web/images/asf-logo.gif" alt=""/></td>	        <td align="right"><img src="axis2-web/images/axis_l.jpg" alt=""/></td>	      </tr>	    </table>	    <table width="100%">	      <tr>	        <td>	          <h1>Internal server error</h1>	          <br/>	          <br/>	          <br/>	          <br/>	        </td>	      </tr>	      <tr><td align="center"><a href="axis2-web/index.jsp">home</a></td></tr>	    </table>	    <hr/>	    <table width="100%">	      <tr><td>	        <table width="950px">	          <tr><td><hr size="1" noshade=""/></td></tr>	          <tr>	            <td align="center">Copyright &#169; 1999-2006, The Apache Software Foundation<br/>Licensed under the <a	              href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>.</td>	          </tr>	        </table>	      </td>	        <td>&nbsp;</td>	      </tr>	    </table>	  </body>	</html>
184||WSDL2Java operation fails with the following exception:	     [java] Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	     [java] at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:265)	     [java] at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35)	     [java] at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24)	     [java] Caused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	     [java] at org.apache.axis2.wsdl.codegen.extension.JAXBRIExtension.engage(JAXBRIExtension.java:112)	     [java] at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:218)	     [java] ... 2 more	     [java] Caused by: java.lang.reflect.InvocationTargetException	     [java] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	     [java] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)	     [java] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	     [java] at java.lang.reflect.Method.invoke(Method.java:615)	     [java] at org.apache.axis2.wsdl.codegen.extension.JAXBRIExtension.engage(JAXBRIExtension.java:101)	     [java] ... 3 more	     [java] Caused by: java.lang.RuntimeException: java.lang.RuntimeException: Unable to generate code using jaxbri	     [java] at org.apache.axis2.jaxbri.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:177)	     [java] ... 8 more	     [java] Caused by: java.lang.RuntimeException: Unable to generate code using jaxbri	     [java] at org.apache.axis2.jaxbri.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:152)	     [java] ... 8 more	     [java] Java Result: 1		Ant task used:		<target name="wsdl2java" depends="clean,prepare">			<delete dir="output" />			<java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">				<classpath refid="axis.classpath" />				<arg value="-d" />				<arg value="jaxbri" />				<arg value="-uri" />				<arg file="${dir.wsdl}/${uri.wsdl}" />				<arg value="-ss" />				<arg value="-g" />				<arg value="-sd" />				<arg value="-ssi" />				<arg value="-o" />				<arg file="output" />			</java>			<!-- Move the schema folder to classpath-->			<mkdir dir="output/resources/META-INF" />			<move todir="output/resources/META-INF">				<fileset dir="output/resources">					<!-- axis2 web services definitions file -->					<include name="services.xml" />					<include name="*.wsdl" />					<include name="*.xsd" />				</fileset>			</move>	</target>			The WSDL is correctly parsed and the code generated when using official jaxb 2.0.5 distribution and the included xjc.bat script file.		Attached files: faulty wsdl with the imported xsd in the wsdl.
185||
186||In axis2-1.2 release, probably in axis2-1.3RC as well, I got StringIndexOutOfBoundException from the kernel module ListingAgent.java at line 92 String portstr = ip.substring(seperatorIndex + 1, slashIndex); The reason for this exception is that it looks for url like this: http://localhost:8080/axis2/services/listServices, it has to have :PORT_NUMBER, but in my linux RHEL 4 with firefox web browser,  it defaults to port number 80, so the URL will be http://localhost/axis2/services/listServices, I found this after I put debug message in the ListingAgent.java. so I tried this new URL: http://localhost:80/axis2/services/listServices, I got NullPointerException as follows.		[01/Aug/2007:07:02:36] failure ( 3722): Internal error: exception thrown from the servlet service function (uri=/axis2/axis2-web/listServices.jsp): 	java.lang.NullPointerException: IWSHttpSession: Session attribute name or value is null, Stack: java.lang.NullPointerException: IWSHttpSession: 	Session attribute name or value is null		at	com.netscape.server.http.session.IWSHttpSession.setAttribute(IWSHttpSession.java:500)		at	_jsps._axis2_web._listServices_jsp._jspService(_listServices_jsp.java:141)		at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:108)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)		at	org.apache.jasper.servlet.JspServlet$JspServletWrapper.service(JspServlet.java:247)		at	org.apache.jasper.servlet.JspServlet$JspServletWrapper.access$600(JspServlet.java:97)		at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:538)		at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:606)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)		at	com.netscape.server.http.servlet.NSServletRunner.invokeServletService(NSServletRunner.java:894)		at	com.netscape.server.http.servlet.WebApplication.service(WebApplication.java:1219)		at	com.netscape.server.http.servlet.NSServletRunner.ServiceWebApp(NSServletRunner.java:956)		at	com.netscape.server.http.servlet.NSServletSession.internalRedirect(Native	Method)		at	com.netscape.server.http.servlet.NSRequestDispatcher.include(NSRequestDispatcher.java:93)		at	org.apache.axis2.transport.http.AbstractAgent.renderView(AbstractAgent.java:118)		at	org.apache.axis2.transport.http.ListingAgent.processListServices(ListingAgent.java:375)		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)		at	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)		at	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)		at java.lang.reflect.Method.invoke(Method.java:585)		at	org.apache.axis2.transport.http.AbstractAgent.handle(AbstractAgent.java:77)		at	org.apache.axis2.transport.http.ListingAgent.handle(ListingAgent.java:109)		at org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:233)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:740)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)		at	com.netscape.server.http.servlet.NSServletRunner.invokeServletService(NSServletRunner.java:894)		at	com.netscape.server.http.servlet.WebApplication.service(WebApplication.java:1219)		at	com.netscape.server.http.servlet.NSServletRunner.ServiceWebApp(NSServletRunner.java:956)
187||For example, I have the following parameter in one of the methods in my SEI -		        @WebParam(name = "claimFormImage", targetNamespace = "http://test.apache.org")	        byte[] claimFormImage,		The deployment will fail because of a NPE (from line 1092 of ServiceDescriptionImpl.java) as we built an empty ParameterDescriptionComposite for it.		The attached patch will check if the paramType is GenericArrayType, if so, set the ParameterDescriptionComposite  properly.
188||Dan Sedov from the IBM Functional Test team discovered that the JAXB marshalling code in JAXWS is missing a doPriv call.
189||This fix was contributed by Dan Sedov.  He is a member of the IBM Functional Test organization that is responsible for testing the JAX-WS contribution to Axis2.		In some cases, the HTTP CONTENT-ID is xml encoded.  For example, a ":" is a %3A on the wire.	The JAXBAttachmentUnmarshaller is responsible for decoding the content id.  Dan has provided a small fix that correct the problem.		A second patch corrects a minor oversight in the Axiom Attachments code.  Dan discovered this problem while debugging the first issue.		I will commit the patches once I complete testing.
190||DependencyManager.initServiceClass is the method that calls init and all it does with exceptions thrown from init, is logging them. 		I think it should be possible for developers to manage them if there is any initialization problem that could affect service operation as it's my case. I need to start an element and if there is any error on initialization, the service won't realize about that and It will work incorrectly.
191||I'm using an applet as axis2 client. To be more specific it is an unsigned applet, so System.getProperty(..) throws a SecurityException.	Currently the implementation of LoggingControl doesn't care for this (admittedly rarely used) situation.	Possible fix:	public class LoggingControl {	    public static final boolean debugLoggingAllowed;	    static{	    	String prop=null;	    	try{	    		prop=System.getProperty("Axis2.prohibitDebugLogging");	    	}catch(SecurityException lSE){	    		//do nothing	    	}	    	debugLoggingAllowed= prop==null;	    }		}
192||I wrote a main class like this:	import javax.xml.ws.Endpoint;	import org.apache.axis2.jaxws.calculator.CalculatorService;	public class StandaloneServiceStartupUsingEndpointPublish	{	  public static void main( String[] args )	  {	    System.out.println("Starting Server...");	    Endpoint ep = Endpoint.create( new CalculatorService() );	    ep.publish( "http://localhost:9090/CalculatorService"	);	  }	}		Problems:	1. Even though I have specified port 9090, the transport is started on 8080.	2. Trying to get wsdl using http://localhost:9090/CalculatorService?wsdl in browser results this error:		<Exception>	 org.apache.axis2.AxisFault: The service cannot be found for the endpoint reference (EPR) /services/	 at org.apache.axis2.engine.DispatchPhase.checkPostConditions(DispatchPhase.java:63)	 at org.apache.axis2.engine.Phase.invoke(Phase.java:308)	 at org.apache.axis2.engine.AxisEngine.invoke(AxisEngine.java:212)	 at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:132)	 at org.apache.axis2.transport.http.util.RESTUtil.invokeAxisEngine(RESTUtil.java:125)	 at org.apache.axis2.transport.http.util.RESTUtil.processURLRequest(RESTUtil.java:119)	 at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:229)	 at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:256)	 at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:163)	 at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:85)	 at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:665)	 at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:690)	 at java.lang.Thread.run(Thread.java:595)	</Exception>		I think the problem is bcoz of this code in EndpointImpl class:		    public void publish(String s) {	        ConfigurationContext ctx = endpointDesc.getServiceDescription().getAxisConfigContext();	        try {	            // For some reason the AxisService has not been added to the ConfigurationContext	            // at this point, so we need to do it for the service to be available.	            AxisService svc = endpointDesc.getAxisService();	            ctx.getAxisConfiguration().addService(svc);	        } catch (AxisFault e) {	            throw ExceptionFactory.makeWebServiceException(e);	        }	        // Remove the default "axis2" context root.	        ctx.setContextRoot("/");	        WorkerFactory wf = new HTTPWorkerFactory();	        try {	            server = new SimpleHttpServer(ctx, wf, 8080);  //TODO: Add a configurable port	            server.init();	            server.start();	        } catch (IOException e) {	            throw ExceptionFactory.makeWebServiceException(e);	        }	        published = true;	    }
193||XML Schema data types have valid values for eg. Name cannot contain spaces. If I did the following		Name name = new Name("test name");		It throws an error as 		org.apache.axis2.AxisFault: data=[test name]		I had a look at the code and seems like all messages (supposed to be taken from some message bundle) are commented out producing error messages which are not self explanatory. If this error was sent to the client side they wouldn't know what happened.
194||XMLUtils provides a toOM(Element), toOM(InputStream) and toOM(Reader) utilities.		These utilities create an OMElement that is sourced by the input parameter.		Problem Description:	The current code does not build() the entire OMElement.  Instead the caller must build() the element and be responsible for closing the builder/parser.	These utilities are currently only used for reading deployment files (they are not used for actual message processing).	In several cases, the calling code does not close the builder/parser, this results in open parsers and memory footprint problems.		Problem Solution:	I am changing each of these methods to build() the OMElement and close the parser.	In addition, I adding 3 new methods toOM(Element, boolean buildAll), toOM(InputStream, boolean buildAll) and toOM(Reader, buildAll).	These new methods give the calling code the ability to build or not build the OMElement.		This solution is a joint contribution between Mike Rheinheimer and Rich Scheuerle.
195||Hi,		This patch provides support for wrapper style mapping of Java method parameters to the  Jaxws 2.0 support for WSDL2Java. This patch also contains some improvements to the other parts as well.		Thanks	Sameera
196||Running "Validate" from the web console fails if the system property "nonProxyHosts" contains/startsWith a wildcard ("*").		java.util.regex.PatternSyntaxException: Dangling meta character '*' near index 0		This is, however, perfectly legal, see http://java.sun.com/j2se/1.4.2/docs/guide/net/properties.html
197||Roy Wood supplied a patch to me for additional JSR-181 annotation checking.		I will attach the patch and commit it after testing.
198||Summary: 		When the MessageContext is persisted, it writes out its message (soapenvelope).	Unfortunately, if there are attachments associated with the message, these are always	inlined in the xml of the message.  The code must be changed to respect the optimize settings.		In addition, the current code buffers the Message multiple times.  	This is a performance and footprint concern.		---------------------	Solution Details:		1) Message Serialization is logically different than the rest of the Message Context	Serialization.  I wrote a new class, MessageExternalizeUtils, to separate the logic.		2) The new MessageExternalizeUtils class uses the same logic as the transport layer to read	and write the message (for example it uses the transport MessageFormatter to write the message).  This 	corrects the attachment inlining problem.		3) MessageExternalizeUtils does not build a buffer containing the entire message.  Instead,	the message is written/read in chunks.  This will improve performance and	footprint for large messages.		4) The externalization format syntax is clearly defined in the MessageExternalizeUtils class.  I have	added debug trace and javadocs.		I am testing my fix now.  I will contribute it soon	Thanks,	Rich
199||The ProviderDispatcher in JAX-WS does not allow for non-parameterized interfaces on a provider based implementation. This causes a ClassCastException in the getProviderType method as the code assumes that the result of calling getGenericInterfaces on the implementation Class object will result in an array of ParameterizedTypes. If an object is not in the array is not an instance of a ParameterizedType then an exception is thrown. This check should only be done if the interface in question is the javax.xml.ws.Provider interface. Web service provider implementations should be free to implement other, non-parameterized interfaces.
200||Added a null check to a method in org.apache.axis2.engine.Handler.java to prevent client apps from getting a NPE	if the engine fails to successfully handle a given message.
201||Trying to push Mike Rheinheimer's fix, with few modifications, to the apache community source.		The webcontainer tries to clean up its threads as fast as possible, which can mean that once it "drops off" the async response, and the JAXWS layer takes its time processing that response, the inputstream object under it can get nulled out, resulting in an NPE in the parser.		AsyncResponse now processes the response right away in onComplete() or onError() rather than waiting until a poll comes through to call get()
202||In package org.apache.axis2.transport.http.HttpConstants the constant declaration:		public static final String MUTTITHREAD_HTTP_CONNECTION_MANAGER = "MUTTITHREAD_HTTP_CONNECTION_MANAGER";		seems to be a reference to the multithread connection manager in HttpClient , but unusually spelt.
203||I encountered a NullPointerException when trying to run WSDL2Java on a WSDL2 file that uses the HTTP binding.  The cause of the exception is in WSDL20ToAxisServiceBuilder.processEndpoint where it's trying to use SOAP endpoint extensions regardless of which binding is in use.  It should first check to see which binding is being used and then use binding-specific code to deal with the endpoint extensions.
204||WSDL generated by the plugin has schemaTargetNameSpace with a "/xsd" suffix. Axis2 expects the schemaTargetNameSpace  without that suffix. (i.e. the ?wsld doesn't have the suffix.)
205||My WSDL imports a schema from an absolute URL.  That schema imports other external public schemas from absolute URLs.  Those schemas, in turn, import schemas from relative URLs.		WSDL2Java works fine.		However at load time, the tomcat log reports:		[INFO] AARBasedWSDLLocator: Unable to resolve http://schemas.opengis.net/gml/3.1.1/base/geometryAggregates.xsd	[INFO] Trouble processing wsdl file :WSDLException (at /wsdl:definitions/wsdl:types/schema/xs:schema/xsd:schema): faultCode=OTHER_ERROR: Unable to locate with a locator the schema referenced at '../../gml/3.1.1/base/geometryAggregates.xsd' relative to document base 'http://schemas.opengis.net/filter/1.1.0/filter.xsd'		Furthermore, even with useOriginalwsdl set to true in services.xml, trying to get the service wsdl returns:	 <error>	       <description>Unable to generate WSDL 1.1 for this service</description>		<reason>	If you wish Axis2 to automatically generate the WSDL 1.1, then please +set useOriginalwsdl as false in your services.xml	        </reason>	</error>
206||It should read getSchemaTargetNamespace and setSchemaTargetNamespacePrefix respectively.			getSchematargetNamespace()  but setSchemaTargetNamespace(String)	getSchemaTargetNamespacePrefix() but setSchematargetNamespacePrefix(String)		Additionally setNameSpacesMap(NamespaceMap) should also be deprecated.
207||It should read setLastUpdate.
208||Axis2 1.3 is unable to generate a client stub for a simple echo service that's WSDL is has been spread over several files. To reproduce save the following WSDL files in a directory structure like this:		main.wsdl	bindings/WebserTestBasicAuth_document.wsdl	porttypes/WebserTestBasicAuth_WebserviceTestVi_document.wsdl		---x--- contents of main.wsdl ---x---	<?xml version="1.0" encoding="utf-8"?>		<!--            Generated by WSDLDefinitionsParser    --><wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" name="WebserviceTestWsd" targetNamespace="urn:WebserviceTestWsd" xmlns:bns0="urn:WebserviceTestWsd/WebserTestBasicAuth/document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">	  <wsdl:import location="./bindings/WebserTestBasicAuth_document.wsdl" namespace="urn:WebserviceTestWsd/WebserTestBasicAuth/document"/>	  <wsdl:service name="WebserviceTest">	    <wsdl:port name="WebserTestBasicAuthPort_Document" binding="bns0:WebserTestBasicAuthBinding">	      <soap:address location="http://mp5db.metrogroup-networking.com:50500/WebserviceTest/WebserTestBasicAuth?style=document"/>	    </wsdl:port>	  </wsdl:service>	</wsdl:definitions>	---x--- contents of bindings/WebserTestBasicAuth_document.wsdl ---x---	<?xml version="1.0" encoding="utf-8"?>		<!--            Generated by WSDLDefinitionsParser    --><wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" targetNamespace="urn:WebserviceTestWsd/WebserTestBasicAuth/document" xmlns:prt0="urn:WebserviceTestWsd/WebserviceTestVi/document" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">	  <wsdl:import location="../porttypes/WebserTestBasicAuth_WebserviceTestVi_document.wsdl" namespace="urn:WebserviceTestWsd/WebserviceTestVi/document"/>	  <wsdl:binding name="WebserTestBasicAuthBinding" type="prt0:WebserviceTestVi_Document">	    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>	    <wsdl:operation name="getEcho">	      <soap:operation soapAction=""/>	      <wsdl:input>	        <soap:body use="literal" parts="parameters"/>	      </wsdl:input>	      <wsdl:output>	        <soap:body use="literal"/>	      </wsdl:output>	    </wsdl:operation>	  </wsdl:binding>	</wsdl:definitions>	---x--- contents of porttypes/WebserTestBasicAuth_WebserviceTestVi_document.wsdl ---x---	<?xml version="1.0" encoding="utf-8"?>		<!--            Generated by WSDLDefinitionsParser    --><wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns0="urn:WebserviceTestVi" targetNamespace="urn:WebserviceTestWsd/WebserviceTestVi/document" xmlns:tns="urn:WebserviceTestWsd/WebserviceTestVi/document">	  <wsdl:types>	    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:WebserviceTestVi" xmlns:tns="urn:WebserviceTestVi" elementFormDefault="qualified">	      <xs:element name="getEcho">	        <xs:complexType>	          <xs:sequence>	            <xs:element name="request" type="xs:string" nillable="true"/>	          </xs:sequence>	        </xs:complexType>	      </xs:element>	      <xs:element name="getEchoResponse">	        <xs:complexType>	          <xs:sequence>	            <xs:element name="Response" type="xs:string" nillable="true"/>	          </xs:sequence>	        </xs:complexType>	      </xs:element>	    </xs:schema>	  </wsdl:types>	  <wsdl:message name="getEchoIn_doc">	    <wsdl:part name="parameters" element="ns0:getEcho"/>	  </wsdl:message>	  <wsdl:message name="getEchoOut_doc">	    <wsdl:part name="parameters" element="ns0:getEchoResponse"/>	  </wsdl:message>	  <wsdl:portType name="WebserviceTestVi_Document">	    <wsdl:operation name="getEcho">	      <wsdl:input message="tns:getEchoIn_doc"/>	      <wsdl:output message="tns:getEchoOut_doc"/>	    </wsdl:operation>	  </wsdl:portType>	</wsdl:definitions>	---x------x---		Axis-1 accepts theses files and I was able to generate an axis-2 client stub after I merged the WSDL's manually into one file. It looks like axis-2 has a problem with wsdl:import. Replacing the relative pathes with absolute pathes and hosting the WSDL on a server doesn't help either.		The full stacktrace was:		Exception occurred while code generation for WSDL null	    java.lang.reflect.InvocationTargetException	    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)	    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)	    at java.lang.reflect.Method.invoke(Unknown Source)	    at org.eclipse.jst.ws.axis2.consumption.core.utils.WSDL2JavaGenerator.getAxisService(WSDL2JavaGenerator.java:379)	    at org.eclipse.jst.ws.axis2.consumption.core.command.Axis2ClientCodegenCommand.execute(Axis2ClientCodegenCommand.java:89)	    at org.eclipse.wst.command.internal.env.core.fragment.CommandFragmentEngine.runCommand(CommandFragmentEngine.java:418)	    at org.eclipse.wst.command.internal.env.core.fragment.CommandFragmentEngine.visitTop(CommandFragmentEngine.java:358)	    at org.eclipse.wst.command.internal.env.core.fragment.CommandFragmentEngine.moveForwardToNextStop(CommandFragmentEngine.java:253)	    at org.eclipse.wst.command.internal.env.ui.widgets.SimpleCommandEngineManager$5.run(SimpleCommandEngineManager.java:252)	    at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:369)	    at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:313)	    at org.eclipse.jface.wizard.WizardDialog.run(WizardDialog.java:934)	    at org.eclipse.wst.command.internal.env.ui.widgets.SimpleCommandEngineManager.runForwardToNextStop(SimpleCommandEngineManager.java:222)	    at org.eclipse.wst.command.internal.env.ui.widgets.WizardPageManager.runForwardToNextStop(WizardPageManager.java:96)	    at org.eclipse.wst.command.internal.env.ui.widgets.WizardPageManager.performFinish(WizardPageManager.java:255)	    at org.eclipse.wst.command.internal.env.ui.widgets.DynamicWizard.performFinish(DynamicWizard.java:380)	    at org.eclipse.jface.wizard.WizardDialog.finishPressed(WizardDialog.java:742)	    at org.eclipse.jface.wizard.WizardDialog.buttonPressed(WizardDialog.java:373)	    at org.eclipse.jface.dialogs.Dialog$2.widgetSelected(Dialog.java:616)	    at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:227)	    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)	    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:938)	    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3682)	    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3293)	    at org.eclipse.jface.window.Window.runEventLoop(Window.java:820)	    at org.eclipse.jface.window.Window.open(Window.java:796)	    at org.eclipse.wst.command.internal.env.ui.widgets.popup.DynamicPopupWizard.run(DynamicPopupWizard.java:130)	    at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:256)	    at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:545)	    at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:490)	    at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:402)	    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)	    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:938)	    at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3682)	    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3293)	    at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2389)	    at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2353)	    at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2219)	    at org.eclipse.ui.internal.Workbench$4.run(Workbench.java:466)	    at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:289)	    at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:461)	    at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)	    at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:106)	    at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:153)	    at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)	    at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)	    at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)	    at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)	    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)	    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)	    at java.lang.reflect.Method.invoke(Unknown Source)	    at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:504)	    at org.eclipse.equinox.launcher.Main.basicRun(Main.java:443)	    at org.eclipse.equinox.launcher.Main.run(Main.java:1169)	    Caused by: org.apache.axis2.AxisFault: There is no port type associated with the binding	    at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateService(WSDL11ToAxisServiceBuilder.java:250)	    ... 56 more
209||We can add the following properties when the WSDL is conformant to rpc style. 	style="...rpc" missing.	@wrpc:style missing.
210||Currently documentation in the WSDL is always assumed to be a string. There may be occasions where its in fact XML. When documentation is XML in the WSDL its serialized escaping the invalid characters. It would be nicer if the XML was displayed as XML it self.
211||This problem only affects scenarios that persist the Operation Context (i.e. WS-RM).		After a externalized OperationContext is read, it is activated.  Activation associates the OperationContext with the current runtime contexts (ConfigurationContext).		If the MEP of the OperationContext is inbound, the OperationContext is added to the ConfigurationContext and never removed.		The solution is to only re-register the OperationContext if it is outbound.  In these cases, the OperationContexts are cleaned up when a response is received.		A simple solution is provided by Bill Nagy.  The OperationContext.activate(...) code is changed to only register the OperationContext if it is an "out" MEP.		// We only want to (re)register this if it's an outbound message	            String mepString = getAxisOperation().getMessageExchangePattern();	            if (mepString.equals(WSDL20_2006Constants.MEP_URI_OUT_ONLY)	                || mepString.equals(WSDL20_2004_Constants.MEP_URI_OUT_ONLY)	                || ((mepString.equals(WSDL20_2006Constants.MEP_URI_OUT_IN)	                    || mepString.equals(WSDL20_2004_Constants.MEP_URI_OUT_IN))	                    && !isComplete)) {		                // make sure this OperationContext object is registered in the 	                // list maintained by the ConfigurationContext object	                boolean registrationSuceeded = activeCC.registerOperationContext(key, this, true);	                if (!registrationSuceeded) {	                    // trace point	                    log.trace(logCorrelationIDString + ":activate():  OperationContext key [" + key	                              + "] already exists in ConfigurationContext map.  This OperationContext ["	                              + this.toString() + "] was not added to the table.");	                }	            }			I will commit this fix after running some more tests.
212||MessageContextBuilder gets the prefix and uri off of the AxisFault's faultCode and builds a SOAPFault faultcode.	The current ordering of the statements can lead to duplicate declarations of the soapenv prefix.		Bill Nagy has supplied the correct ordering:		                       String prefix = faultCodeQName.getPrefix();	                        String uri = faultCodeQName.getNamespaceURI();	                        // Get the specified prefix and uri	                        prefix = prefix == null ? "" : prefix;	                        uri = uri == null || "" .equals(uri) ?	                                fault.getNamespace().getNamespaceURI() : uri;	                        // Make sure the prefix and uri are declared on the fault, and 	                        // get the resulting prefix.	                        prefix = fault.declareNamespace(uri, prefix).getPrefix();	                        soapFaultCode = prefix + ":" + faultCodeQName.getLocalPart();		I will commit this simple fix after running tests.		Thanks,	Scheu
213||Problem: 	The code that iterates over the property keys in the JAXWS PropertyMigrator can result in a concurrent modification exception.		Solution:	Dustin Amrhein provided a simple solution to avoid the property key iterator.		The new code is:		public void migratePropertiesToMessageContext(Map<String, Object> userContext,	                                                  MessageContext messageContext) {		        // Avoid using putAll as this causes copies of the propery set	        if (userContext != null) {	            // should not use iterator here because this map may be modified	            // on different threads by the user or other JAX-WS code	            String[] keys = new String[userContext.keySet().size()];	            keys = userContext.keySet().toArray(keys);	            for(int i=0; i < keys.length; i++) {	                String key = keys[i];	                Object value = userContext.get(key);	                // Make sure mtom state in the user context, the message context, 	                // the MEP context are the same.	                if(key.equalsIgnoreCase(Constants.Configuration.ENABLE_MTOM)){	                    value = messageContext.getMessage().isMTOMEnabled();	                    messageContext.getMEPContext().put(key, value);	                }	                messageContext.setProperty(key, value);	            }	        }	    }		I will commit this change after I complete testing.
214||Error Description: 	When a SOAP message with an empty body is sent to a JAX-WS	service, the following NullPointerException occurs			[15.08.07 09:01:47:743 CEST] 00000021 ExceptionFact 1	org.apache.axis2.jaxws.ExceptionFactory	createWebServiceException Create Exception:		javax.xml.ws.WebServiceException: java.lang.NullPointerException	at	org.apache.axis2.jaxws.ExceptionFactory.createWebServiceExceptio	n(ExceptionFactory.java:180)	at	org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(	ExceptionFactory.java:79)
215||Axis2 Kernel changes are needed in order to fix RM in order processing. The Axis2Servlet is closing the 	stream too early in some situations. When InvocationResponse.SUSPEND is returned from submitting 	an HTTP request, the servlet should delegate closing the stream to the handler that issued the SUSPEND. 	This will allow handlers such as RM to handle closing the OutputStream at the appropriate time.
216||MessageContext Persistence Performance Improvement	---------------------------------------------------------------------------------		Background: 	-----------------	When a MessageContext is persisted (for reliable messaging), the MessageContext object and associated	objects are written out to the ObjectOutput.  When a MessageContext is hydrated it is read from an 	InputObject.  The utility class, ObjectStateUtils, provides static utility functions to provide safety	mechanisms to write and read the data.		Problem:	--------------	The IBM performance team has profiled this code.  They found that the writing and reading of these objects is time 	consuming.  Some of the performance penalties are due to the use of static methods (thus hindering the ability to reuse	byte buffers).  Other penalties are due to the way that we determine if an object can be "safely written".	This JIRA issue addresses a number of these concerns.		Scope of Changes (Important):	-------------------------------------------	These changes only amend the existing writeExternal and readExternal support.  There is no impact on any code that 	does not use these methods.  No additional logic api's are added or changed. 			Specific Concerns and Solutions:	----------------------------------------------	  A) The original logic writes objects into a buffer.  If a serialization error occurs, the algorithm safely 	     accommodates the error.  The downside is that it is very expensive to write each object to a temporary buffer.		     Solution:	     A new marker interface, SafeSerializable, is introduced.  If an object (i.e. MessageContext) has this marker	     interface or is a lang wrapper object (i.e. String) then the object is written directly to the ObjectOutput.	     Eliminating the extra buffer write increases throughput.	     A similar change is made to the read algorithm.  The new algorithm detects whether the object was written directly	     or whether it was written as a byte buffer.  In the case where it is written directly, no extra buffering is needed	     when reading.		  B) If a buffer is needed to write or read an object, the ObjectStateUtils class creates a new buffer.  This 	     excessive allocation of buffers and subsequent garbage collection can hinder performance.		     Solution:	     The code is re-factored to use two new classes: SafeObjectOutputStream and SafeObjectInputStream.  These classes	     wrap the ObjectOutput and ObjectInput objects and provide similar logic as ObjectStateUtils.	     The key difference is that these are not static utility classes.  Therefore any buffers used during writing or reading can	     are reused for the life of the *Stream object.  In one series of tests, this reduced the number of buffers from 40 to 2 for 	     persisting a MessageContext.		  C) When an outbound MessageContext is persisted, its associated inbound MessageContext (if present) is also persisted.	     The problem is that the inbound MessageContext may have a large message.  Writing out this message can impact performance	     and in some cases causes logic errors.		     Solution:	     Any code that hydrates an outbound MessageContext should never need the message (soapenvelope) associated with the 	     inbound MessageContext.  The solution is to not persist the inbound message.		  D) In the current code, "marker" strings are persisted along with the data.  These marker strings may contain a lengthy 	     correlation id.   This extra information can impact performance and file size.		     Solution:	     I reduced the number of "marker" strings.  The remaining marker strings are changed to the "common name" of the object	     being persisted.  In most cases, the log correlation id is no longer present in the marker string.  In addition, I made	     changes to only create a log correlation id "on demand".  The log correlation code uses the (synchronized) UUIDGenerator.  	     Creating the log correlation id "on demand" limits unnecessary locking.		  E) Miscellaneous.  I spent time fine tuning the algorithmic logic in SafeObjectInputStream and SafeObjectOutputStream	     to eliminate extra buffers (i.e. ByteArrayOutputStream optimizations).  These are all localized changes.		Other Non-performance Related Changes	------------------------------------------------------------		  i) The externalize related code is refactored so that all lives in the new org.apache.axis2.context.externalize package.		  ii) The ObjectStateUtils class is retained for legacy reasons.  I didn't want to remove any api's.  The implementation 	      of ObjectStatUtils is changed to delegate to the new classes.		  iii) New tests are added.		  iv) I added classes DebugOutputObjectStream and DebugObjectInputStream.  	      These classes are installed when log.isDebugEnabled() is true.  	      The classes log all method calls to and from the underlying ObjectOutput and ObjectInput; thus they are helpful 	      in debugging errors.		  v) Andy Gatford has provided code that uses the context classloader when reading persisted data.		  vi) The high level logic used to write and read the objects is generally the same.  The implementation of the algorithms is changed/improved.	     In some cases, this required changes to the format of the persisted data.  An example is that each object is preceded by	     a boolean that indicates whether the object was written directly or written into a byte buffer.  I increased the revision id because	     I changed the format.				Kudos	---------	Much thanks to the following people who contributed to this work, helped with brainstorming, helped with testing or provided performance profiles:	Ann Robinson, Andy Gatford, Dan Zhong, Doug Larson, and Richard Slade.		Next Steps	---------------	I am attaching the patch to this JIRA.  I will be committing the patch in the next day or two.  Please let me know if you have any questions or concerns.		Thanks	Rich Scheuerle
217||When I use SMTP transport as the server side . It will never send the fault to the client , the problem happen due to following code segment in the MailWorker			public void run() {	        AxisEngine engine = new AxisEngine(configContext);	        // create and initialize a message context	        try {	            engine.receive(messageContext);	        } catch (Exception e) {	            try {	                if (messageContext != null&&!messageContext.isServerSide()) {	                    MessageContext faultContext =	                            MessageContextBuilder.createFaultMessageContext(messageContext, e);	                    engine.sendFault(faultContext);	                }	            } catch (Exception e1) {	                // Ignore errors that would possibly happen this catch	            }	        }		    }		And the funny thing is no matter what the side , when we start SimpleMailListern then the messageContext.isServerSide() is always true.		However when we start SimpleMaillListern in the client side and when it find a fault then it should not send the fault back to the server. So to maintain that , we need to have a parameter in the axis2.xml and MailWorker has to look for that. So if the value if server then it will send the response else it wont.
218||Problem, solution, and patch provided by Nicholas Gallardo.		PROBLEM:		In Asynchronous 2-way scenario, the client sends a request, the server responds with a HTTP 202 in this HTTP connection, process to do it's work and send response back through a callback via a different HTTP connection asynchronously.		When the client that sends the first request (that gets the 202 response in async processing) tried to re-use the socket while the server is still doing work in the background on that socket, the http persist read for the next request doesn't start until the server finishes it's work. The problem here is after the server sends a HTTP 202 back and the background work process is not done, that particular HTTP connection gets stashed up, i.e. can't perform the persist read until either the client is timed out (5 minutes currently) or the server work process is complete.  We first saw this when they made the app sleep one minute to draw out the background work and it was immediately noticeable.		SOLUTION:		Switch threads on client dispatching.  This patch provides that functionality.
219||Allow the RequestResponseTransport to be used to check whether or not a response should been written or acked, so that RM can notify the transport that an actual response has been written, and the transport can send back the correct status code.		The patch is from Bill Nagy.
220||org.apache.axis2.transport.TransportUtils.createDocumentElement aggressively pushes REST processing by performing the following checks.  This is breaking regular text/xml SOAP processing in some environments.  See code:		            // Some services send REST responces as text/xml. We should convert it to	            // application/xml if its a REST response, if not it will try to use the SOAPMessageBuilder.	            if (HTTPConstants.MEDIA_TYPE_TEXT_XML.equals(type)) {	                if (msgContext.isServerSide()) {	                    if (msgContext.getSoapAction() == null) {	                        type = HTTPConstants.MEDIA_TYPE_APPLICATION_XML;	                    }	                } else if (msgContext.isDoingREST() &&	                        !msgContext.isPropertyTrue(Constants.Configuration.SOAP_RESPONSE_MEP)) {	                    type = HTTPConstants.MEDIA_TYPE_APPLICATION_XML;	                }	            }	            Builder builder = BuilderUtil.getBuilderFromSelector(type, msgContext);		The failure case is the case where the client makes an async request.  In this case the reply message has content type "text/xml", isServerSide() passes due to the async client listening on a reply port (that's just the way it works...), and there is no soapAction.  All of the checks pass in the async case, changing the content type to application/xml, therefore picking the wrong builder (ApplicationXMLBuilder rather than SOAP11Builder).		Proposed fix:		I propose we add a configuration option such as BuilderForTextXML or similarly named, and move the above code to another TransportUtils method, such as:		Builder getBuilderForTextXML(String contentType) {	    if (msgContext.isPropertyTrue(Constants.Configuration.TEXTXML_IS_SOAP11)) {	        return BuilderUtil.getBuilderFromSelector(HTTPConstants.MEDIA_TYPE_TEXT_XML, msgContext);	    } else {	            // Some services send REST responces as text/xml. We should convert it to	            // application/xml if its a REST response, if not it will try to use the SOAPMessageBuilder.	            if (HTTPConstants.MEDIA_TYPE_TEXT_XML.equals(type)) {	                if (msgContext.isServerSide()) {	                    if (msgContext.getSoapAction() == null) {	                        type = HTTPConstants.MEDIA_TYPE_APPLICATION_XML;	                    }	                } else if (msgContext.isDoingREST() &&	                        !msgContext.isPropertyTrue(Constants.Configuration.SOAP_RESPONSE_MEP)) {	                    type = HTTPConstants.MEDIA_TYPE_APPLICATION_XML;	                }	            }	            return BuilderUtil.getBuilderFromSelector(type, msgContext);	    }	}
221||Currently the metadata processing for JAXWS (i.e. the creation of the metadata description hierachy based on annotations and WSDL) is not integrated into the Axis2 deployment model.  The JAXWS unit tests are using a deprecated factory method which builds the desription hierarchy when an inbound request for a service is received.  The deprecated method DescriptionFactory.createServiceDescriptionFromServiceImpl(implClass, axisSvc) is called from EndpointController.getEndpointDescription.  This deprecated method causes obsolete code paths to be executed and does not go down code paths that are used for actual server integration.		Actual server integration (for example in Geronimo) plugs the JAXWS metadata processing into the server's deployment logic.  This is done by creating DescriptionBuilderComposite objects and using those DBCs to create the JAXWS/Metadata description hierarchy.  The processes of creating the JAXWS descrition hierachy also creates the Axis2 description hierachy (e.g. AxisService and such) based on annotations (and/or WSDL).		I think the following needs to be done:	1. Add a plug point in the Axis2 deployment logic that allows plugging in to the deployment logic, or perhaps overridding it completely	2. In the JAXWS integration-level tests (which require a running server), the plugpoint or override would create the JAXWS and associated Axis2 description hierachy  during application deployment.  	3. The logic in EndpointController.getEndpointDescription should change to consider not finding the JAXWS description hierachy an error and reject the inbound request.  The deprecated method DescriptionFactory.createServiceDescriptionFromServiceImpl(implClass, axisSvc)  should be removed.	4. Note that there is a convenience method DescriptionFactory.createServiceDescription(Class) that will take an implementation class and create the DBCs using relfection which may be helpful.
222||Mike Rheinheimer and I are contributing 2 performance changes.  Both are related to the 	application property migrator code.		Problem:	The code that migrates properties to and from the MEPContext is too slow.		Solution:	The solution is twofold.  		First, there are synchronized locks in ApplicationMigratorUtils that are span too much code.  This will be recoded.		Second, the code in MEPContext that gets the application scoped properties is using too many temporary maps.	Instead the code should iterator over the Map$Entry objects.
223||I suspect that lines 439-513 of java/modules/codegen/src/org/apache/axis2/wsdl/template/java/InterfaceImplementationTemplate.xsl has a bug.  This bug results in generated stubs not cleaning up their connections properly.		The following line (491) is only called on a successful request:	_messageContext.getTransportOut().getSender().cleanup(_messageContext);		If an AxisFault is thrown, then the message context is not cleaned up and the connection is not closed properly.		I propose the following fix:	- Remove line 491	- Insert the following before line 439 (i.e. before "_operationClient.execute(true);")		      try {		- Insert the following before line 514:		      }finally{	          _messageContext.getTransportOut().getSender().cleanup(_messageContext);	      }		This will force that cleanup be called on the message context after every execution of the operation.  I realize that Axis2 1.3 has added Options.setCallTransportCleanup() method and a ServiceClient.cleanupTransport() method for this (which is good), but this fix might hit one of the root causes of stale connections being left open.		I'll attach my version of the modified xsl file (used Axis2 1.3 source release as starting point).  Verified that the problem still exists in trunk.
224||Some legacy apps are still calling AxisConfiguration.isEngaged(QName).  This method needs to remain (as deprecated) for a few Axis2 releases.  Will add code block to AxisConfiguration		    /**	     * This method needs to remain for a few Axis2 releases to support	     * legacy apps still using it.	     * 	     * @param qname	     * @deprecated Use {@link #isEngaged(String)}	     */	    public boolean isEngaged(QName qname) {	        return isEngaged(qname.getLocalPart());	    }
225||Recent changes to the JavaDispatcher processing cause the JavaProvider to lose information about its EndpointDescriptionImpl		I am testing a patch that removes many of the instance objects (including EndpoingDescriptionImpl) from the JavaProvider.  These	objects will be reestablished when necessary.		I am also more trace information.
226||Added some trace  statements to jaxws message util class to get a more meaningful trace information during problem determination.
227||There has been a number of improvements and bug fixes Axis2 'simple' and NIO HTTP transports should pick up [1]. I am attaching a patch that upgrades Axis2 to the latest HttpCore API.		All test cases pass for me.		Oleg		[1] http://www.apache.org/dist/jakarta/httpcomponents/httpcore/RELEASE_NOTES.txt
228||When Content-Type header is missing in the web service request a NullPointerException is thrown when the debug logging is enabled, preventing further processing.		http://www.nabble.com/Calling-Axis2-services-from-GWT-tf4581015.html
229||When deploying an embedded type service (war containing services.xml in WEB-INF, services.xml containing service group), the deployment fails with the following stacktrace:		java.lang.IllegalArgumentException: Filename must not be null	        at org.apache.axis2.deployment.repository.util.DeploymentFileData.<init>(DeploymentFileData.java:43)	        at org.apache.axis2.deployment.repository.util.DeploymentFileData.<init>(DeploymentFileData.java:48)	        at org.apache.axis2.deployment.DeploymentEngine.buildServiceGroup(DeploymentEngine.java:1015)	        at org.apache.axis2.deployment.WarBasedAxisConfigurator.loadServicesFromWebInf(WarBasedAxisConfigurator.java:309)	        at org.apache.axis2.deployment.WarBasedAxisConfigurator.loadServices(WarBasedAxisConfigurator.java:270)	        at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:78)	        at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:500)	        at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:420)	        at weblogic.servlet.internal.StubSecurityHelper$ServletInitAction.run(StubSecurityHelper.java:282)	        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)	        at weblogic.security.service.SecurityManager.runAs(Unknown Source)	        at weblogic.servlet.internal.StubSecurityHelper.createServlet(StubSecurityHelper.java:63)		The bug seems to stem directly from line 1015 in DeploymentEngine:	DeploymentFileData currentDeploymentFile = new DeploymentFileData(null, null);	 - directly passing the null file argument to the constructor of DeploymentFileData.		DeploymentFileData seems to have changed a lot since v. 1.2, under which this type of deployment worked. The bug was experienced after upgrade to 1.3.
230||I'm seeing Nullpointer exception during wsdl fetch.   My webservice is created using "useOriginalWSDL=true" option.	This happens only during concurrent access. It can be easily  reproduced by  creating a JMeter test for  http get with 5 thread. BTW I'm using Axis 1.2		 From google search the reason for this seems to be  		" This is because the WSDL handling system reuses javax.wsdl.Definition objects across threads, which are not thread safe, because they internally use DOM elements."		References		http://jira.jboss.com/jira/browse/JBWS-419;jsessionid=AA4270C1E4896751CF	2440D7C6696706	 http://www.mail-archive.com/j-dev@xerces.apache.org/msg01292.html			java.lang.NullPointerException	        at org.apache.xerces.dom.ParentNode.nodeListItem(Unknown Source)	        at org.apache.xerces.dom.ParentNode.item(Unknown Source)	        at com.ibm.wsdl.util.xml.DOM2Writer.print(Unknown Source)	        at com.ibm.wsdl.util.xml.DOM2Writer.print(Unknown Source)	        at com.ibm.wsdl.util.xml.DOM2Writer.serializeAsXML(Unknown	Source)	        at	com.ibm.wsdl.extensions.schema.SchemaSerializer.marshall(Unknown Source)	        at	com.ibm.wsdl.xml.WSDLWriterImpl.printExtensibilityElements(Unknown	Source)	        at com.ibm.wsdl.xml.WSDLWriterImpl.printTypes(Unknown Source)	        at com.ibm.wsdl.xml.WSDLWriterImpl.printDefinition(Unknown	Source)	        at com.ibm.wsdl.xml.WSDLWriterImpl.writeWSDL(Unknown Source)	        at com.ibm.wsdl.xml.WSDLWriterImpl.writeWSDL(Unknown Source)	        at	org.apache.axis2.description.AxisService.printWSDL(AxisService.java:848)	        at	org.apache.axis2.transport.http.ListingAgent.processListService(ListingA	gent.java:221)	        at	org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:225)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)	        at	weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(St	ubSecurityHelper.java:223)	        at	weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityH	elper.java:125)	        at	weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:2	83)	        at	weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:1	75)	        at	weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.r	un(WebAppServletContext.java:3245)	        at	weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSu	bject.java:321)	        at	weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121	)	        at	weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServ	letContext.java:2003)	        at	weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletCont	ext.java:1909)
231||At the moment, the wsa:MessageID on the response message is omitted as a	performance optimisation. It's not really possible to force	Axis2 to include it at the moment.
232||When I try to install axis v1.3 its throughing error while installing intergration module. Please have a look at the error pasted below.		Error:	=====		      [jar] Building jar: /etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/target/Repository/services/SOAP12TestServiceC.jar	   [delete] Deleting directory /etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test-resources/SOAP12Testing/SOAP12TestServiceC/build	[INFO] Executed tasks	[INFO] [resources:testResources]	[INFO] Using default encoding to copy filtered resources.	[INFO] [compiler:testCompile]	[INFO] Compiling 131 source files to /etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/target/test-classes	[INFO] ------------------------------------------------------------------------	[ERROR] BUILD FAILURE	[INFO] ------------------------------------------------------------------------	[INFO] Compilation failure		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[36,37] cannot find symbol	symbol  : class HttpMethodRetryHandler	location: package org.apache.commons.httpclient		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[38,37] cannot find symbol	symbol  : class NoHttpResponseException	location: package org.apache.commons.httpclient		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[39,45] cannot find symbol	symbol  : class InputStreamRequestEntity	location: package org.apache.commons.httpclient.methods		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[41,44] package org.apache.commons.httpclient.params does not exist		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/async/AsyncService2Test.java:[45,44] package org.apache.commons.httpclient.params does not exist		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[91,8] cannot find symbol	symbol  : class HttpMethodRetryHandler	location: class org.apache.axis2.mtom.EchoRawMTOMFaultReportTest		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[91,52] cannot find symbol	symbol  : class HttpMethodRetryHandler	location: class org.apache.axis2.mtom.EchoRawMTOMFaultReportTest		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[108,42] cannot find symbol	symbol  : variable HttpMethodParams	location: class org.apache.axis2.mtom.EchoRawMTOMFaultReportTest		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[108,16] cannot find symbol	symbol  : method getParams()	location: class org.apache.commons.httpclient.methods.PostMethod		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[110,38] cannot find symbol	symbol  : class InputStreamRequestEntity	location: class org.apache.axis2.mtom.EchoRawMTOMFaultReportTest		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/mtom/EchoRawMTOMFaultReportTest.java:[126,17] cannot find symbol	symbol  : class NoHttpResponseException	location: class org.apache.axis2.mtom.EchoRawMTOMFaultReportTest		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/async/AsyncService2Test.java:[102,8] cannot find symbol	symbol  : class HttpConnectionManagerParams	location: class org.apache.axis2.async.AsyncService2Test		/etrade/home/skrishn4/Desktop/axis/axis2-1.3/modules/integration/test/org/apache/axis2/async/AsyncService2Test.java:[102,66] cannot find symbol	symbol  : class HttpConnectionManagerParams	location: class org.apache.axis2.async.AsyncService2Test			[INFO] ------------------------------------------------------------------------	[INFO] For more information, run Maven with the -e switch	[INFO] ------------------------------------------------------------------------	[INFO] Total time: 2 minutes 34 seconds	[INFO] Finished at: Fri Oct 12 04:39:38 PDT 2007	[INFO] Final Memory: 18M/156M	[INFO] ------------------------------------------------------------------------
233||2007-10-11 09:51:47,944 [-] [I/O dispatcher 7] DEBUG ServerHandler HTTP connection [/127.0.0.1:59896]: Content decoder [chunk-coded; completed: true]	Exception in thread "HttpServerWorker-1" java.lang.NullPointerException	        at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:158)	        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)	        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:96)	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:145)	        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:275)	        at org.apache.synapse.transport.nhttp.ServerWorker.processPost(ServerWorker.java:211)	        at org.apache.synapse.transport.nhttp.ServerWorker.run(ServerWorker.java:175)	        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)	        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)	        at java.lang.Thread.run(Thread.java:595)	2007-10-11 09:52:47,890 [-] [I/O dispatcher 7] DEBUG ServerHandler HTTP connection [closed]: Closed
234||I have a SoapFault where the SoapFaultCode is soapenv:Client.	I am throwing an AxisFault by giving the SoapFault as argument	          throw new AxisFaul(soapFault)		But it return always a soapenv:Receiver (SOAP1.2) or a soapenv:Server (SOAP1.1).
235||The nullpointer happens in the following method if a cookie does not have any parameters:		    private String processCookieHeader(HeaderElement element) {	        String cookie = element.getName() + "=" + element.getValue();	        NameValuePair[] parameters =  element.getParameters();	        for (int j = 0; j < parameters.length; j++) {	            NameValuePair parameter = parameters[j];	            cookie = cookie + "; " + parameter.getName() + "=" + parameter.getValue();	        }	        return cookie;	    }
236||I'm upgrading my existing code based on axis 1.1 to the 1.3 version and I get a following problem: 		I used the ConfigurationContext#getOperationContextMap method to check if the map is empty or still has any registered operation contexts. I use that e.g. during the application shutdown to test, if some service calls are still running (e.g. if using non blocking calls). In 1.3 version the operationContextMap has only private access, so i can't check if it is empty or not.  So i would like to have something like isAnyOperationContextRegistered() method in the ConfigurationContext class. 		If there is another way to the information I need, please let me now.		regards
237||The values of 1 and 0 are not being mapped to the corresponding true and false boolean values for a pojo web service.  The problem is that in the SimpleTypeMapper class the value for the boolean is got from:		           Boolean.valueOf(value.getText())		This doesn't account for 1's or 0's and should be changed to 	:		            if(value.getText().equals("1"))		                return new Boolean(true);		              else if(value.getText().equals("0"))		                return new Boolean(false);		              else		                return Boolean.valueOf(value.getText());		Since a 1 should map to true and a 0 should map to false.  It needs to be changed for both java.lang.Boolean objects and simple booleans
238||XmlBeans renamed its Maven dependency to org.apache.xmlbeans with version 2.3.0	Update to 2.3.0 and update dependencies.
239||When demarshalling a fault response, the faultBeanDescriptor cannot be found in some cases. This occurs when there are more than one EndpointDescription for a ServiceDescription. The runtime description is never regenerated after the first endpoint...adding changes to set a dirty bit as well as changes to not throw the NPE
240||When you try to expose a POJO as a webservice, suppose you have two Java methods with the following signatures:		public Integer a(String, Integer)	public String b(Integer, String) 		Java2WSDL adds the minOccurs="0" for each element of each complex type, both for the input parameters and for the output parameters. 		When generating clients using .NET WebService Studio 2.0, the result is the following:	- all the generated C# methods input parameters are doubled, except for the string ones: the doubled parameters are booleans whose meaning is: "is the previous parameter specified or not?"	- all the generated C# methods return parameters are void, except for the string ones		The actual result are clients with methods like these:		public void a(string, int, bool);	public string b(int, bool, string);		This is obviously a problem, particularly for the "void" return type.		If I remove minOccurs="0", clients are generated correctly by .NET WebService Studio 2.0.		The issue is this: why does Java2WSDL always adds minOccurs="0"? If its meaning were "it can be null", I think nillable="true" attribute should be more appropriate... Moreover, if I substitute Integer with int in the original Java class methods, minOccurs="0" is still added by Java2WSDL, even if an int cannot be null.
241||Brent Ulbricht reported Java2Security violations within the metadata module related to the use	of Class.getAnnotation(Class).  To correct this problem, I am working on a patch to wrap these calls with doPriv code.		Thanks,	Rich
242||The problem seems to be about incorrect marshaling of arrays and lists. Looks like, for each element in the array is called the method toString(), then all of the array elements are separated by spaces and finally all the result is placed in a single xml element.		As I see, according to the schema in the WSDL, every element of the array needs to be in its own element. Then, calling toString() may work for a simple type, it is completely meaningless for a complex types, as it is usually the string representation of the object's handle.		I get the same result with or without response wrapper objects. I observe it for the return types, I have not tested it for arrays in the input paparameters.		Can I use some other databinding mechanism, in order to avoid this and how?		To demonstarate it, I have created a simple web service project. The service name is "GenericService" there are four methods, returning: array of string, array of a complex type, list of string and a list of a complex type.		The attached file return_messages.txt contains the messages: as they are observed and as they need to be for arrays. For lists, the messages are the same.		Te attached file jaxw-axis2.zip contains the sample geronimo/eclipse project, without the axis2 libraries.
243||I using org.apache.axiom.attachments.IncomingAttachmentStreams in my business-logic.	Tthe problem of java.lang.IllegalStateException is occurred with Axis2-13.		Here are the callstack, 		java.lang.IllegalStateException: The attachments stream can only be accessed once; either by using the IncomingAttachmentStreams class or by getting a collection of AttachmentPart objects. They cannot both be called within the life time of the same service request.		at org.apache.axiom.attachments.Attachments.getPart(Attachments.java:517)		at org.apache.axiom.attachments.Attachments.getNextPartDataHandler(Attachments.java:462)		at org.apache.axiom.attachments.Attachments.getContentIDSet(Attachments.java:427)		at org.apache.axiom.attachments.Attachments.getAllContentIDs(Attachments.java:420)		at org.apache.axis2.transport.TransportUtils.deleteAttachments(TransportUtils.java:481)		at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:189)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)		at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)		at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)		at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)		at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)		at java.lang.Thread.run(Thread.java:595)		I will send my fixed file for the problem. 		Please refer to fix.		thanks,
244||I am using Apache Axis 2 version 1.3 and JDK 1.5.0_13 		When I run wsdl2java, I encounter a NullPointerException in WSDL20ToAxisServiceBuilder.		The WSDL file is WSDL 2.0  (not WSDL 1.1).   I'll attach the WSDL file to this bug report.			wsdl2java -ss -wv 2.0 -p com.mycorp.foo -o src -uri .webservicesTmsServices.wsdl		Using AXIS2_HOME:   c:axis2-1.3	Using JAVA_HOME:    C:Progra~1Javajdk1.5.0_13	Exception in thread "main"	org.apache.axis2.wsdl.codegen.CodeGenerationException	: Error parsing WSDL	        at	org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerat	ionEngine.java:147)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24)	Caused by: org.apache.axis2.AxisFault	        at org.apache.axis2.AxisFault.makeFault(AxisFault.java:417)	        at	org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateServi	ce(WSDL20ToAxisServiceBuilder.java:236)	        at	org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerat	ionEngine.java:101)	        ... 2 more	Caused by: java.lang.NullPointerException	        at	org.apache.axis2.description.WSDL20ToAxisServiceBuilder.createAxisMes	sage(WSDL20ToAxisServiceBuilder.java:976)	        at	org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateOpera	tions(WSDL20ToAxisServiceBuilder.java:926)	        at	org.apache.axis2.description.WSDL20ToAxisServiceBuilder.processInterf	ace(WSDL20ToAxisServiceBuilder.java:849)	        at	org.apache.axis2.description.WSDL20ToAxisServiceBuilder.processServic	e(WSDL20ToAxisServiceBuilder.java:306)	        at	org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateServi	ce(WSDL20ToAxisServiceBuilder.java:233)	        ... 3 more
245||As of now, Axis2 WSDL2Java uses some weird convetion about "null".	I mean, when an element in a WSDL is marked as nillable="true" or minOccurs="0"/maxOccurs="1", the generated Java code still uses primitives types such as int, double, short, long, float, boolean.	Because of this, I personally experienced (and also read about here in JIRA), Axis2 uses the following questionable convention to handle null values:	int, short, long => Integer.MIN_VALUE, Short.MIN_VALUE, Long. MIN_VALUE	float, double => Float.NaN, Double.NaN	boolean => false		Actually, these values are NOT null.		I think Axis2 should map optional elements of type xsd:int, xsd:double, xsd:float, xsd:short, xsd:long, xsd:boolean to, respectively: Integer, Double, Float, Short, Long, Boolean and assign null to them when they are specified as nil or when they are not specified in the SOAP message.		If I understood it well, Axis1 did this, didn't it?		At least, I think Axis2 should give an option to enable this and, IMHO, I also think it should be on by default...
246||In FileWriter, the createOutFile() method will check if the output file exists and if yes, it won't do anything:		    public void createOutFile(String packageName, String fileName) throws Exception {	        outputFile = org.apache.axis2.util.FileWriter.createClassFile(outputFileLocation,	                                                packageName,	                                                fileName,	                                                getFileExtensionForLanguage(language));	        //set the existing flag	        if (this.isOverride) {	            this.stream = new FileOutputStream(outputFile);	        } else {	            fileExists = outputFile.exists();	            if (!fileExists) {	                this.stream = new FileOutputStream(outputFile);	            } else {	                log.info(Messages.getMessage("fileExistsNoOverwrite", outputFile.toString()));	            }	        }	    }		However, in the ServiceXMLWriter subclass, it no longer checks the isOverride option:		public class ServiceXMLWriter extends FileWriter {	    public void createOutFile(String packageName, String fileName) throws Exception {	        outputFile = org.apache.axis2.util.FileWriter.createClassFile(outputFileLocation,	                                                     packageName,	                                                     "services",	                                                     ".xml");	        //set the existing flag	        fileExists = outputFile.exists();	        if (!fileExists) {	            this.stream = new FileOutputStream(outputFile);	        }	    }	}		This prevents the -or option from working on the services.xml file.
247||Problem:	JAX-WS provides a javax.xml.ws.handler.soap.SOAPMessageContext to JAX-WS web service handlers.	The SOAPMessageContext.getHeaders(QName qname, JAXBContext jaxbcontext, boolean allRoles)  is supposed to return all of the 	specificed headers rendered as JAXB objects.  In addition, if the "allRoles" argument is false, only those headers which match the current node's role 	are returned.		The method is currently broken.  (1) It only returns one header even if there are multiple headers matching the criteria. (2) It does not do any role matching.		Solution:	I am testing a change to fix this issue.  The JAX-WS "Message model" is upgraded to do more advanced header processing.  I am also using the	Axiom RolePlayer interface to do the role matching.  This change only affects the JAX-WS functionality.		In addition, I am upgrading the addNumbersTest to verify these changes.		Future:	This change and the recent changes for OMDataSourcedExt are exposing the fragility of the JAX-WS "Message Model" (especially XMLSpineImpl).  	I am starting to work on a design to correct this fragility.  Once I have some solid ideas I will open a JIRA.
248||Problem:	David Strite, a member of the IBM performance analysis team, discovered that the synchronization of AbstractContext.addPropertDifference has a performance impact due to the high volume of callers of AbstractContext.getProperty and AbstractContext.setProperty.		Solution:	The synchronization is changed so that it is limited to the case where a ClusterManager is available.		private void addPropertyDifference(String key) {	        ConfigurationContext cc = getRootContext();	        if (cc == null) {	            return;	        }	        // Add the property differences only if Context replication is enabled,	        // and there are members in the cluster	        ClusterManager clusterManager = cc.getAxisConfiguration().getClusterManager();	        if (clusterManager == null ||	            clusterManager.getContextManager() == null) {	            return;	        }	        // Narrowed the synchronization so that we only wait	        // if a property difference is added.	        synchronized(this) {	            propertyDifferences.put(key, new PropertyDifference(key, false));	        }	    }		Long Term Solution:	We might want to consider using a ConcurrentHashMap (only available in JDK 5+) or narrow the synchronization for the other methods.
249||History:	The JAX-WS Dispatch(Source) implementation detects if StAXSource is available.  	StAXSource is not part of JDK 4.2 or JDK 5.0.	However, StAXSource wraps a XMLStreamReader, so it seemed to be a performant alternative to StreamSource.		Problem:	JAXB, the main consumer of a Source in JAX-WS scenarios, does not support StAXSource.	Other users have reported quality concerns with StAXSource.		Solution:	Quick change to the code to return the same Source (non-StAXSource) for all of the JDK versions.	This promotes consistency.		Kudos to Samuel Isokpunwu who collaborated with this solution.
250||The JAX-WS MessageContext uses the local map on the Axis2 MessageContext to store properties.	This code was written prior to the Axis2 MC property redesign, and should be improved.		For example the current getProperty code is:		public Object getProperty(String key) {	        if (DELEGATE_TO_AXISMC) {	            // only use properties that are local to the axis2 MC,	            // not the options bag.  See org.apache.axis2.context.AbstractContext	            Iterator names = axisMsgCtx.getPropertyNames();	            for (; names.hasNext();) {	                String name = (String)names.next();	                if (name.equals(key)) {	                    return axisMsgCtx.getProperty(key);	                }	            }	            return null;	        }	        return getProperties().get(key);	    }		The new code will be:		public Object getProperty(String key) {	        if (DELEGATE_TO_AXISMC) {	            // only use properties that are local to the axis2 MC,	            return axisMsgCtx.getLocalProperty(key);	        }	        return getProperties().get(key);	    }		Kudos to David Strite (IBM) for finding this improvement.
251||Steps to reproduce:	================	1. Create a service archive with including a WSDL which has schema import as follows.		<xsd:import namespace="http://charitha.org/" schemaLocation="http://localhost/repo/calculator.xsd"/>		As you can see above, the schema is hosted in a URL repo.		2. Set useOriginalWsdl=true in services.xml	3. Deploy the service	4. Try to generate client using ?wsdl of the deployed service		Following exception occurs.	Retrieving schema at 'calculatorService?xsd=http://localhost/repo/calculator.xsd', relative to 'http	://localhost:8080/axis2/services/'.	Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: Error parsing WSDL		        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:150)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24)	Caused by: javax.wsdl.WSDLException: WSDLException (at /wsdl:definitions/wsdl:types/xsd:schema): fau	ltCode=OTHER_ERROR: An error occurred trying to resolve schema referenced at 'calculatorService?xsd=	http://localhost/repo/calculator.xsd', relative to 'http://localhost:8080/axis2/services/'.: java.io	.IOException: Server returned HTTP response code: 500 for URL: http://localhost:8080/axis2/services/	calculatorService?xsd=http://localhost/repo/calculator.xsd	        at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source)	        at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source)	        at com.ibm.wsdl.xml.WSDLReaderImpl.parseTypes(Unknown Source)	        at com.ibm.wsdl.xml.WSDLReaderImpl.parseDefinitions(Unknown Source)	        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)	        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)	        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.readInTheWSDLFile(CodeGenerationEngine.java:286)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:105)	        ... 2 more	Caused by: java.io.IOException: Server returned HTTP response code: 500 for URL: http://localhost:8080/axis2/services/calculatorService?xsd=http://localhost/repo/calculator.xsd	        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1170)	        at java.net.URL.openStream(URL.java:1007)	        at com.ibm.wsdl.util.StringUtils.getContentAsInputStream(Unknown Source)	        ... 11 more		This occurs due to the following schema reference in the generated wsdl, which is invalid.	schemaLocation="calculatorService?xsd=http://localhost/repo/calculator.xsd"
252||i ran findbugs over the cobra's source code and its suggest that you make these fields final		    public static String MODE_IN = "in";	    public static String MODE_INOUT = "inout";	    public static String MODE_OUT = "out";			because		<b>Field isn't final but should be</b><br/><p>	 A mutable static field could be changed by malicious code or	        by accident from another package.	        The field could be made final to avoid	        this vulnerability.</p>
253||- Deploy jaxws-calculator-1.3.aar (Either in tomcat or standalone axis2 server)	- Issue the following request	  http://127.0.0.1:8080/axis2/services/CalculatorService/add?value1=1&value2=3 		You will get <faultstring>java.lang.NullPointerException</faultstring>		This issue has been reported by a user in the axis2 user list as well.
254||Problem:		The method start() of class ListenerManager logs e.getMessage() upon catching an Exception, but this message is an empty string.	The bug lies in some other class, but I did not debug it further.		Steps to reproduce:		1. Uncomment and modify the following configuration parameters for http transport receiver in $AXIS2_HOME/conf/axis2.xml:		<parameter name="requestCoreThreadPoolSize">151</parameter>	<parameter name="requestMaxThreadPoolSize">150</parameter>		2. Modify the $AXIS2_HOME/log4j.properties and uncomment the following line:		log4j.rootCategory=INFO, CONSOLE, LOGFILE		3. Now start the axis2server with default options. Since the requestMaxThreadPoolSize > requestCoreThreadPoolSize, the server will not start, but it won't show the reason of failure on console, or log it properly in axs2.log. The log file thus created will only have this statement:		2007-11-30 14:05:58,651 [main] INFO  org.apache.axis2.engine.ListenerManager  -
255||The XmlStreamParser in the RMI module does not support nesting when the subelement has the same namespace URI and name as the parent element.  The parser currently makes assumptions based on the name of the current tag and errs when the folllowing is encountered:  </param1></param1>.  I will provide a failing test case in a patch.  I will also provide another patch with the failing test case and a correction to XmlStreamParser.
256||Problem Summary:	The FactoryRegistry code is used by the JAX-WS implementation to plug in various implementation factories.	The factories are put into the registry infrequently (startup).	The factories are obtained frequently.	The current code uses a Hashtable to store the factories.  The synchronization degrades performance.		Solution:	This solution was proposed by David Strite of the IBM Performance team.  	We will be removing the Hashtable implementation and replacing it with a "copy on put" pattern as described by:	http://www.ibm.com/developerworks/java/library/j-hashmap.html
257||I have a pojo with the following method.		public URI echoURI(URI inuri){			return inuri;		}		When exposing this as a web service in Axis2 , the generated schema (?xsd) is invalid. See the following excerpt from the schema.		<xs:element name="echoURI">	<xs:complexType>	<xs:sequence>	<xs:element minOccurs="0" name="inuri" nillable="true" type="ns1:URI"/>	</xs:sequence>	</xs:complexType>	</xs:element>		<xs:element name="echoURIResponse">	<xs:complexType>	<xs:sequence>	<xs:element minOccurs="0" name="return" nillable="true" type="ns1:URI"/>	</xs:sequence>	</xs:complexType>	</xs:element>		The relevant schema element type should be anyURI.
258||History:		The JAX-WS layer has a Message component that delegates to the Axiom data model.  The Message component simplifies the marshalling and unmarshalling steps.	When this layer was developed, the Axiom OMDataSource (and OMSourcedElement) abstractions were not fully implemented.  The result is brittle code in the Message component.		Goal:		The goal is to decompose the Message layer.  The code should be redesigned so that we have JAXBDataSource, XMLStringDataSource and SourceDataSource	abstractions.  The Message Block abstraction should then simply delegate to these *DataSource objects.		Breaking out the JAXBDataSource would allow JAXB processing outside of the JAXWS module.		First Step:		In this JIRA, I am introducing the JAXBDataSource, XMLStringDataSource and SourceDataSource abstractions.
259||If a enctype="multipart/form-data request is sent by HTTP POST,	I get the following exception:		java.lang.ClassCastException: [Ljava.lang.String;	       at org.apache.axis2.builder.BuilderUtil.createSOAPMessageWithoutSchema(BuilderUtil.java:183)	       at org.apache.axis2.builder.BuilderUtil.buildsoapMessage(BuilderUtil.java:130)	       at org.apache.axis2.builder.MultipartFormDataBuilder.processDocument(MultipartFormDataBuilder.java:56)	       at org.apache.axis2.transport.TransportUtils.createDocumentElement(TransportUtils.java:160)	       at org.apache.axis2.transport.TransportUtils.createSOAPMessage(TransportUtils.java:111)
260||Our WSDL contains		  <xs:simpleType name="fuzzyDateType">	    <xs:union memberTypes="xs:date xs:dateTime xs:gYear xs:gYearMonth">	    </xs:union>	  </xs:simpleType>		The Eclipse Axis2 Code Generator Wizard generated an ADB Binding that accepts, among others, java.util.date and java.util.Calendar for the object in fuzzyDateType. However, the serialize function simply calls toString() on these objects - whence the date in the generated SOAP is formatted as localized date or as some debug representation of Calendar, respectively, instead of ISO 8601 as required by XML Schema. For example, the generated SOAP contains (with notBefore and notAfter of Type FuzzyDateType):		  <date>	    <notBefore xmlns:s1="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="s1:date">Wed Feb 01 08:00:00 CET 2006</notBefore>	    <notAfter xmlns:s2="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="s2:date">Thu Dec 06 13:19:49 CET 2007</notAfter>	  </date>
261||We have the following XSD...		----------------- snippet start -----------------------		<xs:complexType name="AngivelseAftaleForholdKontroller_OType">	  <xs:sequence>	    <xs:element ref="fase2:Kontekst" /> 	      <xs:sequence>	         <xs:element name="VirksomhedSamling" minOccurs="0">	           <xs:complexType>	             <xs:sequence>	               .	               . more stuff	               .	            </xs:sequence>	          </xs:complexType>	       </xs:element>	      </xs:sequence>	    </xs:sequence>	  </xs:complexType>		----------------- snippet end -----------------------		When we receive XML contents that has only the Kontekst element, but no VirksomhedSamling element, ADB throws an exception because it expects the VirksomhedSamling element, but according to W3 it is perfectly legal to have a minOccurs="0" on an element inside a sequence!
262||A a new deploy goal for the axis2-aar-maven-plugin Maven2 plugin that allows users to upload AAR files to the Axis2 Web Admin Console. Source code attached in patch.
263||My project uses Axis2 to provide a REST interface.  If, in the URL, there is an encoded ampersand for one of the parameter values, the parameter value is truncated at the encoded ampersand.  For example:		http://example.com/myService?param=Foo%20%26%20Bar		The param value should be "Foo & Bar" but it is truncated to "Foo ".
264||XML dateTime strings are not converted correctlly:		{code}		import javax.xml.datatype.DatatypeConfigurationException;	import javax.xml.datatype.DatatypeFactory;	import javax.xml.datatype.XMLGregorianCalendar;		import org.apache.axis2.databinding.utils.ConverterUtil;		public class Axis2DateTimeBug {		    public static void main(String[] args) {			String tin = "2007-12-20T18:36:29.6102028Z";			String tout = "2007-12-20T20:18:11.028Z";			System.out.println("Axis2 converts "+tin+" to Java Date: "+ConverterUtil.convertToDateTime(tin).getTime());			System.out.println("Axis2 converts "+tout+" to Java Date: "+ConverterUtil.convertToDateTime(tout).getTime());			System.out.println("Axis2 converts "+tin+" to dateTime: "+ConverterUtil.convertToString(ConverterUtil.convertToDateTime(tin).getTime()));			System.out.println("Axis2 converts "+tout+" to dateTime: "+ConverterUtil.convertToString(ConverterUtil.convertToDateTime(tout).getTime()));				try {				DatatypeFactory dtf = DatatypeFactory.newInstance();				XMLGregorianCalendar calin = dtf.newXMLGregorianCalendar(tin);				System.out.println("XMLGC converts "+tin+" to XML Format: "+calin.toXMLFormat()+" to Java Date: "+calin.toGregorianCalendar().getTime());				XMLGregorianCalendar calout = dtf.newXMLGregorianCalendar(tout);				System.out.println("XMLGC converts "+tout+" to XML Format: "+calout.toXMLFormat()+" to Java Date: "+calout.toGregorianCalendar().getTime());			} catch (DatatypeConfigurationException e) {				e.printStackTrace(System.err);			}	}		{code}			Axis2 converts 2007-12-20T18:36:29.6102028Z to Java Date: Thu Dec 20 15:18:11 EST 2007	Axis2 converts 2007-12-20T20:18:11.028Z to Java Date: Thu Dec 20 15:18:11 EST 2007	Axis2 converts 2007-12-20T18:36:29.6102028Z to dateTime: 2007-12-20Z	Axis2 converts 2007-12-20T20:18:11.028Z to dateTime: 2007-12-20Z	XMLGC converts 2007-12-20T18:36:29.6102028Z to XML Format: 2007-12-20T18:36:29.6102028Z to Java Date: Thu Dec 20 13:36:29 EST 2007	XMLGC converts 2007-12-20T20:18:11.028Z to XML Format: 2007-12-20T20:18:11.028Z to Java Date: Thu Dec 20 15:18:11 EST 2007
265||org.apache.axis2.saaj.SOAPHeaderImpl#addHeaderElement contains the following check:		        if (name.getURI() == null	                || name.getURI().trim().length() == 0	                || name.getPrefix() == null	                || name.getPrefix().trim().length() == 0) {	            throw new SOAPException("SOAP1.1 and SOAP1.2 requires all HeaderElements to have " +	                    "qualified namespace.");	        }		This is incorrect. The SOAP 1.2 specification only says (see section 5.2.1) that "Each SOAP header block element information item MUST have a [namespace name] property which has a value; that is, the name of the element MUST be namespace-qualified." Here "[namespace name] property" is used in the sense of namespace URI. The specification doesn't say that the element must have a prefix. The namespace in question may be declared as default namespace:		<env:Header xmlns:env="http://www.w3.org/2003/05/soap-envelope" >	 <SomeHeader xmlns="uri:some:namespace">SomeValue</SomeHeader>	</env:Header>		The check on the prefix should be removed from the if statement shown above.
266||Setting handler resolver on dispatch client does not call expected handlers.  Turns out it is due to the binding being replaced between BindingProvider initialization and calling.  I've removed the call that does this, and added a test.  Patch will be attached shortly and I'll commit the fix.
267||In revision 601605 the SOAPMonitorApplet class was moved from the default package to org.apache.axis2.soapmonitor.applet. This change needs to be reflected in SOAPMonitorService which generates the HTML to include the applet. Also the relevant documentation (modules/documentation/xdocs/@axis2_version_dir@/soapmonitor-module.xml) should be updated.
268||Background:	MessageContext.getProperty(String) is invoked frequently during the processing of a web service message.	MessageContext.getProperty(String) delegates to its super class (AbstractContext) to get the property value.  The AbstractContext is aware of parent/ancestor contexts and automatically	searches these objects.	If a value is not found, the MessageContext then looks in the OperationContext, ServiceContext, etc. 		Problem:	The secondary search of the OperationContext, ServiceContext, etc. is not necessary if these contexts are ancestors of the MessageContext.  	The secondary search is expensive and should be eliminated.		Solution:	Add a new method to AbstractContext, isAncestor(AbstractContext).	Use the new method in MessageContext to avoid the secondary search.		Kudos:	David Strite (IBM) found this secondary search problem while doing performance testing for small message payloads.  The new code should increase throughput by about 2% in these cases.
269||RespectBinding is a feature added in JAX-WS 2.1 that allows an endpoint to ignore the binding defined in a wsdl:binding element.  In other words, an endpoint could support both SOAP 1.1 and SOAP 1.2 even though the WSDL may indicate only SOAP 1.1 support for the endpoint.  Here's a quick summary of the work to be done:		1. Update the metadata APIs to expose the RespectBinding data available		2. Update the annotation processing code in the DescriptionBuilder to process the @RespectBinding annotation.		3. Update the WebServiceFeature processing code to account for the RespectBindingFeature.  		4. Change the EndpointController to have a toggle point that checks against a RespectBinding property.  		5. Update Provider processing code (ProviderDispatcer) to handle the scenario where the return type is invalid according to the input.  This is described in the check that exists in the EndpointController.
270||JAX-WS 2.1 adds some new config options for enabling MTOM, along with adding some new capabilities to the MTOM function.  This will mostly leverage existing infrastructure, but will also require some additional functionality and coordination with the message model.  A quick summary of the work to be done:		1. [DONE] Update the metadata APIs to reflect whether or not the MTOM configuration was found on the endpoint.  		2. [DONE] Update the annotation processing code to pick off the @MTOM annotation when included on an endpoint.		3. [DONE] Update the client creation code off of the ServiceDelegate to set the appropriate values when the MTOMFeature is configured for client instances. 		4. Change the marshalling code to read the threshold and toggle MTOM when appropriate.  			Here are some examples of the new ways that MTOM can be configured.		Before:	@WebService	@BindingType(SOAPBinding.SOAP11_HTTP_MTOM)	public class MyServiceImpl {	    ...   	}		After:	@WebService	@MTOM	public class MyServiceImpl {	    ...	}		Additionally, the threshold is configured as such.  		@WebService	@MTOM(enabled="true", threshold="2000")	public class MyServiceImpl {	    ...	}						On the client side, the configuration changes a little bit as well.  Here are a few examples of how this will be done.			MTOMFeature mtom = new MTOMFeature();	mtom.setEnabled(true);	mtom.setThreshold(2000);		Service service = Service.create(myServiceWSDL, serviceName);		MyProxy proxy = service.getPort(portName, MyProxy.class, mtom);
271||We are currently caching ServiceDescription based on a ServiceQName, wsdlURL, AxisConfigContext and Service class. However the caching of ServiceDescription will result in a incorrect functional behaviour when clientA using ServiceA does a addPort(foo) and ClientB using ServiceA does a listPort. Client B will see foo. 	ClientB should never see Foo as it was not added by him. 		So, when a client dynamically adds a port to a ServiceDelegate, the port should only be visible to that client.	In the current design of the code, other clients (incorrectly) see this added port.	This can get very confusing if multiple clients start adding similarly named ports.		The solution is to divide the endpointDescriptions into two maps 	(one for the dynamic ports, and one for the wsdl/annotation ports), then check that the client who is querying the ports is only seeing declared ports and then just the dynamic ones that he created.
272||WSDLs generated by Axis2 can be invalid.		Please see following post and associated thread.		http://marc.info/?l=axis-user&m=119798302920253&w=2			WSDLs generated by Axis2 need to be WS-I compliant.		One suggested approach should be noted:			http://marc.info/?l=axis-dev&m=119851083606670&w=2			Please see invalid WSDL generated by Axis2 that will be attached.
273||Problem Summary:		The AbstractContext maintains a PropertyDifferences map to record each addtion/removal of a property.  This extra processing is only necessary in a cluster environment	and degrades perfromance in non-cluster environments.		Solution:	The suggestion is to lazily create the PropertyDifferences map.  It should only be created when clustering is enabled.		Kudos to David Strite for suggesting this change.		I am working on a fix.
274||Options.getProperty() throws StackOverflowError if the key doesn't map to any value (or points to null). The same applies to almost all get methods (i.e. getReplyTo).	The problem is that if the returned value is null the value is searched on the parent -- which is of the same type, and it never stops.		java.lang.StackOverflowError		at java.util.HashMap.get(HashMap.java:343)		at org.apache.axis2.client.Options.getProperty(Options.java:346)		at org.apache.axis2.client.Options.getProperty(Options.java:349)		at org.apache.axis2.client.Options.getProperty(Options.java:349)		at org.apache.axis2.client.Options.getProperty(Options.java:349)		at org.apache.axis2.client.Options.getProperty(Options.java:349)	       .... and so on
275||Add support for a JAX-WS client to use a sparse DescriptionBuilderComposite to override certain annotation values specified in the client artifacts on a per-SerivceDelegate basis.  This support is the basis for supporting additional client-side metadata, such a deployment descriptor information.  Added additional tests to verify the new functionality.
276||Currently, when validating the description hierarchy, we throw a WebServiceException if we encounter a transport other than 'HTTP'. This feature will allow SOAP/JMS as well
277||Many WS-Addressing unit tests still use the deprecated XMLComparator. Thuy should be updated to use XMLUnit.
278||Background	WSDL11ToAxisServiceBuilder contains code to produce schema "wrapper" code  for selected BindingOperations (i.e. RPC literal bindings).		Problem:	I have a WSDL with several bindings, one of them is an HTTP Binding.  The current code determines that its BindingOperations require wrappering, but	during the schema generation it throws the following error because it incorrectly assumes that the BindingOperation is RPC/literal.		 org.apache.axis2.description.WSDL11ToAxisServiceBuilder populateService RPC-literal type message part Body should have a type attribute 		Proposed Solution:	I have just started working on this issue.  My thought is to introduce a private inner class BindingOperationEntry.  The BindingOperationEntry will contain the BindingOperation and information about the BindingOperation (i.e. isRPC()).  		The findWrappableBindingOperations(Binding binding) method will be changed to return a List of BindingOperationEntry instead of  List of BindingOperation.  Later processing can then easily distinguish between RPC and HTTP usage.  		In addition, I am going to upgrade the exception message (which confused the user) and add some additional trace.		This solution has minimal impact on the existing structure of WSDL11ToAxisServiceBuilder, which is why I pursuing this approach.		Comments ?
279||Currently we have an AddressingInHandler class plus two subclasses, i.e. AddressingFinalInHandler and AddressingSubmissionInHandler. These subclasses don't really do very much so their functionality can be moved to the AddressingInHandler class.
280||?wsdl2 does not show engaged security policies whereas ?wsdl shows them.		See this in the context of https://wso2.org/jira/browse/WSAS-648
281||It keeps failing whenever I run a maven build, but when I run it on it's own, inside Eclipse, it passes every time! To get around this issue I have commented out that test for now. The failure I get is captured below.		testSendImageAttachmentProperty12(org.apache.axis2.jaxws.sample.MtomSampleTests)  Time elapsed: 0.219 sec  <<< FAILURE!	junit.framework.AssertionFailedError: Was expecting an exception due to sending SOAP12 message to SOAP11 endpoint.		at junit.framework.Assert.fail(Assert.java:47)		at org.apache.axis2.jaxws.sample.MtomSampleTests.testSendImageAttachmentProperty12(MtomSampleTests.java:224)		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)		at java.lang.reflect.Method.invoke(Method.java:585)		at junit.framework.TestCase.runTest(TestCase.java:168)		at junit.framework.TestCase.runBare(TestCase.java:134)		at junit.framework.TestResult$1.protect(TestResult.java:110)		at junit.framework.TestResult.runProtected(TestResult.java:128)		at junit.framework.TestResult.run(TestResult.java:113)		at junit.framework.TestCase.run(TestCase.java:124)		at junit.framework.TestSuite.runTest(TestSuite.java:232)		at junit.framework.TestSuite.run(TestSuite.java:227)		at junit.framework.TestSuite.runTest(TestSuite.java:232)		at junit.framework.TestSuite.run(TestSuite.java:227)		at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)		at junit.extensions.TestSetup$1.protect(TestSetup.java:23)		at junit.framework.TestResult.runProtected(TestResult.java:128)		at junit.extensions.TestSetup.run(TestSetup.java:27)		at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:76)		at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)		at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)		at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)		at org.apache.maven.surefire.Surefire.run(Surefire.java:132)		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)		at java.lang.reflect.Method.invoke(Method.java:585)		at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:290)		at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:818)		Now that I think about it the test is probably passing in Eclipse because it does not check what exception gets thrown, so I am not sure that the exception that is being thrown is the 'expected' one.
282||The plugin guide states that "By default, it is assumed that [services.xml] is already present in classesDirectory/META-INF". classesDirectory is the location of the compiled classes and, as such, will be deleted whenever clean is invoked.		Could you please consider conforming to the usual maven behaviour of copying configuration files from the src directory: my suggestion would be something like;		src->main->aar		(c.f. src->main->webapps etc.)
283||When one deploys a jaxws annotated service using the PojoDeployer, the dynamic wsdl and xsd generated don't use all the annotations present in the classes, Quick way is to plugin the wsgen tool from JAXWS. if the JAXWS RI jar's are in the classpath then we pick them up and use them to generate the wsdl. This tactic is already used quite successfully by the Geronimo folks. 		thanks,	dims
284||History:	AXIS2-2873 added code to AxisService.getOperationsBySOAPAction to iterate the operations looking for 	a local name that matched the provided soap action.  Using an iterator to walk the operations is ill-performant.		Solution:	The solution is to swap the iterative search and the map search.		The operationsAliasMap should be searched first (since this was the purpose of building the map).	If that search fails, then fall back to the iterative search by operation name.		Kudos:	David Strite of the IBM Performance team found this problem and provided the suggested change.		I am testing a change right now.
285||axis2-wsdl2code-maven-plugin programmatically adds dependencies during build process messing up regular behaviour of Maven. Plugin dependencies are added as regular project artifact dependencies bringing in these dependencies into regular compile process and are not removed after plugin execution. These programmatically added dependencies interfere with standard Maven dependency management/resolution.
286||Background:	The ServiceDescription contains a map of RuntimeServiceDescription objects.  These objects are created and bound to the ServiceDescription on "first touch".  For example,	the RuntimeServiceDescription objects are information used for jaxws marshalling and resource injection.		Assessment:	Based on profiling data from David Strite, the storage and access of these objects is going to slightly change to be more performant.		I am working on a fix now.
287||As of right now, org.apache.axis2.jaxws.ClientConfigurationFactory uses System.getProperty on Constants.AXIS2_REPO_PATH and Constants.AXIS2_CONFIG_PATH to pick up the axis2.xml and the repo. Problem is if say one application needs 2 JAXWS clients with different repo's or different axis2.xml's (say one with security module enabled and one without) then they can't co-exist in the same JVM. (Example 2 WAR's running under tomcat). So we need some mechanism(s) to let the end user specify where to pick up the information from. For example in the servlet case from the servlet config, or from the thread class loader etc or a custom AxisConfigurator		thanks,	dims
288||This work will provide a new plugpoint in the JAX-WS server-side code. One can register InvocationListener implementations	so that when a request is received on the server-side, their listener is called. Similarly, when a response is ready to be sent	back to the client, before it is actually sent through the AxisEngine, the listener instance will be called again.
289||I deploy a web service with a WSDL that contains the following import:		<xs:import namespace="http://www.w3.org/2005/08/addressing" schemaLocation="http://www.w3.org/2006/03/addressing/ws-addr.xsd" />		the WSDL that is returned from Axis2 via ?wsdl returns the following:		<xs:import namespace="http://www.w3.org/2005/08/addressing" schemaLocation="CalculatorService?xsd=http://www.w3.org/2006/03/addressing/ws-addr.xsd" />		When I try to invoke this web service using a JAX-WS client I get the following exception:		log4j:WARN Please initialize the log4j system properly.	javax.xml.ws.WebServiceException: The following WSDL exception occurred: WSDLException: faultCode=WSDL4JWrapper : : javax.wsdl.WSDLException: WSDLException (at /definitions/types/xsd:schema/xs:schema): faultCode=OTHER_ERROR: An error occurred trying to resolve schema referenced at 'CalculatorService?xsd=http://www.w3.org/2006/03/addressing/ws-addr.xsd', relative to 'http://localhost:8081/axis2/services/CalculatorService?xsd=CalculatorService_schema1.xsd'.: java.io.IOException: Server returned HTTP response code: 500 for URL: http://localhost:8081/axis2/services/CalculatorService?xsd=http://www.w3.org/2006/03/addressing/ws-addr.xsd		at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:173)		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70)		at org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.setupWsdlDefinition(ServiceDescriptionImpl.java:753)		at org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.<init>(ServiceDescriptionImpl.java:192)		at org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.<init>(ServiceDescriptionImpl.java:133)		at org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.createServiceDescription(DescriptionFactoryImpl.java:130)		at org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.createServiceDescription(DescriptionFactoryImpl.java:77)		at org.apache.axis2.jaxws.description.DescriptionFactory.createServiceDescription(DescriptionFactory.java:75)		at org.apache.axis2.jaxws.spi.ServiceDelegate.<init>(ServiceDelegate.java:207)		at org.apache.axis2.jaxws.spi.Provider.createServiceDelegate(Provider.java:59)Time: 2688 ms.			at javax.xml.ws.Service.<init>(Service.java:74)		at org.apache.axis2.jaxws.calculator.CalculatorService.<init>(CalculatorService.java:38)		at org.apache.axis2.jaxws.calculator.client.AddSEIClient.main(AddSEIClient.java:29)	Caused by: javax.wsdl.WSDLException: WSDLException: faultCode=WSDL4JWrapper : : javax.wsdl.WSDLException: WSDLException (at /definitions/types/xsd:schema/xs:schema): faultCode=OTHER_ERROR: An error occurred trying to resolve schema referenced at 'CalculatorService?xsd=http://www.w3.org/2006/03/addressing/ws-addr.xsd', relative to 'http://localhost:8081/axis2/services/CalculatorService?xsd=CalculatorService_schema1.xsd'.: java.io.IOException: Server returned HTTP response code: 500 for URL: http://localhost:8081/axis2/services/CalculatorService?xsd=http://www.w3.org/2006/03/addressing/ws-addr.xsd		at org.apache.axis2.jaxws.util.WSDL4JWrapper.<init>(WSDL4JWrapper.java:138)		at org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.setupWsdlDefinition(ServiceDescriptionImpl.java:735)		... 10 more		It seems apparent that if the import begins with 'http' then it should not be re-written.
290||Consensus on axis-dev that we need a specific deployer for JAXWS with better control as compared to the Pojo Deployer.		-- dims
291||Note the following in JSR-109:		JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web	service document that is part of the description of a Web service, specifically WSDL and XML Schema	documents. Refer to section 4.4 of JAX-WS specification.		I will take a crack at this.
292||The @WebService name parameter should default to the simple name of the class or interface which it describes (according to chapter 4 of the JSR 181 specification).		Currently the value defaults to "", which lead to a hard to find bug.		I just completed tested on a simple fix and unit test change.
293||At the moment the Axis2 EPR has a method hasAnonymous that returns true if the address is either WSA anonymous or using makeConnection annonymous.	I propose that this method continues to work as before, but a new method is exposed called isMakeConnectionAnonymous.		The hasAnonymous can be changed to use that new method.		The isMakeConnectionAnonymous might be useful to Sandesha
294||Below is the code I generated by  WSDL2Java:	wsdl: <wsdl:fault name="SnapfishRemoteException" message="tns:ErrorResponse" />	Java Code: 	        } catch (org.apache.axis2.AxisFault f) {	            org.apache.axiom.om.OMElement faultElt = f.getDetail();		            if (faultElt != null) {	                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {	                ....	I found faultElt.getQName() do not have a namespace uri, so I didnot get correct error response.
295||History:		According to the Sun specification, JAXB Unmarshallers for a specific JAXBContext are not thread safe, but they can be pooled and reused.	It is expensive to create a JAXB Unmarshaller.  Also JAXB Unmarshaller objects can have a big footprint.		Solution:		The JAXBUtils code is the one-stop provider of JAXB Unmarshallers for the engine.  This code will be improved to support a pooled list of Unmarshallers	for each JAXBContext.  The pool will be pruned if it gets too big.  The pool is backed by a ConcurrentHashMap.  (ConcurrentHashMap is a new class in Java 5,	and the JAXWS module requires Java 5).		Kudos to David Strite of IBM for suggesting this fix and providing me a patch (via private email). 		I just completed testing.  I will be committing this change (one file) shortly.
296||I've seen recently an email from somebody asking if it's possible to use remote WSDL file using axis2 maven plugin and the answer was 'yes'	(http://marc.info/?l=axis-user&m=119815987607677&w=2).	I have the same question/problem. I asked on users mailing group and was suggested to report an issue.		In pom.xml the relevant section is:	<plugin>	       <groupId>org.apache.axis2</groupId>	       <artifactId>axis2-wsdl2code-maven-plugin</artifactId>	       <version>1.3</version>	       <executions>	               <execution>	                       <goals>	                               <goal>wsdl2code</goal>	                       </goals>	       <configuration>	               <packageName>nice.test</packageName>	               <wsdlFile>http://soap.nice.org.uk:8000/wsdl/guidanceservice.wsdl</wsdlFile>	       </configuration>	               </execution>	       </executions>	</plugin>		When I try to run mvn compile, I get the following:		java.io.FileNotFoundException:	E:workspace-niceNice-testhttp:soap.nice.org.uk:8000wsdlguidanceservice.wsdl	(The filename, directory name, or volume label syntax is incorrect)		so it seems that instead of going to remote location, it is still trying to find a local file.
297||Some tests in JAXWS junit framework were commented out "temporarily" but have yet to be restored.  I went through and restored some, did a little debugging on others.  Please see attached patch.  The test run based on the patch was fully successful:		Tests run: 447, Failures: 0, Errors: 0, Skipped: 0		I've included comments in the patch for two others that are commented out to help aid debugging.  Sorry, I don't have time at the moment to continue, but can hopefully address them in the near future (two weeks, perhaps?)
298||JMS in Geronimo uses port 61616 by default.   I have experienced some test failures due to port 61616 in use.   I recommend changing the axis2/integration module test cases to use 61654.  ( I googled around, and didn't find any popular packages that use 61654 by default).		I will attach a patch.
299||This is based on a proposal from Nick Gallardo.		The goal is to improve the structure of how function (i.e. end-to-end) tests are added in to the jaxws test framework	Currently, the modules/jaxws/test bucket is a mix of unit tests and function tests. We will split that up and introduce a new module (jaxws-integration) which contains the function tests in a more organized framework than exists today.	This removes the burden of having to run the unit tests under the JAXWSTest driver.
300||Implementations of the ThreadContextMigrator interface are currently managed using the ThreadContextMigratorUtil class. As these implementations represent static configuration information, not just runtime state, it would be better to store them as parameters on the AxisConfiguration. This would also allow us to extend the AxisConfigurationBuilder to recognize ThreadContextMigrators in the axis2.xml file.
301||Dear Apache Team,		I am on porting my code from Axis1.x to Axis2 I need some access on generated Wsdl2java configuration output.	Using the WSDL2Java (which implicitly means CodeGenerationEngine) there is no access on generated information in Axis2 (e.g. like list of generated files, packages, etc.)	It seems to me that providing a simple getter method on "configuration" of org.apache.axis2.wsdl.codegen.CodeGenerationEngine Class would solve the problem elegantly.		This improvement would really help me a hell lot!	Thx in advance!	Tamas K.
302||Problem: 	We want to unmarshall the soap body payload as an OMSourcedElement backed by a JAXB object.		Solution:	The proposed solution is to create a new class, JAXBCustomBuilder.	The JAXBCustomBuilder is registered on the StAXOMBuilder, and it will automatically demarshall the payload into an OMSourcedElement backed by a JAXB object.		Here is a quick summary		1) Receive first message.	2) The JAXWS unmarshalling code builds a JAXBContext and unmarshalls the payload.	3) The JAXWS unmarshalling code builds a JAXBCustomBuilder with the same JAXBContext.	4) The JAXBCustomBuilder is placed on the ServiceContext.		5) Receive second message	6) The Dispatch code associates the ServiceContext with a MessageContext.	6a) This event is intercepted and triggers the JAXBCustomBuilder to be registered on the StAXOMBuilder.	7) When the StAX events of the payload are pulled, the JAXB object is automatically unmarshalled.		Note that this defect requires changes that are being made as part of WSCOMMONS-303.		Thanks,	Rich
303||ERROR 13:21:39,411 (ServerWorker.java:466) - Error processing POST request 	     [java] org.apache.axis2.AxisFault: The Callback for MessageID urn:uuid:5BE9C8C4B19BCC55A31203946194773 was not found	     [java]     at org.apache.axis2.util.CallbackReceiver.receive(CallbackReceiver.java:70)	     [java]     at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:145)	     [java]     at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:275)	     [java]     at org.apache.synapse.transport.nhttp.ServerWorker.processPost(ServerWorker.java:226)	     [java]     at org.apache.synapse.transport.nhttp.ServerWorker.run(ServerWorker.java:190)	     [java]     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)	     [java]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)	     [java]     at java.lang.Thread.run(Thread.java:613)		The bug is probably in UUIDGenerator.getUUID (AXIOM)
304||ServiceGroupContext existingSGC = null;		            ServiceGroupContext sgc = cc.getServiceGroupContext(groupName);		            if (existingSGC == null) {	                // could not find an existing ServiceGroupContext	                // use the restored object	                metaParent.activate(cc);		                // set parent 	                this.setParent(metaParent);	            } else {	    // do something else			The else block is never executed because existingSGC is null	I suspect existingSGC should be set to cc.getServiceGroupContext(groupName);
305||Possible NPE in XMLUtils.initSAXFactory
306||There's a potential NPE inside the Worker:		MessageContext msgCtx = null;	try {	  // instantiate msgCtx	} catch(AxisFault e) {	   access msgCtx	}
307||if (targetAddress != null) {				xmppOutTransportInfo = new XMPPOutTransportInfo(targetAddress);				xmppOutTransportInfo.setConnectionFactory(connectionFactory);			} else if (targetAddress == null && msgCtx.getTo() != null &&					!msgCtx.getTo().hasAnonymousAddress()) {				//TODO 			} else	// do something else		targetAddress can only be null in the else block		BTW there are no statements in the first else. Is that correct?
308||in two places the there is the following set of statements		some_type var = null;	// something else		if (var == null) {	 do something	}		var can only be null here.
309||In some scenarios handleException() receives null as second argument. This causes a NPE
310||In case of timeout a NPE occurs because the environment doesn't create the exception, while the handler tries to get it.
311||if (moduleVersion == null && moduleVersion.trim().length() == 0) {	            moduleVersion = getDefaultModuleVersion(moduleName);	}		The second condition is never evaluated (it would cause a NPE). It should be ||
312||In the dual channel service invocation, Axis2 server is expected to respond to the request message with http 202. This was working correctly in Axis2-1.3. However, server responds with 200 OK for the request in the latest nightly builds. 		Steps to reproduce:	================	1. Deploy a service in Axis2 server	2. Write an dual channel async client	3. Invoke the service and monitor the message flow using tcpmon		When you send the request, you will get http 200 as the response code.
313||Implemented a simple JAX-WS service provider "DemoService" and a simple JAX-WS SOAP handler "DemoHandler". DemoHandler was configured on DemoService's handlerChain. The DemoHandler implementationcontains a getHeaders() method specifying that it handles the "myheader" header in the "http://demo/" namespace.		When sending the attached SOAP request everything works fine. The handler is called and the server responds with an appropriate SOAP response. The request	is almost the same request, with the  only difference that the mustUnderstand attribute for the "myheader" header has been set to "1". When sending this request, the	server responds with a SOAP fault generated  Axis runtime: "Must Understand check failed soap :	{http://demo/}	myheader"	This behaviour is incorrect, It does not conform to the JAX-WS specification JSR-224 v2.0. Chapter 10.2.1 ("SOAP mustUnderstand Processing") and chapter 10.1.1.3 ("SOAP header") mandate that all headers specified by the getHeaders method of a SOAPHandler must be considererd as "understood" by the JAX-WS runtime.
314||Axis2 and JAXWS need to add support for SOAP role/actor based validation 	of mustUnderstand headers.  Only headers which are targeted to a 	role/actor that the node supports should be considered in mustUnderstand 	checks.
315||Axiom has a new LifecycleManager for dealing with attachments, we should allow users to override the implementation via an entry in axis2.xml
316||A Nullpointer Exception is thrown when initializing org.apache.axis2.client.ServiceClient. The stack trace is given below		=================================================================	org.apache.axis2.deployment.DeploymentException		at org.apache.axis2.deployment.util.Utils.loadHandler(Utils.java:134)		at org.apache.axis2.deployment.AxisConfigBuilder.processPhaseList(AxisConfigBuilder.java:405)		at org.apache.axis2.deployment.AxisConfigBuilder.processPhaseOrders(AxisConfigBuilder.java:433)		at org.apache.axis2.deployment.AxisConfigBuilder.populateConfig(AxisConfigBuilder.java:133)		at org.apache.axis2.deployment.DeploymentEngine.populateAxisConfiguration(DeploymentEngine.java:615)		at org.apache.axis2.deployment.FileSystemConfigurator.getAxisConfiguration(FileSystemConfigurator.java:115)		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:64)		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContextFromFileSystem(ConfigurationContextFactory.java:180)		at org.apache.axis2.client.ServiceClient.configureServiceClient(ServiceClient.java:146)		at org.apache.axis2.client.ServiceClient.<init>(ServiceClient.java:139)		at org.apache.axis2.client.ServiceClient.<init>(ServiceClient.java:228)		at org.objectweb.isac.plugin.webserviceloadinjector.SessionObject.doAdd(Unknown Source)		at org.objectweb.isac.plugin.webserviceloadinjector.SessionObject.doSample(Unknown Source)		at org.objectweb.clif.scenario.isac.engine.ExecutionThread.doWork(ExecutionThread.java:155)		at org.objectweb.clif.scenario.isac.engine.ExecutionThread.run(ExecutionThread.java:251)	Caused by: java.lang.NullPointerException		at org.apache.axis2.deployment.util.Utils.loadHandler(Utils.java:118)		... 14 more	=================================================================					From the source code debugging I figured out that the exception is happening on the following line in the org.apache.axis2.deployment.util.Utils.loadHandler method...		=========================================	if(handlerClass.getPackage().getName().equals("org.apache.axis2.engine")){	                String name = handlerClass.getName();	                log.warn("Dispatcher " + name + " is now deprecated.");	                if(name.indexOf("InstanceDispatcher")!=-1) {	                    log.warn("Please remove the entry for " + handlerClass.getName() + "from axis2.xml");	                } else {	                    log.warn("Please edit axis2.xml " +	                            "and replace with the same class in org.apache.axis2.dispatchers package");	                }	            }	==============================================		The "getPackage" call in the "if" statement's condition can return null when the java.lang.Package object is not created by the class loader. This situation is valid as stated in this methods contract.		This is what exactly happens in case of CLIF class loader. Hence the null pointer exception. So check has to be introduced to validate the condition.
317||In the metadata module, the org.apache.axis2.jaxws.description.impl.OperationDescriptionImpl.isJAXWSAsyncClientMethod() has some incorrect logic at the end:		CURRENTLY:		        if (methodName != null && returnTypeName != null) {	            // REVIEW: Not sure the method MUST end with "Async"; I think it can be customized.	            answer = methodName.endsWith("Async")	                    && (returnTypeName.equals(Response.class.getName()) ||	                    returnTypeName.equals(Future.class.getName()));	        }		The returnTypeName, however, is always one of the forms:		     javax.xml.ws.Response<some.other.MyClass>	     java.util.concurrent.Future<some.other.MyClass>		Thus the check for returnTypeName.equals(Response.class.getName()) or returnTypeName.equals(Future.class.getName()) will ALWAYS FAIL.  Not only that, the placement of the && and || and lack of perentheses means the statement is interpreted as such:		     answer = ( methodName.endsWith("Async")	                    && (returnTypeName.equals(Response.class.getName()) )  ||	                    returnTypeName.equals(Future.class.getName()));		Ok, so the reason I'm not fixing this, is because the change over to this logic:		     answer = methodName.endsWith("Async")	                    && (((returnTypeName.indexOf(Response.class.getName()) == 0) ||	                    returnTypeName.indexOf(Future.class.getName()) == 0));		caused much test breakage.		UNCOMMENT suite.addTestSuite(NonWrapTests.class); in JAXWSTest and fix the logic in OperationDescriptionImpl.		I'll continue to look at this...
318||In JAXWS, it XMLUtils.createMessageFromValue(Object) is failing to copy mimeheaders, and thus they are not sent.  See the test:		org.apache.axis2.jaxws.provider.SoapMessageProviderTests.testProviderSourceXMLOnly()
319||- AbstractMessageReceiver defines custom class loader without using doPrivileged	- ThreadContextDescriptor should be defined as static class
320||The class WebServiceContextAnnot implements the interface javax.xml.ws.WebServiceContext, however, this interface in not an annotation interface. The web service context is actually loaded using the @Resource annotation, so having a WebServiceContextAnnot appears to be unnecessary. Getting rid of it seems like a reasonable option given that there are some JAX-WS 2.1 API methods on there that will not be implemented.
321||Performing MTOM optimization over the JMS transport does not work correctly.		There are three main issues involved here:		1) MessageContext.setDoingMTOM()		For the JMS transport a call to MessageContext.setDoingMTOM() will always return false. This is due to the fact that, unlike the HTTP transport, the JMS transport never checks whether enableMTOM has been set in config or programmatically. This means that a JMS message containing binary content will never be optimized.		2) JMSByteMessage always sent as soap1.1 format		The OMOutputFormat class defaults its soap version to soap1.1. The HTTP transport sets this according to the soap namespace used in the soap envolope. JMS however does not do this and the byte message is always sent as soap1.1		3) contentType of JMS message is never set		The contentType of a JMS message is never set. This passes unnoticed on the server when attachments are not involved. However when a message contains attachments the expected contentType of 'multipart/related' is never present and the message is perceived as a non soap/xml message which is incorrect.		I have attached a working solution for the above issue so can submit if agreed		Thanks,		Cathal Callaghan
322||I was changed LocalTrasportSender for multithread. 		We can LocalTransportSender on mutlithread by using attached code.		Please check attached codes.	I hoped that this enhanced added to next release.		thanks,
323||http://svn.apache.org/viewvc?rev=635316&view=rev		+                       <exclude>**/RPCCallTest*.java</exclude>	+                       <exclude>**/ComplexDataTypesComplexDataTypesSOAP11Test*.java</exclude>	+                       <exclude>**/ComplexDataTypesDocLitBareTest*.java</exclude>
324||Extend the InvocationListener interface to add a method that will be called anytime exceptions occur	in the JAX-WS server-side code. This will allow registered implementations to act on the current	exception and possibly map the exception to a different type.
325||History:	WSLDDefinitionWrapper wraps a WSDL Definition.  The WSDLDefinitionWrapper uses information from the AxisConfiguration to determine the strategy for 	loading resources (i.e. loading and keeping the schema in core). 		Problem:	The WSDLDefinitionWrapper (and its companion WSDL4JWrapper class) expose constructors that don't pass in the configuration context or other memory limit information. 	When these ill-conceived constructors are used, the AxisConfiguration information is ignored, and this can lead to out of memory situation.		Solution:	The solution is to CLEANUP the constructors!		First Step:  Deprecate all of the constructors on WSDLDefinitionWrapper and WSDL4JWrapper that don't provide a memory configuration parameter .		Second Step:  Examine all uses of the deprecated constructors.  In most cases, a configuration (AxisConfiguration) is available, and the code is changed to 	use the correct constructor.  In other cases, the configuration information is not available, but there is an obvious choice based on the context of the call.	(i.e. we don't need a memory sensitive WSDLDefinitionWrapper for a temporary wsdl definiton usage).		I am testing a solution.			Kudos to Vien Tran of IBM for finding this error during rigorous SVT testing with a service containing a large number of schemas.	Kudos to Jeff Barrett for working with me to brainstorm a solution.
326||OutInAxisOperation line 265 (in 1.3 release code).		        if (useCustomListener == null || !useCustomListener.booleanValue()) {	 >>           if(mc.getReplyTo()==null){	                EndpointReference replyToFromTransport =	                        mc.getConfigurationContext().getListenerManager().	                                getEPRforService(sc.getAxisService().getName(),	                                        axisOp.getName().getLocalPart(), mc	                                        .getTransportIn().getName());		                if (mc.getReplyTo() == null) {	                    mc.setReplyTo(replyToFromTransport);	                } else {	                    mc.getReplyTo().setAddress(replyToFromTransport.getAddress());	                }	            }	        } 		>> line should be as follows	 if(mc.getReplyTo()==null | replyTo.hasNoneAddress()){
327||We need to enhance the JAXWSDeployer (and the POJODeployer?) to cache the endpoint URIs that will be used to create an endpoint reference when one isn't explicitly provided by the user.
328||Complete support for the new annotations.
329||Complete support for the AddressingFeature and SubmissionAddressingFeature, and related annotations.
330||A faulty Stub is generated with JAXBRI, when a SOAP header is defined in the WSDL:		The following informations in the generated "toOM" Method for the header are missing:	1) the namespaces for creating the JaxbRIDataSource	2) the name of the element for the "createOMElement" method (second parameter)		code snippet: part of the "toOM" Method in the generated stub:	//- - - - 	JaxbRIDataSource source = new JaxbRIDataSource(	    net.company.schemas.header.HeaderType.class, 	    param,	    marshaller,	     "",	     "");		org.apache.axiom.om.OMNamespace namespace = factory.createOMNamespace("", null);	return factory.createOMElement(source, "", namespace);	//- - - -
331||To get the ParallelAsyncTest to pass validation, I tried to use @WebMethod(exclude=true) on AsyncPort.customAsync(..).  		Apparently the @WebMethod(exclude=true) is not being honored.		To see the error, remove the TODO at the bottom of AsyncPort.  Make sure the you run with AXIS2-3610 so that you get the validation exception that includes all of the operation names.
332||It appears that we cannot get the endpoint URIs inside the JAXWSDeployer. Instead we will delay looking up the URIs for as long as possible.
333||Folks, please consider upgrading the simple http and nhttp transports to the latest official release of HttpComponents Core (4.0-beta1) for the 1.4 release		Oleg
334||Please uncomment the test in  in jaxws-integration module's pom.xml
335||Since ServiceClient is not thread safe I want to pool some instances. In order to do this it's possible to use queues or sets, but the second approach is better because it doesn't create duplicates
336||SOAP12DispatchTests.		Please change:	   public void _testSOAP12DispatchMessageMode_MustUnderstand() throws Exception {		to:		   public void testSOAP12DispatchMessageMode_MustUnderstand() throws Exception {		and rerun to see the exception
337||testPopulate		                      junit.framework.ComparisonFailure: expected:<2002-10-10T0[7:00:00.000+00]:00> but was:<2002-10-10T0[2:00:00.000-05]:00>		at junit.framework.Assert.assertEquals(Assert.java:81)		at junit.framework.Assert.assertEquals(Assert.java:87)		at org.apache.axis2.schema.populate.simple.AbstractSimplePopulater.compare(AbstractSimplePopulater.java:128)		at org.apache.axis2.schema.populate.simple.AbstractSimplePopulater.checkValue(AbstractSimplePopulater.java:85)		at org.apache.axis2.schema.populate.simple.SimpleTypeDateTimePopulateTest.testPopulate(SimpleTypeDateTimePopulateTest.java:48)
338||Stacktrace:		java.lang.NullPointerException	        at org.apache.axis2.util.MessageContextBuilder.createFaultEnvelope(MessageContextBuilder.java:546)	        at org.apache.axis2.util.MessageContextBuilder.createFaultMessageContext(MessageContextBuilder.java:329)	        at org.apache.axis2.transport.http.AxisServlet.handleFault(AxisServlet.java:376)	        at org.apache.axis2.transport.http.AxisServlet.processAxisFault(AxisServlet.java:366)	        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:154)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:760)	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)	        at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run(ServletStubImpl.java:1077)	        at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:465)	        at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:348)	        at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:7047)	        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)	        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121)	        at weblogic.servlet.internal.WebAppServletContext.invokeServlet(WebAppServletContext.java:3902)	        at weblogic.servlet.internal.ServletRequestImpl.execute(ServletRequestImpl.java:2773)	        at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:224)	        at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:183)		Seems like fault.getNode() returns null.
339||I downloaded latest version of AXIS2-nighly build release date 10-Mar-08.	Before this, system was working fine with old release.		I am getting below error for one of the web service, this when i click service through administration interface:	http://localhost:8888/webservices/services/AnnualFishingService?wsdl		Please advice, thanks in advance		10:20:00,683  INFO org.apache.axis2.dataretrieval.AxisDataLocatorImpl:83 - getData request failed for dialect, http://schemas.xmlsoap.org/wsdl/	org.apache.axis2.dataretrieval.DataRetrievalException		at org.apache.axis2.dataretrieval.WSDLDataLocator.outputInlineForm(WSDLDataLocator.java:134)		at org.apache.axis2.dataretrieval.WSDLDataLocator.getData(WSDLDataLocator.java:73)		at org.apache.axis2.dataretrieval.AxisDataLocatorImpl.getData(AxisDataLocatorImpl.java:80)		at org.apache.axis2.description.AxisService.getData(AxisService.java:2616)		at org.apache.axis2.description.AxisService.getWSDL(AxisService.java:1426)		at org.apache.axis2.description.AxisService.printWSDL(AxisService.java:1294)		at org.apache.axis2.transport.http.ListingAgent.processListService(ListingAgent.java:287)		at org.apache.axis2.transport.http.AxisServlet.doGet(AxisServlet.java:240)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:740)		at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)		at com.evermind.server.http.ServletRequestDispatcher.invoke(ServletRequestDispatcher.java:824)		at com.evermind.server.http.ServletRequestDispatcher.forwardInternal(ServletRequestDispatcher.java:330)		at com.evermind.server.http.HttpRequestHandler.processRequest(HttpRequestHandler.java:830)		at com.evermind.server.http.HttpRequestHandler.run(HttpRequestHandler.java:285)		at com.evermind.server.http.HttpRequestHandler.run(HttpRequestHandler.java:126)		at com.evermind.util.ReleasableResourcePooledExecutor$MyWorker.run(ReleasableResourcePooledExecutor.java:186)		at java.lang.Thread.run(Thread.java:534)	Caused by: java.lang.NullPointerException		at org.apache.axis2.description.AxisService2WSDL11.generateSoap11Binding(AxisService2WSDL11.java:1353)		at org.apache.axis2.description.AxisService2WSDL11.generateSoap11Port(AxisService2WSDL11.java:1166)		at org.apache.axis2.description.AxisService2WSDL11.generateService(AxisService2WSDL11.java:493)		at org.apache.axis2.description.AxisService2WSDL11.generateOM(AxisService2WSDL11.java:237)		at org.apache.axis2.dataretrieval.WSDLDataLocator.outputInlineForm(WSDLDataLocator.java:130)		... 16 more	10:33:38,513  INFO org.apache.axis2.dataretrieval.AxisDataLocatorImpl:83 - getData request failed for dialect, http://schemas.xmlsoap.org/wsdl/	org.apache.axis2.dataretrieval.DataRetrievalException
340||org.apache.axis2.jaxbri.JaxbSchemaGenerator :		protected static JAXBContext createJAXBContext(Set<Class<?>> classes,	                                                   String defaultNs) throws JAXBException {	        Iterator it = classes.iterator();	        String className = "";	        Object remoteExceptionObject;	        while (it.hasNext()) {	            remoteExceptionObject = it.next();	            className = remoteExceptionObject.toString();	            if (!("".equals(className)) && className.contains("RemoteException")) {	                classes.remove(remoteExceptionObject);	            }	        }		 classes.remove(remoteExceptionObject)   // wrong can throw ConcurrentModificationException 	 it.remove() //right
341||Problem:	To comply with JAXWS, the client must receive a SOAPFaultException containing a fault code that is a javax.xml.soap.SOAPConstants.SOAP_VERSIONMISMATCH_FAULT.		Testcase:	Recreate the problem:	In the jaxws-integration module, edit the samples/MtomSampleTests.java testcase.	Change CHECK_VERSIONMISMATCH=false to CHECK_VERSIONMISMATCH=true;	Rerun the tests and it will fail with:		  <testcase classname="org.apache.axis2.jaxws.sample.MtomSampleTests" name="testSendImageAttachmentProperty12" time="0.11">	    <failure type="junit.framework.AssertionFailedError" message="Expected SOAPFaultException, but received: class javax.xml.ws.WebServiceException">junit.framework.AssertionFailedError: Expected SOAPFaultException, but received: class javax.xml.ws.WebServiceException			at junit.framework.Assert.fail(Assert.java:47)			at junit.framework.Assert.assertTrue(Assert.java:20)			at org.apache.axis2.jaxws.sample.MtomSampleTests.testSendImageAttachmentProperty12(MtomSampleTests.java:237)
342||Using the type table to fill the xsi:type attribute would help make it possible to successfully validate SOAP response messages against the WSDL.  Although the class name approach may be sufficient for POJO services, it provides meaningless information when other approaches are used.		I suggest replacing the following lines of BeanUtil.java	             // Added objectAttributes as a fix for issues AXIS2-2055 and AXIS2-1899 to 	            // support polymorphism in POJO approach.	            // For some reason, using QName(Constants.XSI_NAMESPACE, "type", "xsi") does not generate	            // an xsi:type attribtue properly for inner objects. So just using a simple QName("type").	            ArrayList objectAttributes = new ArrayList();	            objectAttributes.add(new QName("type"));	            objectAttributes.add(beanObject.getClass().getName());		With this (or similar ... not sure if qualified check should be there):	            ArrayList objectAttributes = new ArrayList();	            objectAttributes.add(new QName(Constants.XSI_NAMESPACE, "type", "xsi"));	            if( typeTable != null && qualified )	            {	                QName qNamefortheType =	                    typeTable.getQNamefortheType(beanObject.getClass().getName());	                if (qNamefortheType == null) {	                    // Added objectAttributes as a fix for issues AXIS2-2055 and AXIS2-1899 to 	                    // support polymorphism in POJO approach.	                    objectAttributes.add(beanObject.getClass().getName());	                }	                else	                {	                    objectAttributes.add(qNamefortheType);    	                }	            }	            else	            {	                objectAttributes.add(beanObject.getClass().getName());	            }		Note that I had no issues with generating the xsi:type attribute for inner elements in my testing (as was mentioned by the existing comment).
343||Friendly reminder to add "doPriv" calls to your code as necessary.   Especially new code.		Lack of doPrivs leads to problems in enterprise environments.		-------------------------------------------------------------	As a refresher...doPrivs are needed for:	Accessing the classloader	Loading a class via Class.forName	Method.invoke	Calls to get system properties	Calls to external projects that do the above.		Also make sure to put the doPriv calls in areas that the customer cannot directly call.  	(For example don't expose a public Class forNameWithPriv(String name) method).		Perhaps we should add this as a "release step"		Dims volunteered to do a quick scrub prior to 1.4 release.  Thanks dims.
344||When running the proxy tests with WSDL, we get a WebServices exception		stack trace:		-------------------------------------------------------	 T E S T S	-------------------------------------------------------	Running org.apache.axis2.jaxws.proxy.ProxyTests	javax.xml.ws.WebServiceException: ServiceDescription.updateEndpointDescription: Can not do a getPort on a port added via addPort()	.  PortQN: {http://doclitwrapped.proxy.test.org}ProxyDocLitWrappedPort	        at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:173)	        at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70)	        at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:118)	        at org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.updateEndpointDescription(ServiceDescriptionImpl.java:44	5)	        at org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.updateEndpoint(DescriptionFactoryImpl.java:317)	        at org.apache.axis2.jaxws.description.DescriptionFactory.updateEndpoint(DescriptionFactory.java:177)	        at org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:527)	        at org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:452)	        at javax.xml.ws.Service.getPort(Service.java:40)	        at org.apache.axis2.jaxws.proxy.doclitwrapped.sei.ProxyDocLitWrappedService.getProxyDocLitWrappedPort(ProxyDocLitWrappedSe	rvice.java:79)	        at org.apache.axis2.jaxws.proxy.ProxyTests.testMultipleServiceCalls(ProxyTests.java:62)	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	        at java.lang.reflect.Method.invoke(Method.java:618)	        at junit.framework.TestCase.runTest(TestCase.java:168)	        at junit.framework.TestCase.runBare(TestCase.java:134)
345||Deploy the jaxws-samples war into tomcat, point your browser to http://yourhost:port/jaxws-samples/demoEchoPing and try the "Asynchronous Echo with Async Communication" scenario.		thanks,	dims
346||When a dynamic port is added to a ServiceDescription, and used to create a Dispatch, the binding type is not checked to enable MTOM for that client.  This results in requests not sending the proper MIME payload.
347||I am adding changes to TransportUtils.deleteAttachment() method to use LifecycleManager changes made in Axiom to handle attachment lifecycle. The life cycle manager is loaded by reading axis configuration, these changes will make use of the new LifecycleManger and use it to deletion cached attachment files.
348||In JMSListener.start(), there is a thread pool created for the JMSMessageReceiver. But the thread pool is not shutdown in the stop() method. As a result, the java process cannot be terminated gracefully unless System.exit() is called.		   public void start() throws AxisFault {	        // create thread pool of workers	        ExecutorService workerPool = new ThreadPoolExecutor(	                1,	                WORKERS_MAX_THREADS, WORKER_KEEP_ALIVE, TIME_UNIT,	                new LinkedBlockingQueue(),	                new org.apache.axis2.util.threadpool.DefaultThreadFactory(	                        new ThreadGroup("JMS Worker thread group"),	                        "JMSWorker"));		        Iterator iter = connectionFactories.values().iterator();	        while (iter.hasNext()) {	            JMSConnectionFactory conFac = (JMSConnectionFactory) iter.next();	            JMSMessageReceiver msgRcvr =	                    new JMSMessageReceiver(conFac, workerPool, configCtx);
349||AddressingOutHandler may omit wsa:To on 2004/08 despite it being mandatory.		If the To EPR for the response is null, the header will not be added with the anonymous address. This is in violation of the 2004/08 spec and is detected by the AddressingInHandler. This problem is appearing in Sandesha2 testing for Sandesha2 1.4.
350||Tests in error: 	  testService_isAlive(org.apache.axis2.jaxws.sample.ParallelAsyncTests)	  testService_ExecutorShutdownNow(org.apache.axis2.jaxws.sample.ParallelAsyncTests)	  testService_ExecutorShutdownNow_2(org.apache.axis2.jaxws.sample.ParallelAsyncTests)	  testService_ExecutorShutdownNow_3(org.apache.axis2.jaxws.sample.ParallelAsyncTests)		Tests run: 5, Failures: 0, Errors: 4, Skipped: 0		These tests pass using the IBM JDK.  I am looking into this.
351||I really like to include the attached patch in rc3 which contains following fixes		a) Binding Message Level Dispatching -- a minor fix which set the target Axis binding message in the message context.		b) Minor fix which set policies in the appropriate element of the generated WSDL based on the Axis Service and Axis Service Binding hierarchy.		c) Support for policy attachments at binding level -- this is a feature that  I would really like to see in Axis2 1.4 release. It allows the user to add <wsp:PolicyAttachment> element in the services.xml and specify policies that applicable bindings. This very useful since it provides a way for the service authors to specify policies for specific bindings. (Some polices are only meaningful at binding level (.e.g security) and at the moment this can be done only by including a WSDL in service archive file)		NOTE: 	1) There are one test failure in JAXWS Integration , and three failures in the integration modules. I will fix them and submit another patch ASAP
352||New service deployment change has broken ?wsdl2. Now if both http and https are enabled we zee about 10 endpoints on ?wsdl2. This should be fixed.
353||See usage pattern here:		http://weblogs.java.net/blog/kohlert/archive/2006/10/jaxws_and_type.html
354||I found 73 messages that require NLS Message resources.  I will be correcting these today so that they can get into RC1.
355||Problem:	JAXWS 2.1 introduced an @MTOM annotation for the endpoint.	If present the @MTOM annotation should be used to enable/disable MTOM	If not present, the BindingType should be used to enable/disable MTOM.		The following cases are currently failing:			// Should enable MTOM	@WebService(...)	@MTOM	public class ...{		// Should enable MTOM	@WebService(...)	@MTOM(enabled=true)	public class ...{		// Should disable MTOM	@WebService(...)	@BindingType(SOAPBinding.SOAP11HTTP_MTOM_BINDING)	@MTOM(enabled= false)	public class ...{		I have representative failing tests in my sandbox.  I will be committing the new tests and changes today for RC3.		Thanks, 	Rich
356||The AddressingInHandler currently only looks at the WS_ADDRESSING_VERSION property. It needs to look at the parameter as well in order to work nicley with the JAX-WS 2.1 support for WS-Addressing.
357||Brian,		I tried switching on addressing mar in the jaxws-integration test suite and i see lot of failures when i try to enable addressing in modules/jaxws-integration/test-resources/axis2.xml. Here's the patch i have so far.		thanks,	dims
358||If there is a [Subsubcode] available for some WSA fault prefer sending it instead of [Subcode] for SOAP 1.1 faults.
359||using Axis2 1.4 RC4 WSDL2Java fails for WSDL files that work for Axis2 1.3 and without any complaints. Using "urn:" naming scheme. Also fails when using http: naming scheme and the document is not referencable (the later used to work in RC3).		For the WSDL files see attachment, command and error output in this message.		For WSDL2java I use the follwing command:	wsdl2java.sh -s -ssi -d adb -p caservice 		     -t -wv 2.0 -o buildc -d adb 		     -http-proxy-host proxy.emea.nsn-intra.net 		     -http-proxy-port 81 		     -ns2p urn:schemas:caTypes=schemas.catypes 		     -uri ca-interface.wsdl		I got the following error messages:		 Using AXIS2_HOME:   d:devhomeaxis2-1.4	 Using JAVA_HOME:       d:jdk1.6.0	log4j:WARN No appenders could be found for logger (org.apache.axis2.description.WSDL20ToAxisServiceBuilder).	log4j:WARN Please initialize the log4j system properly.	Woden[Error],0:0,WSDL502,Could not create a URL from context URI "null" and location URI "null".	Woden[Error],0:0,WSDL502,Could not create a URL from context URI "null" and location URI "null".	Woden[Warning],0:0,Description-1001,The targetNamespace 'urn:caService' is not dereferencable.	Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: Error parsing WSDL		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:153)		at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35)		at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24)	Caused by: org.apache.axis2.AxisFault: Unable to find element {urn:schemas:caTypes}createPackageSubscription reffered to by operation createPackageSubscription		at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.createAxisMessage(WSDL20ToAxisServiceBuilder.java:1112)		at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateOperations(WSDL20ToAxisServiceBuilder.java:1053)		at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.processInterface(WSDL20ToAxisServiceBuilder.java:956)		at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.processService(WSDL20ToAxisServiceBuilder.java:385)		at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateService(WSDL20ToAxisServiceBuilder.java:273)		at org.apache.axis2.description.WSDL20ToAllAxisServicesBuilder.populateAllServices(WSDL20ToAllAxisServicesBuilder.java:90)		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:105)		... 2 more
360||The wsa output/input action is not set when the method is annotated with the @Action annotation but does not specify the action name.
361||As according to some Sun "experts" exceptions raised by handlers in one-way invocations should be discarded. 		Here's some background as the same problem was discovered by CXF folks:		http://www.nabble.com/JAX-WS-spec-interpretation-issue....-to15178658.html
362||Hi,		Is there a particular reason to add the line.		msgContext.setProperty(HTTPCon		    stants.MC_HTTP_SERVLETCONTEXT, getServletContext());			You will be able to access the context from http servlet request object.		Beside the prior added line will break some of the existing production code.		getServletContext() will work properly, IFF the user's servlet inherit the init method or if over-rides, it should called the parent init method.		In AxisServlet, yes it dose over-rides the init method and calls the parent init.		But those of us who have extended AxisServlet to work with, where over-rides the init method  to intialize the AxisConfiguration the way our production system wants  does not call the parents (AxisServlet) init method.		ex:	public class MyServlet extends AxisServlet {	    ...	   public void init(ServletConfig config) {	      // my way of initializing axisconfiguration and listeners rather using parent	     // init, but inheriting parents do* from AxisServlet.	  }		}		We used AxisServlet as show above for quite a long  time.		I'm afraid the prior line of code  has broken the backward compatibility of re-using AxisServlet in production environments.		Thus, the correct way is to obtain the servlet context from request, rather setting the property.		Thus, I would humbly ask to revert the commit to preserve backward compatibility.		Thank you!
363||Right now the handler-chains.xml file is parsed using JAXB. The problem with JAXB parsing is that it returns null for an invalid qname. For example, when the namespace of the qname cannot be resolved. So for example, when the handler-chains.xml contains an invalid qname for service-name or port-name and JAXB returns null then the HandlerResolver will treat it as if the service-name/port-name was not specified at all. And therefore HandlerResolver will return a handler that it should not.
364||Background:	------------------		The JAX-WS specification defines properties to set/get attachments on the dispatch/proxy.  For example:	        // Create Dispatch for the payload	        Dispatch<String> dispatch = 	                svc.createDispatch(portName, String.class, Service.Mode.PAYLOAD);		        // Get the request context	        Map<String, Object> requestContext = dispatch.getRequestContext();		        // Get the attachments (non-payload) that should also be sent.	        Map<String, DataHandler> attachmentMap = new HashMap();	        attachmentMap.put("javax.xml.ws.binding.attachments.outbound", myDataHandler);		        // Attach the attachments to the request context	        dispatch.getRequestContext().put("javax.xml.ws.binding.attachments.outbound", attachmentMap);		The "javax.xml.ws.binding.attachments.*" properties make it convenient to get/receive attachments.		Proposal:	----------		The proposal is to add the same kind of functionality to get/set SOAP Headers.  	For example:	        // Create Dispatch for the payload	        Dispatch<String> dispatch = 	                svc.createDispatch(portName, String.class, Service.Mode.PAYLOAD);		        // Get the request context	        Map<String, Object> requestContext = dispatch.getRequestContext();		        // Create a new outbound header	        Map<QName, List<String>> headerMap = new HashMap();		        List<String> myHeadersList = new ArrayList<String>();	        myHeadersList.add("<pre:sample xmlns:pre="http://sample">hello</pre:sample>";	        QName myHeaderQName = new QName("http://sample", "sample", "pre");		        headersMap.put(myHeaderQName, myHeadersList );		        // Attach the headers map to the request context	        dispatch.getRequestContext().put("jaxws.binding.soap.headers.outbound", headerMap);		Details:	--------		Proposed names:	  "jaxws.binding.soap.headers.outbound" and "jaxws.binding.soap.headers.inbound".  	This is similar naming convention as the existing attachment properties		Proposed value:	   Map<QName, List<String>>	     QName is the qname of the header(s)	     List<String> is a list of xml values (normally one) 	        String is the xml string for a single header.  	          (The object is a String.  Most JAXWS users will not be familiar with OM and may not want to build a SAAJ SOAPHeader).		Semantics for "jaxws.binding.soap.headers.outbound":	  Prior to the dispatch/proxy invocation:	       The customer sets the outbound map on the RequestContext.	  During the dispatch/proxy invocation:	       The outbound jaxws engine adds the headers to the message.		Semantics for "jaxws.binding.soap.headers.inbound"	  During the dispatch/proxy invocation:	       The engine will provide a map<QName, List<String>> on the ResponseContext.	  After the dispatch/proxy invocation:	       The customer accesses the inbound headers map from the ResponseContext.
365||Methods that throw multiple faults and are annotated with @Action annotation that defines multiple fault exception -> action mappings are not handled correctly. That is, the exception -> action mappings are not respected as specified in the annotation.
366||I was trying accessing an external webservice using service client as follows,		        ServiceClient serviceClient = new ServiceClient(null, new URL("http://www.webservicex.net/CurrencyConvertor.asmx?wsdl"), new QName("http://www.webserviceX.NET/","CurrencyConvertor"), "CurrencyConvertorSoap");	        StAXOMBuilder stAXOMBuilder = new StAXOMBuilder(new ByteArrayInputStream(	        "<ConversionRate><FromCurrency>USD</FromCurrency><ToCurrency>LKR</ToCurrency></ConversionRate>".getBytes()));	        OMElement omElement = serviceClient.sendReceive(	                new QName("http://www.webserviceX.NET/", "ConversionRate"), stAXOMBuilder.getDocumentElement());	        System.out.println(omElement.toString());		But this call was failing with the exception "System.Web.Services.Protocols.SoapException: Server did not recognize the value of HTTP Header SOAPAction: ."		The request sent by the client had the header SOAPAction: "" whereas the WSDL had <soap:operation soapAction="http://www.webserviceX.NET/ConversionRate" style="document"/>		debugging through I noticed the following lines in WSDL11ToAxisServiceBuilder (Line 2340)		                    if (isServerSide) {	                        axisBindingOperation.getAxisOperation().setSoapAction(soapActionURI);                       	                    }	                    else {	                        axisBindingOperation.getAxisOperation().setOutputAction(soapActionURI);	                    }		and CommonsHTTPTransportSender has the following in line 200		soapActionString = messageContext.getAxisOperation()	                            .getSoapAction();		Now this looks like a bug to me. Does anybody have a clue as to why we dont set the soapAction on the axisoperation when the axisService is on the client side?		Thanks,	Keith.
367||The way XMLFaultCode handles custom fault codes by modifying CUSTOM_SOAP11_ONLY enum value is just not thread safe. I think the XMLFaultCode should be turned into a class and each custom fault code would be a separate XMLFaultCode instance.
368||I am proposing the following patch as fix for followings.		(1) Deprecated PolicyInclude class and deprecated all its methods and changed them to use PolicySubject underlying for backward compatibility reasons. 		(2) Fixed ExternalPolicySerializer which serialized wsu:Id attribute of the Policy object as an unqualified attribute.		(3) Fixed Codegen to use the binding hierarchy when generating, instantiating stubs.
369||Background:	In SOAP 1.1, there are several pre-defined soap fault codes.  Users may also set their own custom fault codes.	In SOAP 1.2, there are several mandatory soap fault codes.  Users provide custom "sub" fault codes.		Problem:	The current JAXWS logic (XMLFault enum) does not respect the SOAP 1.1 custom fault codes.		Solution:	I am changing XMLFault to have a CUSTOM_SOAP11_ONLY value.  In this state, the enum also contains the name of the custom qname.  I am providing a unit test to verify.		Kudos:	Wendy Raschke and Lori Van Gulick found and diagnosed this problem.
370||Background:	WS-I defines a syntax for SWA attachment content ids.  The cid should be preceeded by the wsdl:part name.	http://www.ws-i.org/Profiles/AttachmentsProfile-1.0.html#Value-space_of_Content-Id_Header		Problem:	The SWA attachments and SWARef attachments produced and consumed by the JAXWS module should abide by WS-I rules.	If multiple attachments are passed to an endpoint, the partName information in the cid should be used to assign the attachment to the corresponding	field/parameter.	If the attachment names do not comply with WS-I, the code should fallback to the existing algorithm.
371||When an anonymous operation is used, the wsa action either has to be explicitly set on the message context or the default wsa outbound of the anonymous operation will be used. However, in certain when an anonymous operation is used, we can use the first body element of the outbound message to determine the real operation (if any) and use its outbound action value instead of the anonymous operation. This is necessary for JAX-WS Dispatch clients that use anonymous operations to send/receive messages but still might contain all the real operations since the Service class was built from wsdl or annotations.
372||In a service is deployed using  a WSDL 1.1 doc and if certain transports are dissables on that service the ?wsdl2 doc still shows endpoints for those inactive transports. The reason is that this has been fixed for WSDL 1.1 but the person who fixed it forgot to put that fix into ?wsdl2.
373||I am adding function to support MTOM attachment Threshold.  The implementation will involve reading the MTOM attachment threshold size and setting it on Messagecontext. During the attachment marshalling process this threshold value will be read and used to determine if the attachment needs to be send as inlined or optimized.
374||Lots of code in jaxws maven module relies on the TCCL to load classes specified via annotations. I will upload a sample wsdl/xsd that fails.
375||Background:	JAXBUtils is the utility class that loads and caches JAXBContext objects.  A two stage algorithm is used.  	First, a JAXBContext.newInstance(packageContext) is attempted with the list of input packages.  	Second, if the first initialization fails (i.e. due to missing ObjectFactory classes), then JAXBContext attempts to finds the JAXB related classes in the packages and constructs JAXBContext with the newInstance(Class[]) method.		Problem:	During this second (fallback) step in the algorithm, JAXBUtils is incorrectly trying to load classes in nested packages.  (For example, if the input package is "foo", the algorithm should only consider the classes in "foo", but instead it is also considering the classes in "foo.bar". ) This leads to failures.		Solution:	I am correcting the finder algorithm in JAXBUtils and ClassFinderImpl.
376||Array of strings (or other simple types) are serialized as xsd:list even though the method or parameter is not annotated with @XmlList.
377||From David Parsons:  "in RM I have to assume that an anon operation could be a user	defined operation.  As an anonOutIn operation is always added it triggers some extra RM logic which in some cases breaks our .NET interop scenario.  My suggestion was to prefix the operations with something so that I can check for these and decide whether they are user defined operations.  At the moment I check for operations prefixed with sandesha for example as I know these are RM defined operations.  I'm not too bothered what you rename them to as long as that limits a clash with any potential userdefined operations.  That way I can check for them in RM."		So, without spending a huge amount of time thinking about it, I simply added a prefix to the "static final" QNames defined in org.apache.axis2.client.ServiceClient.  The QName constructor will accept 'null' for the namespaceURI.		http://java.sun.com/j2ee/1.4/docs/api/javax/xml/namespace/QName.html#QName(java.lang.String,%20java.lang.String,%20java.lang.String)		So, is this an acceptable fix?  All of the tests passed in my environment, but I'm not convinced this is enough.  See patch_candidate01.txt
378||has the following code:	AsyncResponse.java does not restore the context classloader correctly. For example:		    protected void onError(Throwable flt, MessageContext mc, ClassLoader cl) {	        setThreadClassLoader(cl);	        onError(flt, mc);	        ClassLoader origClassLoader = (ClassLoader)AccessController.doPrivileged(new PrivilegedAction() {	            public Object run() {	                return Thread.currentThread().getContextClassLoader();	            }	        });	        setThreadClassLoader(origClassLoader);	    }		The origClassLoader is retrieved after new class loader is already set on the thread so really origClassLoader  == cl. The origClassLoader should be obtained before the first setThreadClassLoader(cl) call. Same problem applies to onCompleted() call.
379||All outbound handlers are getting invoked even though an inbound handler threw an exception or returned false from its handleMessage() method (on the server side).
380||I have an XSD which contains an element of type xs:boolean.  This element is called "redirect".  I use JAXB 2.1.6 to generate the java beans from the XSD.  		The methods for the "redirect" variable in the java bean are isRedirect and setRedirect. 		I created a web service with the method below: 		  public RetrieveConfigurationDataResponse retrieveConfigurationData(RetrieveConfigurationDataRequest req) { 	    RetrieveConfigurationDataResponse rsp = new RetrieveConfigurationDataResponse(); 	    rsp.setData("1234"); 	    rsp.setDataEncodingType(req.getDataEncodingType()); 	    rsp.setEchoData(req.getEchoData()); 	    rsp.setIdentifier(req.getIdentifier()); 	    rsp.setIdentifierType(req.getIdentifierType()); 	    rsp.setRedirect(Boolean.FALSE); 	    rsp.setResponseCode("00"); 	    rsp.setRevision(req.getRevision()); 	    return rsp; 	  } 		Both the (RetrieveConfigurationDataRequest  and RetrieveConfigurationDataResponse are JAXB generated java beans.  The RetrieveConfigurationDataResponse class is the one that contains this redirect variable.  I generated the client code and went on to test this method to the web service. 		I got the following AxisFault saying that it could not find the read method for "redirect". 		Exception in thread "main" org.apache.axis2.AxisFault: org.apache.axis2.AxisFault: can not find read method for : redirect 		at org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(Utils.java:486) 		at org.apache.axis2.description.OutInAxisOperationClient.handleResponse(OutInAxisOperation.java:343) 		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:389) 		at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:211) 		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:163) 		at com.traderoot.webservices.configurationdistribwebservice.ConfigurationDistribWebServiceStub.retrieveConfigurationData(ConfigurationDistribWebServiceStub.java:172) 		at Test.main(Test.java:23) 		To confirm my assumptions, I went into the JAXB code and changed the isRedirect method to getRedirect.  This fault did not occure. 		I do not consider this a workaround since JAXB classes are to be untouched.  It seems that AXIS2 is not looking for "is" methods when binding the java bean. 		This is an absoluate blocker and prevents us from being able to use AXIS2.
381||SoapMessageContext.getMessage() will always return a cached copy of the SOAPMessage even though the underlying message in org.apache.axis2.jaxws.core.MessageContext was changed (i.e. using messageCtx.getMEPContext().setMessage()). The SoapMessageContext must not cache the SOAPMessage or it should detect when the underlying Message changes.
382||REST GET invocations fail with httpLocations of the form foo/{name} when more than one parameter is present. There was a bug in the parameter extractor where it looked for the queryParameterSeparator as the next constant. But in this case it should have been looking for ? instead.
383||Problem:	For large applications, the JAXBContext (and Marshaller/Unmarshaller objects) can consume quite a bit of memory.  For this reason, JAXBUtils caches and releases these artifacts.  However, we have encountered situations where gc() still does not free up these large objects.		Solution:	I discovered several places in JAXBUtils and JAXBDSContext where WeakReference objects will allow gc() to reclaim memory.  I will commit these changes soon.
384||Phase.addHandler(HandlerDescription) has some issues when the handler description has the after attribute, and this behavior causes issues when the phaseLast is set to true.		Synapse faced a critical issue due to this [https://issues.apache.org/jira/browse/SYNAPSE-271] to which Deepal submitted the patch for the axis2 Phase class.		This issue is blocking us and there is no meaning of the after attribute and also the phaseLast attribute due to this issue.
385||When the classpath of a client application is setup to point to a network (e.g. \servernamesharedomain_classpath, for instance in a cluster of application servers), axis2 fails to engage modules on the classpath with an AxisFault with the message "Unable to engage module". The problem is located in the class org.apache.axis2.deployment.RepositoryListener in the method loadClassPathModules():		    protected void loadClassPathModules() {	        ModuleDeployer deployer = deploymentEngine.getModuleDeployer();		        // Find Modules on the class path (i.e. if classpath includes "addressing.mar" then	        // addressing will be available for engaging)		        ClassLoader loader = Thread.currentThread().getContextClassLoader();	        try {	            Enumeration moduleURLs = loader.getResources("META-INF/module.xml");	            while (moduleURLs.hasMoreElements()) {	                try {	                    URL url = (URL)moduleURLs.nextElement();	                    String fileName = url.toString();	                    if (fileName.startsWith("jar")) {	                        url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();	                        fileName = url.toString();	                         File f = new File(new URI(fileName));	                        addFileToDeploy(f, deployer ,WSInfo.TYPE_MODULE);	                    } else if (fileName.startsWith("file")) {	                        fileName = fileName.substring(0, fileName.lastIndexOf("/META-INF/module.xml"));	                        File f = new File(new URI(fileName));                                                         // *** IllegalArgumentException thrown here!	                        addFileToDeploy(f, deployer ,WSInfo.TYPE_MODULE);	                    } 		                } catch (URISyntaxException e) {	                    log.info(e);	                }	            }	        } catch (Exception e) {	            // Oh well, log the problem	            log.debug(e);	        }	// rest of method omitted.		The method finds all the module.xml files on the classpath and creates a File object for each of them. The use of the File class assumes that the classloader is not a network classloader. However, If the classpath is set up as mentioned above, the URI created will contain an authority part, and an IllegalArgumentException is thrown in the line marked *** above. To make things worse, the loop is terminated by the exception, which is debugged to a log (meaning it is lost in my system, and probably most others). 		Possible solutions:		As a minimum, error handling should be improved to make it easier to locate this problem when it happens.		The use of File instances to load the module.xml files should eliminated (replaced by InputStreams?) to make module loading robust to classloaders working over a network.
386||Generated ?wsdl2 docs do not contain httpLocation for HttpBinding hence codegen for httpBinding will not work. This is because the newly added endpoint populator did not add this attribute to the httpendpoint.
387||Generated ?wsdl2 docs are invalid when a service has more than 1 transport enabled. In this situation the ?wsdl2 has duplicate bindings having the same name which makes the wsdl invalid. The reason is because of a mistake made in the service builder.
388||When a return object of a service has an attribute containing all upper case characters, this attribute does not get included in response.		Eg: If my service returns following object,		Class Booking{	  public String getISBN(){...};	  public void setISBN(String isbn){...};		  public double getPrice(){...};	  public void setPrice(double price){...};	}		Attribute 'ISBN' will not be included in the response,
389||In the JAX-WS layer currently, instances of the UnmarshalInfo object are stored on AxisService objects the first time that a doc/lit/wrapped request is sent. The next time a request is sent to the same service, the UnmarshalInfo object is retrieved from the AxisService and a JAXBDSContext instance is created from the information in this object. I believe the storage of the UnmarshalInfo needs to be moved to the AxisOperation. Consider the scenario where an AxisService represents a web service with two methods. One of these methods uses doc/lit/wrapped style, but the other uses doc/lit/bare. Once a request is sent to the doc/lit/wrapped method, the UnmarshalInfo is stored on the AxisService. Subsequent calls to the doc/lit/bare method will fail because a JAXBDSContext will be created using the UnmarshalInfo for the doc/lit/wrapped method. Even though this only includes information about the packages, the constructed JAXBDSContext will not know what Java type the bare request parameters should be unmarshalled into, thus causing a JAXB UnmarshallException.
390||I invoke a service which has engaged Addressing with an invalid action (by a mistake) and I got this exception		java.lang.NullPointerException		at org.apache.axis2.handlers.addressing.AddressingInFaultHandler.invoke(AddressingInFaultHandler.java:96)		at org.apache.axis2.engine.Phase.invoke(Phase.java:295)		at org.apache.axis2.engine.AxisEngine.invoke(AxisEngine.java:264)		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:163)		at org.apache.axis2.description.OutInAxisOperationClient.handleResponse(OutInAxisOperation.java:363)		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:416)		at org.apache.axis2.description.OutInAxisOperationClient$NonBlockingInvocationWorker.run(OutInAxisOperation.java:441)		at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1061)		at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)		at java.lang.Thread.run(Thread.java:595)		this exception happens at here.	faultLocalName = subCode.getValue().getTextAsQName().getLocalPart();		Then I look at the soap fault.	<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">	      <soapenv:Header xmlns:wsa="http://www.w3.org/2005/08/addressing">	         <wsa:Action>http://www.w3.org/2005/08/addressing/fault</wsa:Action>	         <wsa:RelatesTo>urn:uuid:6C771F78868CBF931B1208441597970</wsa:RelatesTo>	      </soapenv:Header>	      <soapenv:Body>	         <soapenv:Fault>	            <soapenv:Code>	               <soapenv:Value>soapenv:Sender</soapenv:Value>	               <soapenv:Subcode>	                  <soapenv:Value>wsa:ActionNotSupported</soapenv:Value>	               </soapenv:Subcode>	            </soapenv:Code>	            <soapenv:Reason>	               <soapenv:Text xml:lang="en-US">The [action] cannot be processed at the receiver.</soapenv:Text>	            </soapenv:Reason>	            <soapenv:Detail>	               <wsa:ProblemAction xmlns:wsa="http://www.w3.org/2005/08/addressing">	                  <wsa:Action>urn:PlainTestInOutOperation1</wsa:Action>	               </wsa:ProblemAction>	            </soapenv:Detail>	         </soapenv:Fault>	      </soapenv:Body>	   </soapenv:Envelope>		if we look at this line 	<soapenv:Value>wsa:ActionNotSupported</soapenv:Value>	the prefix wsa  is not declared. 		I think this means Axiom does not serialize soap envelop properly when there a TextQNames.
391||@HandlerChain annotation refers to a file defined by the schema:		http://java.sun.com/xml/ns/javaee/javaee_web_services_1_2.xsd		In this schema, there is a regular expression defined for pattern matching the service-name-pattern and port-name-pattern.  The reg ex is:		*|([i-[:]][c-[:]]*:)?[i-[:]][c-[:]]**?		We should be using this pattern to validate the pattern defined in service-name-pattern and port-name-pattern in:		org.apache.axis2.jaxws.spi.handler.BaseHandlerResolver.doesPatternMatch		Then use a StringTokenizer split on ':' then '*' to perform the matching algorithm.
392||WSDL portAddress is filled with one of the machine's IP addresses. The code to get the IP address seems to be org.apache.axis2.transport.http.sever.HTTPUtils.getIpAddress() which always takes the first available network interface's ip address. 		For example http://localhost:8080/axis2/services/Version?wsdl returns a WSDL containing 	... 	<wsdl:service name="Version"> 		<wsdl:port name="VersionHttpSoap11Endpoint" binding="ns:VersionSoap11Binding"> 	<soap:address location="http://10.20.125.14:8080/axis2/services/Version.VersionHttpSoap11Endpoint"/> 	</wsdl:port> 		<wsdl:port name="VersionHttpSoap12Endpoint" binding="ns:VersionSoap12Binding"> 	<soap12:address location="http://10.20.125.14:8080/axis2/services/Version.VersionHttpSoap12Endpoint"/> 	</wsdl:port> 		<wsdl:port name="VersionHttpEndpoint" binding="ns:VersionHttpBinding"> 	<http:address location="http://10.20.125.14:8080/axis2/services/Version.VersionHttpEndpoint"/> 	</wsdl:port> 	</wsdl:service> 	... 		This may not work on machines which have vmvare installed, or machines having multiple network interfaces or just a laptop which has wireless and wired lan. 		I think the correct way is to use the hostName instead of the ipAddress in the WSDL port address, for example 	... 	<wsdl:service name="Version"> 		<wsdl:port name="VersionHttpSoap11Endpoint" binding="ns:VersionSoap11Binding"> 	<soap:address location="http://myhostname.company.com:8080/axis2/services/Version.VersionHttpSoap11Endpoint"/> 	</wsdl:port> 		<wsdl:port name="VersionHttpSoap12Endpoint" binding="ns:VersionSoap12Binding"> 	<soap12:address location="http://myhostname.company.com:8080/axis2/services/Version.VersionHttpSoap12Endpoint"/> 	</wsdl:port> 		<wsdl:port name="VersionHttpEndpoint" binding="ns:VersionHttpBinding"> 	<http:address location="http://myhostname.company.com:8080/axis2/services/Version.VersionHttpEndpoint"/> 	</wsdl:port> 	</wsdl:service> 	... 		Regards, Dietmar
393||It is possible that a single implementation class, represented by a DescriptionBuilderComposite on the server-side, could serve multiple ports. As such, it would be nice to factor out port-specific information and store it on a different object. This will allow server-side description hierarchies to be built containing more than one EndpointDescription per ServiceDescription.
394||Currently DocLitWrappedMethodMarshaller can do unmarshalling fast by regisntering UnmarshallInfo. This issue is opened to do the same optimization in DocLitBareMethodMarshaller
395||Hi!		I my client I use 		            serviceClient.sendReceiveNonBlocking( doc, callback );		with a custom callback when invoking a service.			I have noticed that when receiving a SoapFault :		AxisCallback.onFault( )		is never called - but instead 		AxisCallback.onError( )		is called -  even if I have 		clientOptions.setExceptionToBeThrownOnSOAPFault( false );			Is this correct behavior ?		/hans
396||The SAAJ implementation classes do not override the appendChild(org.w3c.dom.Node) method and instead rely on the default implementation of appendChild() method from org.apache.axiom.om.impl.dom.NodeImpl. The appendChild() in org.apache.axiom.om.impl.dom.NodeImpl just throws HIERARCHY_REQUEST_ERR exception as shown below: 		org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted.	at org.apache.axiom.om.impl.dom.NodeImpl.insertBefore(NodeImpl.java:259)	at org.apache.axiom.om.impl.dom.NodeImpl.appendChild(NodeImpl.java:238)	at com.sun.org.apache.xalan.internal.xsltc.trax.SAX2DOM.startElement(SAX2DOM.java:150)	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.closeStartTag(ToXMLSAXHandler.java:205)	at com.sun.org.apache.xml.internal.serializer.ToSAXHandler.flushPending(ToSAXHandler.java:291)	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.startElement(ToXMLSAXHandler.java:646)	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.startElement(ToXMLSAXHandler.java:501)	at com.sun.org.apache.xalan.internal.xsltc.trax.DOM2TO.parse(DOM2TO.java:138)	at com.sun.org.apache.xalan.internal.xsltc.trax.DOM2TO.parse(DOM2TO.java:215)	at com.sun.org.apache.xalan.internal.xsltc.trax.DOM2TO.parse(DOM2TO.java:121)	at com.sun.org.apache.xalan.internal.xsltc.trax.DOM2TO.parse(DOM2TO.java:85)	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transformIdentity(TransformerImpl.java:615)	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:661)		The SAAJ classes should override the appendChild() method and handle it appropriately.
397||i'm trying to use javax.activation.DataSource in a Rest web services in Geronimo 2.1 but it seems that axis2 can't create the Datasource to invoke the Web service.		Here is the Webservice impl:	@WebServiceProvider	@BindingType(value = HTTPBinding.HTTP_BINDING)	@ServiceMode(value = javax.xml.ws.Service.Mode.MESSAGE)	public class DonateRestWS implements Provider<DataSource> {			public DataSource invoke(DataSource source) {			DataSource json = new FileDataSource("c:\setupisam.log");//new JsonDataSource();		return json;	}	}		and here is the error:	09:48:38,158 ERROR [Axis2WebServiceContainer] Exception occurred while trying to invoke service method doService()	org.apache.axis2.AxisFault: The creation of the javax.activation.DataSource provider instance failed. 		at org.apache.axis2.AxisFault.makeFault(AxisFault.java:417)		at org.apache.axis2.jaxws.server.JAXWSMessageReceiver.receive(JAXWSMessageReceiver.java:166)		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:145)		at org.apache.axis2.transport.http.util.RESTUtil.invokeAxisEngine(RESTUtil.java:125)		at org.apache.axis2.transport.http.util.RESTUtil.processURLRequest(RESTUtil.java:119)		at org.apache.geronimo.axis2.pojo.POJOWebServiceContainer.processURLRequest(POJOWebServiceContainer.java:165)		at org.apache.geronimo.axis2.Axis2WebServiceContainer.processGETRequest(Axis2WebServiceContainer.java:331)		at org.apache.geronimo.axis2.Axis2WebServiceContainer.doService2(Axis2WebServiceContainer.java:264)		at org.apache.geronimo.axis2.Axis2WebServiceContainer.doService(Axis2WebServiceContainer.java:205)		at org.apache.geronimo.axis2.Axis2WebServiceContainer.invoke(Axis2WebServiceContainer.java:168)		at org.apache.geronimo.webservices.WebServiceContainerInvoker.service(WebServiceContainerInvoker.java:84)		at org.apache.geronimo.webservices.POJOWebServiceServlet.service(POJOWebServiceServlet.java:79)		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)		at org.apache.geronimo.tomcat.valve.DefaultSubjectValve.invoke(DefaultSubjectValve.java:56)		at org.apache.geronimo.tomcat.GeronimoStandardContext$SystemMethodValve.invoke(GeronimoStandardContext.java:406)		at org.apache.geronimo.tomcat.valve.GeronimoBeforeAfterValve.invoke(GeronimoBeforeAfterValve.java:47)		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)		at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:563)		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263)		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584)		at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)		at java.lang.Thread.run(Thread.java:810)	Caused by: 	javax.xml.ws.WebServiceException: The creation of the javax.activation.DataSource provider instance failed. 		at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:172)		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:69)		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:117)		at org.apache.axis2.jaxws.server.dispatcher.ProviderDispatcher.getProviderInstance(ProviderDispatcher.java:334)		at org.apache.axis2.jaxws.server.dispatcher.ProviderDispatcher.invoke(ProviderDispatcher.java:93)		at org.apache.axis2.jaxws.server.EndpointController.invoke(EndpointController.java:172)		at org.apache.axis2.jaxws.server.JAXWSMessageReceiver.receive(JAXWSMessageReceiver.java:113)		... 26 more
398||JAXBContext and other related objects (Marshallers, Unmarshallers) are referenced via WeakReferences.	When garbage collection occurs, these objects are released.		For performance reasons, these WeakReferences should be changed to SoftReferences.		The rationale is that these objects are expensive to recreate, so making them SoftReferences will ensure that they are only reclaimed in low memory situations.		David Strite (IBM Performance team) is suggesting this change based on his testing of the Axis2 code.
399||When trying to import a file with relative path Axis2 is treating META-INF directory as ./ and not the directory of the file the import node is in.		EXAMPLE:	META-INF/	  -some.wsdl	  xsd/	    -first.xsd	    xsd2/	      -second.xsd		If we are going to import first.xsd in some.wsdl using relative path xsd/first.xsd it is ok. But when first.xsd is trying to import second.xsd using relative path xsd2/second.xsd there is going to be a NPE thrown:		[INFO] AARFileBasedURIResolver: Unable to resolveMETA-INF/xsd2/second.xsd	[ERROR] java.lang.NullPointerException	java.lang.RuntimeException: java.lang.NullPointerException	        at org.apache.ws.commons.schema.SchemaBuilder.resolveXmlSchema(SchemaBui	lder.java:1886)	        at org.apache.ws.commons.schema.SchemaBuilder.resolveXmlSchema(SchemaBui	lder.java:1902)	        at org.apache.ws.commons.schema.SchemaBuilder.handleImport(SchemaBuilder	.java:1627)	        at org.apache.ws.commons.schema.SchemaBuilder.handleXmlSchemaElement(Sch	emaBuilder.java:175)	        at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollec	tion.java:347)	        at org.apache.axis2.description.WSDLToAxisServiceBuilder.getXMLSchema(WS	DLToAxisServiceBuilder.java:140)	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.copyExtensibl	eElements(WSDL11ToAxisServiceBuilder.java:2186)	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.processTypes(	WSDL11ToAxisServiceBuilder.java:306)	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.processTypes(	WSDL11ToAxisServiceBuilder.java:297)	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateServi	ce(WSDL11ToAxisServiceBuilder.java:265)	        at org.apache.axis2.description.WSDL11ToAllAxisServicesBuilder.populateA	llServices(WSDL11ToAllAxisServicesBuilder.java:109)	        at org.apache.axis2.deployment.repository.util.ArchiveReader.processWSDL	File(ArchiveReader.java:230)	        at org.apache.axis2.deployment.repository.util.ArchiveReader.processWSDL	s(ArchiveReader.java:332)	        at org.apache.axis2.deployment.ServiceDeployer.deploy(ServiceDeployer.ja	va:64)	        at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy	(DeploymentFileData.java:137)	        at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngin	e.java:571)	        at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoL	ist.java:141)	        at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListe	ner.java:318)	        at org.apache.axis2.deployment.RepositoryListener.checkServices(Reposito	ryListener.java:220)	        at org.apache.axis2.deployment.DeploymentEngine.loadServices(DeploymentE	ngine.java:118)	        at org.apache.axis2.deployment.WarBasedAxisConfigurator.loadServices(War	BasedAxisConfigurator.java:272)	        at org.apache.axis2.context.ConfigurationContextFactory.createConfigurat	ionContext(ConfigurationContextFactory.java:78)	        at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisSer	vlet.java:500)	        at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:420	)	        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.	java:1161)	        at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:98	1)	        at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContex	t.java:4045)	        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4	351)	        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase	.java:791)	        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:77	1)	        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)		        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:825)		        at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:714	)	        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490	)	        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138)	        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java	:311)	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(Lifecycl	eSupport.java:117)	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)		        at org.apache.catalina.core.StandardHost.start(StandardHost.java:719)	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)		        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443	)	        at org.apache.catalina.core.StandardService.start(StandardService.java:5	16)	        at org.apache.catalina.core.StandardServer.start(StandardServer.java:710	)	        at org.apache.catalina.startup.Catalina.start(Catalina.java:566)	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.	java:39)	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces	sorImpl.java:25)	        at java.lang.reflect.Method.invoke(Method.java:585)	        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)	        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)	Caused by: java.lang.NullPointerException	        at org.apache.ws.commons.schema.SchemaBuilder.resolveXmlSchema(SchemaBui	lder.java:1875)	        at org.apache.ws.commons.schema.SchemaBuilder.resolveXmlSchema(SchemaBui	lder.java:1902)	        at org.apache.ws.commons.schema.SchemaBuilder.handleImport(SchemaBuilder	.java:1627)	        at org.apache.ws.commons.schema.SchemaBuilder.handleXmlSchemaElement(Sch	emaBuilder.java:175)	        at org.apache.ws.commons.schema.SchemaBuilder.build(SchemaBuilder.java:8	2)	        at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollec	tion.java:359)	        at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollec	tion.java:304)	        at org.apache.ws.commons.schema.SchemaBuilder.resolveXmlSchema(SchemaBui	lder.java:1884)	        ... 49 more		There were similar issues before:	AXIS2-550	AXIS2-1993	AXIS2-1889		I am not sure if they are related though.
400||If we use http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl, build a AxisService and get the generated WSDL The parameter orders of the messages et screwed. This occurs because we have used an incorrect method in WSDL4J . The method we have used returns a Map but there is a mechanism to get a List. If we used this method instead the problem gets fixed.
401||The static timeout parameter of the axis2.xml configuration file are not handled properly in CommonsHTTPTransportSender. They are initialized properly in the init() method, but are not used at all when sending a message.
402||Hit the following AccessControlExceptions when installing the axis2 1.4 ear with java2security enabled:		java.security.AccessControlException: Access denied (java.util.PropertyPermission Axis2.prohibitDebugLogging read)		at java.security.AccessController.checkPermission(AccessController.java:108)		at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)		at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:210)		at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1285)		at java.lang.System.getProperty(System.java:378)		at java.lang.System.getProperty(System.java:362)		at org.apache.axis2.util.LoggingControl.<clinit>(LoggingControl.java:43)		at java.lang.J9VMInternals.initializeImpl(Native Method)		at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)		at org.apache.axis2.handlers.addressing.AddressingInHandler.init(AddressingInHandler.java:68)		at org.apache.axis2.deployment.util.Utils.addFlowHandlers(Utils.java:133)	.........................		java.security.AccessControlException: Access denied (java.io.FilePermission C:pyxisWebSphereAppServerprofilesAppSrv01installedAppsbulbrichtNode01Cellaxis2.earaxis2.warWEB-INFscriptServices read)		at java.security.AccessController.checkPermission(AccessController.java:108)		at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)		at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:210)		at java.lang.SecurityManager.checkRead(SecurityManager.java:871)		at java.io.File.list(File.java:971)		at java.io.File.listFiles(File.java:1051)		at org.apache.axis2.scripting.ScriptRepositoryListener.findServicesInDirectory(ScriptRepositoryListener.java:43)	..............................		java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThreadGroup)		at java.security.AccessController.checkPermission(AccessController.java:108)		at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)		at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:210)		at com.ibm.ws.security.core.SecurityManager.checkAccess(SecurityManager.java:351)		at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:225)		at java.lang.Thread.initialize(Thread.java:331)		at java.lang.Thread.<init>(Thread.java:267)		at java.lang.Thread.<init>(Thread.java:91)		at java.util.Timer$TimerImpl.<init>(Unknown Source)		at java.util.Timer.<init>(Unknown Source)		at org.apache.axis2.deployment.scheduler.Scheduler.<init>(Scheduler.java:28)
403||I have a pojo with "void" methods. Then I create a wsdl from it. I have attached both the POJO and the wsdl. It has in/out messages for the void method. The real problem comes when I use WSDL2Java and code generate client stubs using it. It throws an AxisFault saying "The input stream for an incoming message is null". I will attach the POJO and the wsdl
404||Scenario:	User intermingles JAXB and non-JAXB classes in a single package.  (This is not a good practice, but it does happen.)	The JAXWS engine attempts to create a JAXBContext from a list of packages.  If one or more of the packages do not contain an ObjectFactory, then 	the code falls back to a loading all of the classes in the packages.	Since some of the packages are non-JAXB classes, the JAXBContext construction fails...and the webservice fails.		Solution:	Change the fall back approach.  	Instead of constructing a JAXBContext with all of the classes (and failing), find the best set of classes.		I am working on the code and a validating unit test.
405||This also applies to NonNegativeInteger, PositiveInteger, NonPositiveInteger.java.		writeReplace() should be deprecated since it  is a workaround for http://developer.java.sun.com/developer/bugParade/bugs/4378370.html    which has been fixed since Java 1.4.		By deprecating it now,  we can delete it in the future and also delete the inner class -  BigIntegerRep.
406||Setting the "httpFrontendHostUrl" parameter in the "axis2.conf" config file does not affect endpoint URL in auto-generated WSDL.
407||I have a JavaBean that I was trying to pass though web-services.	here is a java classes:		class A implements Serializable {		private static final long serialVersionUID = -3124131057978320628L;		private Integer loadDeletedItems = 0;			public Integer getLoadDeletedItems() {			return loadDeletedItems;		}			public void setLoadDeletedItems(Integer loadDeletedItems) {			this.loadDeletedItems = loadDeletedItems;		}	}		class B extends A {		      private Integer index = 0;		       .... // getter/setter of index field		}		If I pass instance of class "A" it works fine. But if I pass instance of class B I get an NPE at org.apache.axis2.databinding.utils.BeanUtil.getPullParser(BeanUtil.java:137).	More over, It worked in AXIS2 - 1.3 but does not work in AXIS2-1.4.
408||Extracting initTransport() method allows more accurate subclassing
409||If a service is deployed using WSDL 2.0  the genarated ?wsdl2 does not show the endpoints
410||For some sequences containing structs and/or structs containing sequences there is a wrong WSDL generated (at least the generated Axis2 Java Stubs produce an XML that results in a wrong Corba call). At runtime this results in the Orb complaining about NULL elements being marshalled.		To reproduce: Take the sample from http://wso2.org/library/2807 and include these IDL definitions:		   struct B {		     string s;	     };		     struct A {		     sequence<B> Bseq;		     string x;	     };		     typedef sequence<A>  Aseq; 		    interface MyCorbaService 	    { 			 void testSeq(in Aseq pAs);		this results in the WSDL snipped below. The representation for string x should be outside of the xs:sequence.				<xs:element name="testSeq">		<xs:complexType>			<xs:sequence>					<xs:element name="pAs" nillable="true" type="ns:Aseq"/>			</xs:sequence>		</xs:complexType>	</xs:element>	<xs:element name="Aseq" type="ns:Aseq"/>	<xs:complexType name="Aseq">		<xs:sequence>			<xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="ns:A"/>		</xs:sequence>	</xs:complexType>	<xs:element name="A" type="ns:A"/>	<xs:complexType name="A">		<xs:sequence>			<xs:element maxOccurs="unbounded" minOccurs="0" name="Bseq" nillable="true" type="ns:B"/>			<xs:element name="x" nillable="true" type="xs:string"/>		</xs:sequence>	</xs:complexType>	<xs:element name="B" type="ns:B"/>		<xs:complexType name="B">		<xs:sequence>			<xs:element name="s" nillable="true" type="xs:string"/>		</xs:sequence>	</xs:complexType>			For this Test Client Code:		        MycorbaserverStub.TestSeq ts = new MycorbaserverStub.TestSeq();		        MycorbaserverStub.B b = new MycorbaserverStub.B();	        b.setS("hello");		        MycorbaserverStub.A a = new MycorbaserverStub.A();	        a.addBseq(b);	        a.setX("x");		        MycorbaserverStub.Aseq as = new MycorbaserverStub.Aseq();	        as.addItem(a);		        ts.setPAs(as);			        stub.testSeq(ts);		Using JacORB you see 	[INFO] org.omg.CORBA.MARSHAL: Cannot marshall null string.  vmcid: 0x0  minor code: 0  completed: No		The XML on the wire is		<?xml version='1.0' encoding='UTF-8'?>	<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">		<soapenv:Body>			<ns1:testSeq xmlns:ns1="http://corba2ws/xsd">				<ns1:pAs>					<ns1:item>						<ns1:Bseq>							<ns1:s>hello</ns1:s>						</ns1:Bseq>						<ns1:x>x</ns1:x>					</ns1:item>				</ns1:pAs>			</ns1:testSeq>		</soapenv:Body>	</soapenv:Envelope>
411||Axis2 should set the default namespace property on the JAXBContext when creating JAXBContext from individual classes. The default namespace property should be set to the SEI @WebService.targetNamespace value. 		In certain cases and without setting this property, the jaxb classes might be serialized without the right namespace as demonstrated by the modules/jaxws-integration/test/org/apache/axis2/jaxws/type_substitution test case. Even though the jaxb classes have no annotations to set the namespace for them, they should be serialized with the namespace defined by the @WebService annotation. That's the expected behavior.
412||With Axis1.3 I can generate code with an ant task for wsdl2java , from an wsdl file  	that contains an schema with targetNamespace="" (to describe the namespaceless xml I get in a RESTful service).  		With Axis1.4 I can no longer generate it.  		There's an exception originating at :  	   [java] Caused by: java.lang.NullPointerException 	     [java] at org.apache.axis2.schema.SchemaCompiler.isComponetExists(SchemaCompiler.java:2723) 	     [java] at org.apache.axis2.schema.SchemaCompiler.getParentSchemaFromIncludes(SchemaCompiler.java:2670) 	     [java] at org.apache.axis2.schema.SchemaCompiler.getParentSchema(SchemaCompiler.java:2644) 		This is apparently because of commit  	http://svn.apache.org/viewvc?view=rev&revision=627710 	Revision 627710 	Jump to revision: 	Previous Next 	Author: 	amilas 	Date: 	Thu Feb 14 11:30:40 2008 UTC (3 months, 3 weeks ago) 	Log Message: 	when resolving schemas target namespaces must be matched 		Aparently the namespace from the schema is null.  	Maybe it should be "" or maybe the added condition should accept both namespaces being null. 		I'm not sure what else has changed from Axis2 1.3 to 1.4 and whether fixing this would introduce  	some other error with empty namespaces, but it seems a regression, hopefully easy to fix. I'm sorry  	I can't try to fix it now.  		(the function name is misspelt, it lacks an n before the last t of "component", btw, but that's irrelevant).
413||Hi!		I think I see a leak when using ServiceClient.		In my client I intialize the ConfigurationContext once and resuse it to initialize the ServiceClient :		            ServiceClient sender = new ServiceClient(configContext,null);		Calling 'cleanup()' on the ServiceClinet explicitly after the service call does not help..		I will supply a small testcase.		/hans
414||I am adding a small utility to compare java.awt.image objects. The Utility will be mostly used to verify test cases that send and receive MTOM attachments as Image Object, the idea is to have ability to compare two images to see the validity of Image Objects.
415||We have been regularly experiencing the following problem when trying to call an axis 2 webservice:		Stack Dump = java.util.zip.ZipException: Too many open files D:ibmprofilesAppSrv02....xercesImpl-2.8.1.jar		at java.util.zip.ZipFile.open(Native Method)		at java.util.zip.ZipFile.<init>(ZipFile.java:238)		at java.util.zip.ZipFile.<init>(ZipFile.java:268)		at com.ibm.ws.classloader.SinglePathClassProvider$3.run(SinglePathClassProvider.java:405)		at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:63)		at com.ibm.ws.classloader.SinglePathClassProvider.getResource(SinglePathClassProvider.java:379)		at com.ibm.ws.classloader.SinglePathClassProvider.getResourceAsStream(SinglePathClassProvider.java:474)		at com.ibm.ws.classloader.CompoundClassLoader.localGetResourceAsStream(CompoundClassLoader.java:955)		at com.ibm.ws.classloader.CompoundClassLoader.getResourceAsStream(CompoundClassLoader.java:916)		at com.ibm.ws.classloader.CompoundClassLoader.getResourceAsStream(CompoundClassLoader.java:913)		at javax.xml.parsers.SecuritySupport12$4.run(Unknown Source)		at java.security.AccessController.doPrivileged(AccessController.java:192)		at javax.xml.parsers.SecuritySupport12.getResourceAsStream(Unknown Source)		at javax.xml.parsers.FactoryFinder.findJarServiceProvider(Unknown Source)		at javax.xml.parsers.FactoryFinder.find(Unknown Source)		at javax.xml.parsers.DocumentBuilderFactory.newInstance(Unknown Source)		at org.apache.rampart.util.Axis2Util.getDocumentFromSOAPEnvelope(Axis2Util.java:151)		at org.apache.rampart.handler.WSDoAllSender.processBasic(WSDoAllSender.java:194)		at org.apache.rampart.handler.WSDoAllSender.processMessage(WSDoAllSender.java:64)		at org.apache.rampart.handler.WSDoAllHandler.invoke(WSDoAllHandler.java:72)		at org.apache.axis2.engine.Phase.invoke(Phase.java:292)		at org.apache.axis2.engine.AxisEngine.invoke(AxisEngine.java:212)		at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:377)		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:374)		at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:211)		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:163)			On closer inspection of the server we noticed that there are a great number of files in the Windows/Temp directory with names such as C:WINDOWSTemp_axis2axis21568addressing-1.3.mar,	C:WINDOWSTemp_axis2axis21574soapmonitor-1.3.mar,	C:WINDOWSTemp_axis2axis21579rampart-1.3.mar,	C:WINDOWSTemp_axis2axis21577ping-1.3.mar etc.		The main concern (other than disk space is gradually being taken up) is that all these files still have open file handles. This is a major problem for us as each time a call is made to a webservice more of these files eventually resulting in the application failing due to "too many open files" error.
416||Steps:	Edit axis2-1.4/samples/userguide/src/userguide/example1/MyService.java and make it look like shown below:		package userguide.example1;	import org.apache.axiom.om.OMElement;		import org.apache.axis2.AxisFault;			import javax.xml.stream.XMLStreamException;					public class MyService {		    public OMElement echo(OMElement element) throws XMLStreamException {	        return org.apache.axiom.om.OMAbstractFactory.getSOAP11Factory().getDefaultFaultEnvelope().getBody().getFirstElement();		    }				    public void ping(OMElement element) throws XMLStreamException {		        //Do some processing		    }		    public void pingF(OMElement element) throws AxisFault{		        throw new AxisFault("Fault being thrown");		    }		}		Invoking the echo service now returns:	HTTP/1.1 200 OK		Server: Apache-Coyote/1.1		Content-Type: text/xml;charset=UTF-8		Transfer-Encoding: chunked		Date: Thu, 03 Jul 2008 08:42:40 GMT				fd		<?xml version='1.0' encoding='UTF-8'?>	   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">	      <soapenv:Body>	         <soapenv:Fault>	            <faultcode></faultcode>	            <faultstring></faultstring>	            <detail />	         </soapenv:Fault>	      </soapenv:Body>	   </soapenv:Envelope>	0
417||The string concatenation at org.apache.axis2.description.AxisService2WSDL11#addPolicyAsExtAttribute is faulty.	What it does is: 					String value = null;				for (Iterator iterator = policyURIs.iterator(); iterator.hasNext();) {					String uri = (String) iterator.next();					value = (value == null) ? uri : " " + uri;				}		which is clearly wrong.
418||I have a schema that uses a complex type with mixed content:		<xs:element name="description">	  <xs:complexType mixed="true"/>	</xs:element>		However, ADB doesn't support this, and the error is manifested at run-time as:		org.apache.axis2.AxisFault: org.apache.axis2.databinding.ADBException: Unexpected subelement node
419||org.apache.axis2.AxisFault: Namespace URI may not be null	 at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430)	 at vivisimo.Stub.fromOM(Stub.java:46095)	 at vivisimo.Stub.Simple(Stub.java:194)	 at Main.main(Main.java:75)	Caused by: java.lang.IllegalArgumentException: Namespace URI may not be null	 at org.apache.axiom.om.impl.dom.NamespaceImpl.<init>(NamespaceImpl.java:32)	 at org.apache.axiom.om.impl.dom.NamespaceImpl.<init>(NamespaceImpl.java:38)	 at vivisimo.Stub$Document_type0$Factory.parse(Stub.java:40060)	 at vivisimo.Stub$List_type0$Factory.parse(Stub.java:23215)	 at vivisimo.Stub$Vce$Factory.parse(Stub.java:2113)	 at vivisimo.Stub.fromOM(Stub.java:46089) 		Looking at the code, it comes from this section: 		// now run through all any or extra attributes	// which were not reflected until now	for (int i=0; i < reader.getAttributeCount(); i++) {	 if (!handledAttributes.contains(reader.getAttributeLocalName(i))) {	   // this is an anyAttribute and we create	   // an OMAttribute for this		   org.apache.axiom.om.impl.llom.OMAttributeImpl attr =	     new org.apache.axiom.om.impl.llom.OMAttributeImpl(	       reader.getAttributeLocalName(i),	       new org.apache.axiom.om.impl.dom.NamespaceImpl(	         reader.getAttributeNamespace(i), reader.getAttributePrefix(i)),	       reader.getAttributeValue(i),	       org.apache.axiom.om.OMAbstractFactory.getOMFactory());		The node that is causing the failure is:		<vce xmlns="urn:/vivisimo/velocity">	<list path="" num="118" level="0" start="0" per="10">	<document url="http://blogs.usatoday.com/popcandy/2008/07/pop-forum-tal-2.html" rank="0" source="USAToday" score="0.111111" context="v%3astate=%28root%29%7croot&amp;v%3aframe=tree&amp;subquery=id%3aNdoc1.30&amp;active%3d=root&amp;v%3asubsearch=1&amp;" />	</list>	</vce>		The problematic attribute is @context, which is not defined in my XSD.		In all, I think there are 2 problems:		1/ I don't actually have an anyAttribute in my schema, so I would have expected to see an error similar to the "unexpected subelement" error.	2/ I don't think that this should cause my program to generate an exception in this manner. According to the spec:		"The namespace name for an unprefixed attribute name always has no value." [1] 		On further reading of the spec, I think that this sentence makes it more clear what should happen:		"Default namespace declarations do not apply directly to attribute names; the interpretation of unprefixed attributes is determined by the element on which they appear"		That is, the code should be something like:		if (namespace uri of attribute == null)	  use namespace uri of containing element 		[1] http://www.w3.org/TR/xml-names/#defaulting
420||There is a potential for a StackOverFlowError in the AxisServlet's init() methods. Since the init() potentially calls init(ServletConfig), depending on the underlying Servlet implementation utilized, this could cause issues. A simple flag can be set in the init(ServletConfig) method to indicate it has already been called on a specific AxisServlet instance. If it has been called, the init() method should not need to call it yet again.
421||AxisService2WSDL11 serializes a policy reference attached on the message (in or out message) at the input (respectively output) of the wsdl operation in the portType definition. This essentially happens in the generatePortType method that is calling 		addPolicyAsExtElement(inaxisMessage, input) 		(respectively 		addPolicyAsExtElement(outAxisMessage, output)		 for the output). On the other hand the WSDL11ToAxisServiceBuilder expects to find the eventual policy at the message declaration in the wsdl definition. Examining the		WSDL11ToAxisServiceBuilder #populateOperations		 when calling 		copyExtensibleElements		 for the respective message the builder passes 		message.getExtensibilityElements()		 instead of for example 		wsdl4jInputMessage.getExtensibilityElements()		(which would get the policy reference from the Input rather than from the message declaration.) As a result the message level policy is not read from the wsdl generated by the same engine.	I'm not sure which is the right place for the message policy (probably both are right) or whether there is a recommendation about this but it would be nice to have the policy reference deserialized from and serialized at the same place - for example at the message declaration. I'll attach a patch if you like the proposal...
422||Requests coming through the old EPR should be dispatched to an appropriate binding. In the we cannot dispatch it to a binding, an fault must be thrown.
423||Updated a method in BindingProvider.java in jaxws client side to return an object type instead of casting the object to a String type.	This was done to accommodate applications that may return maintain session value as any object type other than String.		Prior code:	-----------	    .....	    String sessionValue = null;	    .....	    sessionValue = (String)properties.get(sessionKey);	    .....	    requestContext.put(HTTPConstants.COOKIE_STRING, sessionValue);		Current changes:	-----------------------	    .....	    Object sessionValue = null;	    .....	    sessionValue = properties.get(sessionKey);	    .....	    requestContext.put(HTTPConstants.COOKIE_STRING, sessionValue);
424||Hi!		I found out that the rfc2822 [1] required mime headers :		From:	Date:		are missing from mails generated by Axis2 mailtransport.			'wire' debugging in Java mail can be enabled by addeing :		        <parameter name="mail.debug">true</parameter>		to the transportSender.			/hans			[1] http://www.ietf.org/rfc/rfc2822.txt
425||Binding level policies not picked up when dynamic service client is used
426||(1) This seems conceptually wrong to me. The kernel ought not have any dependencies on a transport specific libraries 	(2) A more practical reason: it is just a matter of time HttpClient 3.1 will be superceded by HttpClient 4.0 and support for commons HttpClient will be discontinued.  		If there is an agreement this is indeed an issue, which should be resolved, I will happily invest time looking into what it takes to decouple HttpClient from Axis2 kernel. 		Oleg
427||This is a jaxws CTS compliance issue.  Client-side outbound handler throws exception.  HandlerChainProcessor swallows exception due to jira AXIS2-3712.  This should be OK ... see AXIS2-3712 for details.  The problem is that processing continues on the outbound flow and the request reaches the server.  On the server-side the message now contains a SOAPFault so we end up with the following error:  "org.apache.axis2.AxisFault: The endpoint reference (EPR) for the Operation not found is http://localhost:9080/WSDLOWHandlerTestService/jaxws/Hello and the WSA Action ="		My fix is to have the HandlerChainProcessor continue to swallow the exception, but also return a bad result to the invoker, HandlerInvokerUtils.invokeOutboundHandlers() so that it knows not to continue sending request to server.
428||Problem Description:	The JAXWS message's internal form is converted from OM to SAAJ when a JAXWS SOAP handler is called.  After the SOAP handler chain completes, the SAAJ message is converted back into OM.	Currently, if the OM contains an MTOM attachment, the attachment is lost during the SAAJ -> OM conversion. 		Solution:	The solution is very simple.  The SAAJConverter code is used to convert the SAAJ message back to OM.  In my sandbox, I have modified this code to optionally accept an OM AttachmentMap.  	I also have a added a unit test to verify the code.		I will commit this change after I complete a few more tests.
429||I have a service that causes axis2 v1.4 to produce the following message	when axis2	is trying to deploy the service:		2008-07-15 17:09:53,178 [main] INFO	org.apache.axis2.deployment.repository.util.ArchiveReader  - Trouble	processing wsdl file :No endpoints found in the WSDL		This service is created using the wsdl2java utility. The wsdl output	by wsdl2java does not have a 'binding' section and it does not have an	endpoint in the	'service' section. NOTE that I'm using wsdl v2.0.		I've attached the original wsdl2 for the service:	ACE_UDDIMAintain.orig.wsdl2	The wsdl produced by wsdl2java: ACE_UDDIMaintain.wsdl	and the services.xml produced by wsdl2java: services.xml.		The following the portion of the ant build file I use to run	wsdl2java:		           <java  classname="org.apache.axis2.wsdl.WSDL2Java" fork="true"	failonerror="true">	                       <classpath>	                               <fileset dir="${ACESOA_LIBDIR}" includes="*.jar"/>	                               <fileset dir="${AXIS2LIBDIR}" includes="*.jar"/>		                       </classpath>	                       <arg line="-o ${CURRDIR}/${SRCTEMPDIR}" />	                       <arg line="-uri ${CURRDIR}/resources/${ant.project.name}.wsdl2" />	                       <arg line="-d adb" />	                       <arg line="-s" />	                       <arg line="-ss" />	                       <arg line="-ssi" />	                       <arg line="-sd" />	                       <arg line="-g" />	                       <arg line="-wv 2.0" />	               </java>
430||Message level policies are not injected to the stubs when there are attached to the message using the <message label="in/out"> tag.
431||If a service provider is configured to accept only async requests, and a request comes in that does not contain WS-Addressing headers then the request will not be rejected (as it should be). This is becuase the SOAPMessageBodyBasedDispatcher will be used to dispatch the message, instead of the AddressingBasedDispatcher. This means that the AddressingValidationHandler will not have all of the information it needs, at the time it is invoked, in order to correctly enforce the policy.		Solution:		The AddressingValidationHandler needs to run after the SOAPMessageBodyBasedDispatcher, but the checkAction() operation needs to be moved to the AddressingBasedDispatcher, in order to ensure that it only runs if we have dispatched based on the wsa:Action.
432||I made a simple web service towards an EJB using Axis2 1.3, following the tutorial at this URL http://ws.apache.org/axis2/1_2/ejb-provider.html 		It works fine once (the first run) but when I try to run it a second time in a row, I have this response in SOAP UI 		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> 	   <soapenv:Body> 	      <soapenv:Fault> 	         <faultcode>soapenv:Server</faultcode> 	         <faultstring>object is not an instance of declaring class</faultstring> 	         <detail> 	            <Exception>org.apache.axis2.AxisFault: object is not an instance of declaring class 	            at org.apache.axis2.AxisFault.makeFault(AxisFault.java:417) 	            at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:156) 	            at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) 	            at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:96) 	            at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:145) 	            at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:275) 	            at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:120) 	            at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	            at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	            at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:226) 	            at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:124) 	            at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:283) 	            at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:175) 	            at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3370) 	            at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) 	            at weblogic.security.service.SecurityManager.runAs(Unknown Source) 	            at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2117) 	            at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2023) 	            at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1359) 	            at weblogic.work.ExecuteThread.execute(ExecuteThread.java:200) 	            at weblogic.work.ExecuteThread.run(ExecuteThread.java:172) 	Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class 	            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	            at java.lang.reflect.Method.invoke(Method.java:585) 	            at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:194) 	            at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:98) 	            ... 19 more</Exception> 	         </detail> 	      </soapenv:Fault> 	   </soapenv:Body> 	</soapenv:Envelope> 		I investigated a bit. I found out a problem within the « caching system » used to prevent introspection to resolve which Java method/class to call. 		Here is a simple of org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic() : 		            Object obj = getTheImplementationObject(inMessage); 	            Class ImplClass = obj.getClass(); 	            AxisOperation op = inMessage.getOperationContext().getAxisOperation(); 	            method = (Method)(op.getParameterValue("myMethod")); 	            AxisService service = inMessage.getAxisService(); 	            OMElement methodElement = inMessage.getEnvelope().getBody().getFirstElement(); 	            AxisMessage inAxisMessage = op.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE); 	            String messageNameSpace = null; 	            if (method == null) { 	                String methodName = op.getName().getLocalPart(); 	                Method[] methods = ImplClass.getMethods(); 	                for (int i = 0; i < methods.length; i++) { 	                    if (methods[i].getName().equals(methodName)) { 	                        method = methods[i]; 	                        op.addParameter("myMethod", method); 	                        break; 	                    } 	                } 	                if (method == null) { 	                    throw new AxisFault("No such method '" + methodName + 	                            "' in class " + ImplClass.getName()); 	                } 	            } 		The first time, everything is fine, "obj" is new, "method" is null and is fill correctly with loop made of ImplClass.getMethods();. During the second call, "obj" is a new instance but "method" comes from "op" and is the one from the previous call. But it doesn't match "obj". "method" is related to the previous instance of "obj" instanciated from the previous call. It seems that the saving of "obj" in the ServiceContext class didn't work properly. 		The quick fix is to comment the line method = (Method)(op.getParameterValue("myMethod")); but that implies to launch the introspection framework at every call. It may be time consuming. 		I tested it with Axis2 1.3 and 1.4 too and it doesn't work any better 		I make a unit Test Eclipse workspaces with 2 projects : 	-  project "ejbModuleWebService" is the project with a very simple EJB, 	- project WebServiceEJB contains the web service definition.  		We have the bug on Weblogic 10, I didn't test it on another application server.
433||The AbstractHTTPSender method getHttpClient() called by HTTPSender is not thread safe.  If an Operation Client performs many non-blocking send/receives, there will be many threads calling this method (the OutInAxisOperationClient creates a NonBlockingInvocationWorker for each one).		Please consider the following situation:	If the options are set as such -	REUSE_HTTP_CLIENT is set to true.	CACHED_HTTP_CLIENT is null (no HttpClient is cached).		Users may expect the OperationClient to use only one HttpClient.  However, this is not the case as it is possible that many threads will check the CACHED_HTTP_CLIENT property while it is still null.  As a result, each of those threads will create their own HttpClient using their own MultiThreadedHttpConnectionManager, and cache that (overriding any HttpClients that were cached before it).  Thus, many HttpClients are used, each with their own MultiThreadedHttpConnectionManager which comes with its own connection pool. A quick netstat will show that many connections are created for the non-blocking send/receives.		I noticed this when performing many non-blocking send/receives ( outInOpClient.execute(false); ) very quickly in succession, with the options specified above.  Subsequent non-blocking send/receives perform as expected since the HttpClient has been initialized and cached.		The method copied here for your reference:		    protected HttpClient getHttpClient(MessageContext msgContext) {	        HttpClient httpClient;	        Object reuse = msgContext.getOptions().getProperty(HTTPConstants.REUSE_HTTP_CLIENT);	        if (reuse == null) {	            reuse = msgContext.getConfigurationContext().getProperty(HTTPConstants.REUSE_HTTP_CLIENT);	        }	        if (reuse != null && JavaUtils.isTrueExplicitly(reuse)) {	            httpClient = (HttpClient) msgContext.getOptions().getProperty(HTTPConstants.CACHED_HTTP_CLIENT);	            if (httpClient == null) {	                httpClient = (HttpClient) msgContext.getConfigurationContext()	                        .getProperty(HTTPConstants.CACHED_HTTP_CLIENT);	            }	            if (httpClient != null)	                return httpClient;	            MultiThreadedHttpConnectionManager connectionManager =	                new MultiThreadedHttpConnectionManager();	            httpClient = new HttpClient(connectionManager);	            msgContext.getConfigurationContext()	                .setProperty(HTTPConstants.CACHED_HTTP_CLIENT, httpClient);	        } else {	            HttpConnectionManager connManager =	                    (HttpConnectionManager) msgContext.getProperty(	                            HTTPConstants.MULTITHREAD_HTTP_CONNECTION_MANAGER);	            if (connManager == null) {	                connManager =	                        (HttpConnectionManager) msgContext.getProperty(	                                HTTPConstants.MUTTITHREAD_HTTP_CONNECTION_MANAGER);	            }	            if(connManager != null){	                httpClient = new HttpClient(connManager);	            } else {	                //Multi threaded http connection manager has set as the default 	                connManager = new MultiThreadedHttpConnectionManager();	                httpClient = new HttpClient(connManager);	            }	        }		        // Get the timeout values set in the runtime	        initializeTimeouts(msgContext, httpClient);	        return httpClient;	    }		On a side note, why doesn't it check if a cached MultiThreadedHttpConnectionManager exists before creating an HttpClient to cache? It just uses its own. This would allow users more control over the connections and such.		Thanks,	Manny Lim
434||Recently, Deepal made a change to org.apache.axis2.description.AxisOperation.getSoapAction() in SVN rev 670462 to call getInputAction() instead of return soapAction:		http://svn.apache.org/viewvc/webservices/axis2/trunk/java/modules/kernel/src/org/apache/axis2/description/AxisOperation.java?r1=645181&r2=670462		The latest CTS run has a server side inbound handler that shows a failure:		194932 [7/23/08 9:57:31:662 CDT] 0000002e SystemOut     O   result=FAILED: unex	pected value found in HTTP SOAPAction:[["http://w2jrlr2745testservice.org/W2JRLR	2745TestService.wsdl/W2JRLR2745TestOne/echoStringResponse"]]		So, I think this means that the client is populating the message with an incorrect soap action header, due to the above mentioned change. 		I would guess there are two possible fixes:	1)  make getSoapAction method "direction aware" so it can call getInputAction() or getOutputAction() as appropriate	2)  revert the change in 670462 		Deepal, your opinion?
435||This is because we ask for the EPR from the endpoint as serviceName.endpointName but it looks like the JMSListener keeps the mapping as serviceName hence it cannot figure out the destination address.
436||Background:	The JAXWS engine builds a list of packages required to invoke a service.  (For example, this list of packages is used to construct internal JAXBContexts).	The preferred method of obtaining these packages is by walking the schema annotations.	However, there is also a fallback search to build the packages from the wsdl/schema namespaces.  This fallback mechanism is essential in cases where annotations are not fully declared.  		Problem:	The fallback search (SchemaReaderImpl) attempts to build packages for each namespace that it discovers.  However there are some namespaces (like the wsaddressing namespace) that should be excluded from this namespace->package search.		Solution:	I am working on a small change to the code that will exclude certain namespaces from the namespace->package search.  Once completed, it will be easy to add other namespaces into the exclusion list.
437||Background: 	MustUnderstand checking must be performed for all required headers.	This includes the headers associated with JAXWS method parameters and headers associated with JAXWS handlers.		Problem:	Currently the JAXWS headers associated with the JAXWS method parameters are recalculated on each request.  This has a performance overhead.		Solution:	The solution is to calculate the JAXWS headers for the method parameters one time and save the list on the AxisService.  	The JAXWS header calculation associated with handlers remains unchanged.		Next Step:	I am doing the final testing on the change.  		Kudos to David Strite who discovered this performance boost and worked with me on the proposed change.
438||Hi!		I ran into a :		java.util.ConcurrentModificationException		at java.util.HashMap$HashIterator.nextEntry(HashMap.java:841)		at java.util.HashMap$KeyIterator.next(HashMap.java:877)		at org.apache.axis2.engine.AxisConfiguration.removeServiceGroup(AxisConfiguration.java:395)		at org.apache.axis2.client.ServiceClient.cleanup(ServiceClient.java:813)		In my testsetup I run 5 concurrent threads each running a series of request .		- all creating a new ServiceClient pr request	- reusing the same ConfigurationContext.			/hans
439||Deployment life cycle listener is very useful when restarting some actions after a server crash. This is specially use full in starting the persisted RM sequences when a server starts up or at the client side when the client restarts.
440||I will describe the issue that i found while trying to access an operation from an IDL exposed as WSDL.		If we have the following .idl...		module test {	       struct Identity{long Id;};		       interface ITest{	               string testing(in string input, out Identity output);};	};		And the following implementation for the interface...		public class TestImpl extends ITestPOA{			@Override		public String testing(String input, IdentityHolder output) {				Identity identity = new Identity(1234);			output.value = identity;			String str = "This is a CORBA2WS test";			String result = str + input;			return result;		}	}		...Using the Web Services Explorer from eclipse platform or even if we develop a client, we obtain a error in the SOAP response. This led me to conclude that we can't have an ouput parameter that is not a primitive type.
441||"Class already define" compilation errors in jaxws-integration and metadata packages.		The duplications of test artifacts classes with identical package names across these packages are causing compilation errors when deployed into eclipse IDE.		Adjusted some of the test package structure of jaxws-integration and metadata test package to resolve these errors. 		Also updated pom.xml of jaxws-integration package to reflect some of this package updates.
442||Our Organizaton want to use Java level enumeration support or WSDL level enumeration support for implementing it in the WSDL
443||The BeanUtil.deserialize(Class, OMElement, ObjectSupplier, String) in Adb module does not handle xsi:nil attributes on array elements properly.		In the given example test case a 2D string array (that is part of a POJO) is being sent to an Echo Java service.	The 2D array contains an null array and a null array element:	String[][] stringArray2D = new String[][] { new String[] { "axis2", null}, null}		The request is send using ADB client stub and it's OK:	<ns2:echoSimplePOJO xmlns:ns2="http://test.tempuri.org">	    <ns2:simplePOJO>	         <names xmlns="http://test.tempuri.org/xsd">	             <names>axis2</names>	             <names xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="1" />	          </names>	          <ns1:names xmlns:ns1="http://test.tempuri.org/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="1" />	</ns2:simplePOJO>		The request, however, contains an empty string rather than a null string, and does not contain the null array:		<ns:return xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ax23="http://test.tempuri.org/xsd" xsi:type="ax23:SimplePOJO">	    <ax23:names>	         <ax23:names>axis2</ax23:names>	         <ax23:names></ax23:names>	    </ax23:names>	</ns:return>		The problem is that the deserialize(..) method does not check for xsi:nil.	Additionally it does not put deserialized null array elements inside the valueList, so they are effectively skipped.
444||when i use -scn option in wsdl2java it generates a skeleton with the name i give, but the service.xml file that is generated still use the default *skeleton name.	i think the service.xml should use the new name (from -scn) instead of the default.
445||I got an error when running wsdl2java with xmlbeans binding: "Problem parsing referenced XML resource - http://docs.oasis-open.org/wsn/b-2.xsd:1:1: error: Unexpected end of file after null". Following is the complete exception stack:	autogen.test:	     [echo] autogen.missing = true	     [echo] autogen.copied = true		perform.autogen:	     [exec] Generating server source for NotificationConsumer.wsdl ...	     [exec] Using AXIS2_HOME:   C:apacheaxis2-1.4	     [exec] Using JAVA_HOME:    C:Progra~1Javajdk1.5.0_12	     [exec] Retrieving document at 'NotificationConsumer.wsdl'.	     [exec] Retrieving schema at 'http://docs.oasis-open.org/wsn/b-2.xsd', relative to 'file:/C:/Data/substcc14/WINT/SDF-2007/wint-oe/webServiceClients/messagingclient/config/NotificationConsumer.wsdl'.	     [exec] Retrieving schema at 'http://docs.oasis-open.org/wsrf/bf-2.xsd', relative to 'http://docs.oasis-open.org/wsn/b-2.xsd'.	     [exec] Retrieving schema at 'http://www.w3.org/2001/xml.xsd', relative to 'http://docs.oasis-open.org/wsrf/bf-2.xsd'.	     [exec] Retrieving schema at 'http://www.w3.org/2005/08/addressing/ws-addr.xsd', relative to 'http://docs.oasis-open.org/wsrf/bf-2.xsd'.	     [exec] Retrieving schema at 'http://docs.oasis-open.org/wsn/t-1.xsd', relative to 'http://docs.oasis-open.org/wsn/b-2.xsd'.	     [exec] Retrieving schema at 'http://www.w3.org/2005/08/addressing/ws-addr.xsd', relative to 'http://docs.oasis-open.org/wsn/b-2.xsd'.	     [exec] [INFO] Resolving schema with publicId [null] and systemId [http:docs.oasis-open.orgwsnb-2.xsd]	     [exec] Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	     [exec]     at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:271)	     [exec]     at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35)	     [exec]     at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24)	     [exec] Caused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException	     [exec]     at org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLBeansExtension.java:126)	     [exec]     at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:224)	     [exec]     ... 2 more	     [exec] Caused by: java.lang.reflect.InvocationTargetException	     [exec]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	     [exec]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	     [exec]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	     [exec]     at java.lang.reflect.Method.invoke(Method.java:585)	     [exec]     at org.apache.axis2.wsdl.codegen.extension.XMLBeansExtension.engage(XMLBeansExtension.java:115)	     [exec]     ... 3 more	     [exec] Caused by: java.lang.RuntimeException: org.apache.xmlbeans.XmlException: error: Problem parsing referenced XML resource - http://docs.oasis-open.org/wsn/b-2.xsd:1:1: error: Unexpected end of file after null	     [exec]     at org.apache.axis2.xmlbeans.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:325)	     [exec]     ... 8 more	     [exec] Caused by: org.apache.xmlbeans.XmlException: error: Problem parsing referenced XML resource - http://docs.oasis-open.org/wsn/b-2.xsd:1:1: error: Unexpected end of file after null	     [exec]     at org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler.compile(SchemaTypeSystemCompiler.java:225)	     [exec]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	     [exec]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	     [exec]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	     [exec]     at java.lang.reflect.Method.invoke(Method.java:585)	     [exec]     at org.apache.xmlbeans.XmlBeans.compileXmlBeans(XmlBeans.java:667)	     [exec]     at org.apache.axis2.xmlbeans.CodeGenerationUtility.processSchemas(CodeGenerationUtility.java:189)	     [exec]     ... 8 more		It worked fine with axis2-1.2, but we have to upgrade to axis2-1.4. Any suggestions or work arounds? Thanks
446||For Axis2 1.4.1, if I instantiate a new client stub for every web service request, the stub is not freed. This was not happened with Axis2 1.2. For example, I modified Version service's getVersion() to do following:			public sample.axisversion.GetVersionResponse getVersion() throws ExceptionException0 {			TestServiceStub stub = null;			try {				stub = new TestServiceStub("http://localhost:8080/axis2_141/services/TestService/");				HelloResponse response = stub.Hello(new HelloRequest("myName"));			} catch (AxisFault e) {				System.err.println(e.getMessage());			} catch (RemoteException e) {				System.err.println(e.getMessage());			} finally {				if (stub != null) {					try {						stub.cleanup();					} catch (AxisFault e) {						System.err.println(e.getMessage());					}				}			}				GetVersionResponse response = new GetVersionResponse();			response.set_return("1.4.1");			return response;		}		Each time getVersion() is called, it creates a new instance of TestServiceStub, and uses it to send out a HelloRequest. I put this modified Version.aar along with the TestService.aar into axis2_141.war and deployed it to JBoss. After I sent multiple version requests to the Version service, I saw significant memory leak for JBOSS.		I also tried to keep an instance of the stub into a singleton class, and use the same instance every time as following:		public sample.axisversion.GetVersionResponse getVersion() throws ExceptionException0 {			TestServiceStub stub = null;			try {				stub = TestServiceStubSingleton.INSTANCE.getStub("http://localhost:8080/axis2_141/services/TestService/");				HelloResponse response = stub.Hello(new HelloRequest("myName"));			} catch (AxisFault e) {				System.err.println(e.getMessage());			} catch (RemoteException e) {				System.err.println(e.getMessage());			}				GetVersionResponse response = new GetVersionResponse();			response.set_return("1.4.1");			return response;		}		This workaround fixed the memory leak. But in our applications, we have situations that new client stub has to be created each time. I think the better solution is for Axis2 to free the client stub.
447||Hi guys,	  I'm having problems using inner classes, if having a simple EchoService with an inner class like this:		public class EchoService 	    public MyInnerClass retMyInnerClass(MyInnerClass input) {	        return input;	    }		    public class MyInnerClass {	        private String name;		        public MyInnerClass() {     }			public void setName(String name) {			this.name = name;		}			public String getName() {			return this.name;		}	    };	}		I am able to deploy it and invoke it with a generated ADB client, however, when the service receives the XML request and tries to create	an instance of the inner class an exception gets thrown inside the DefaultObjectSupplier:		Caused by: java.lang.InstantiationException: org.tempuri.test.EchoService$MyInnerClass	        at java.lang.Class.newInstance0(Class.java:335)	        at java.lang.Class.newInstance(Class.java:303)	        at org.apache.axis2.engine.DefaultObjectSupplier.getObject(DefaultObjectSupplier.java:28)	        ... 28 more		The issue has been reported before, see AXIS2-2691, however it seems that the DefaultObjectSupplier patch provided there was never applied.	Annogen changes were also required but since now (in the nightly build) Axis2 does not use annogen anymore, I think only the DefaultObjectSupplier patch is relevant.
448||The AxisService.removeOperation(QName) method does not remove the operation's action from the invalidOperationsAliases list.		This prevents later added (replacement) operation to have the correct action mapping (or any action mapping!).
449||** UPDATE** - see attached zip file for minimal WSDLs that demonstrate this bug. The bug appears to be caused when there are *two embedded schemas* within a WSDL that mutually reference each other. This happens frequently with WSDLs generated by Microsoft's tools.		* Original bug description below*	WSDL2Java fails to correctly generate an ADB stub for this WSDL: https://www.foxtel.com.au/EPGServiceWrapper/WebService/EPG/EPGServiceWrapper.wsdl.		The following is printed during generation:		  [codegen] 2008.08.28 15:13:01.640 WARN   org.apache.axis2.schema.SchemaCompiler Type {http://rbsw.foxtel.com.au/}BookingRequest missing!		This means that in the generated code, BookingRequest objects are represented as OMElements rather than as objects based on the schema.		My initial notes from investigation:	 * The WSDL contains two embedded schemas, both of which import each other (via an xsd:import). I suspect this is part of the problem.	 * I *think* the WSDL is valid - that is, (1) Axis 1 version 1.4 can handle the WSDL fine, and the generated code actually works, and (2) Axis2 1.4 with the XMLBeans binding runs without errors (though I did not test this client).		I am invoking WSDL2Java as follows:				<codegen wsdlfilename="${wsdl.uri}" 				synconly="true" 				serverside="false"				allports="true" 				language="java"				skipwsdl="false"				packagename="com.foxtel.rbs.client.binding" 				databindingname="adb"				output="${build.dir}/client" 				generateservicexml="false"				servicename="RemoteBookingServiceWrapper">			</codegen>		I have searched through Jira and cannot find a similar issue to this one - sorry if I've missed anything.
450||org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject() can throw a NPE when the type attribute of the xsd type is null.  At line 1521, change attributeNameSpace.equals(Constants.XSD_NAMESPACE) to Constants.XSD_NAMESPACE.equals(attributeNameSpace) to fix.
451||The Addressing, soapmonitor and ping MAR modules (and possibly others) for release 1.4.1 appear to have been released and deployed to Apache Maven repository as version "1.41" rather than "1.4.1". 		Can someone please redeploy with the correct version number, please?
452||Background:	A customer may use a JAXWS Provider for the service implementation.  The provider exposes a generic representation of either the message or payload (i.e. Provider<Source>).		Problem:	If a Provider returns a representation of a SOAP Fault in the outbound message, the JAXWS engine should detect the fault and to normal fault outbound processing.  Currently this is broken.		Solution:	Nicholas Gallardo and I are working on a solution so that the Provider correctly detects the returned SOAPFault and triggers the correct outbound handler (etc.) processing.	The solution is coded up and we are in the last day of testing.
453||I've deployed a JAXWS web service that uses JAXB binding classes on the client and the server.  I get a NullPointerException when attempting to call a web method with the following signature:		public String[] webMethod(Object token, List<String> listParam, boolean boolParam)		I traced the problem to the setReturnType method of the org.apache.axis2.jaxws.description.builder.converter.JavaMethodsToMDCConverter class.  Instead of returning an array class as the type, the method.getGenericReturnType() method returns a GenericTypeArrayImpl object.  Since this type isn't handled in the if clause of the setReturnType method, the return type on the web method is set to null.
454||We use Calendar.clear() to clear out all populated fields returned Calendar.getInstance(), before expressly setting the timezone and the fields we want set.		This clear call has cleared out the ZONE_OFFSET field.		Since the Timezone is set, the ZONE_OFFSET will be set only when it needs to be calculated.		the call to ConverterUtil.convertToString(Calendar) checks ZONE_OFFSET, and if it is not set then sets the timezone to the Locale Default.  This overrides the timezone we actually wanted.
455||Scenario:	A JAXWS webservice on the server throws an exception (checked or unchecked).	The JAXWS engine converts the exception into a message containing a SOAP Fault.	An outbound JAXWS application handler is installed.  	In the handleFault method, the customer wants to do some work related to the exception. 	For example, the customer may want to log exception information in a database.		Problem:	The conversion of the Exception -> SOAP Fault is lossy.  Some of the information about the Exception is lost.	For example, the stack trace of the exception is not captured (and should not be captured) in the SOAP Fault.	Other java information is also lost.		Solution:	Store the Exception on a new property.	The outbound JAXWS application handler can then access the exception directly to query java specific information.		Next Step:	I have coded the  solution and verification tests.  The changes are minimal and I will be committing the changes later today.
456||SimpleTypeMapper calls BigDecimal.toString() to convert the BigDecimal into a string.	In a Java5 environment  this will produce invalid xs:decimal values for BigDecimals where the toString() decides to use scientific notation.	The reason is that the semantic of BigDecimal.toString() has changed from Jdk1.4 to Jdk1.5. 	The prior toString() semantic is now implemented by the new toPlainString() method.
457||Observed Behavior: 	1) The wrapped attribute of the AxisMessage class is not being populated by the WSDL11ToAxisServiceBuilder class. The information is persisted in its BindingOperationEntry inner class (through the wrappedInput and wrappedOutput attributes) but it's never set into the appropriate AxisMessage instance.	2) In AxisMessage, the wrapped attribute defaults to 'true' when it should not (see attribute declaration/initialization). Note that BindingOperationEntry, the wrappedInput  and wrappedOutput  attributes default to 'true'. This IS perfectly fine since BindingOperationEntry objects are only instantiated whenever the encoding style for the operation is RPC/Literal of when the binding is HTTP and the message parts reference type definitions so it's OK for them to default to 'true'.		Expected Behavior: 	1) The wrapped attribute of the AxisMessage class should be populated by the WSDL11ToAxisServiceBuilder class while the bindings are being populated (see WSDL11ToAxisServiceBuilder.populateBinding method) just before the addQNameReference methods are called.	2) In AxisMessage, the wrapped attribute should be initialized (either explicitly or implicitly) to 'false' and the DocLitBareSchemaGenerator.processMethods method should be updated accordingly.
458||Observed Behavior: 	The AxisMessage passed to the OutOnlyAxisOperation.addMessage(AxisMessage, String) method is not saved as a child of the AxisOperation. It's not returned when calling its getChildren method. Instead, the AxisMessage returned is the one created at instantiation time (See OutOnlyAxisOperation .createMessage).		Expected Behavior:	If an AxisMessage is added to an OutOnlyAxisOperation through its addMessage method, the message should be available when calling its getChildren method.
459||(see also http://markmail.org/message/lvabtbivnwuptfm2) 	trying to connect an Axis2 Client to a Web Service through a proxy with authentication.  		Tried with  	System.setProperty("http.... 	and also with  	HttpTransportProperties.ProxyProperties.. 		I see those configuration enables proxy, but does screw up the proxy-authentication. Here is the Request HTTP POST 		POST http://xxxxxxxxxxxxxxxxxxxxx HTTP/1.0rn 	    Request Method: POST 	    Request URI: http://xxxxxxxxxxxxxxxxxxxxxxxxx 	    Request Version: HTTP/1.0 	Content-Type: text/xml; charset=UTF-8rn 	SOAPAction: "http://xxxxxxxxxxxxxxxxx"rn 	User-Agent: Axis2rn 	Proxy-Connection: Keep-Alivern 	Content-Length: 5098 	Proxy-Authorization: Basic Og==rn 	    Credentials: : 	Host: xxxxxxxxx:4711rn 	rn
460||The method org.apache.axis2.context.MessageContext#isEngaged(String moduleName) only checks whether the module defined by the given name has been engaged at the global axis configuration, axis service group, axis service or axis operation levels but does not check the axis message. Thus if a policy is applied on the message level and, say as a result rampart is engaged, the isEngaged check will actually return FALSE and the RampartSender handler won't be executed.
461||There is at least one scenario using Axis2 and Geronimo that is causing jarfiles to get locked on Windows such that a deployed WAR cannot be either redeployed or uninstalled. Here is a brief description of the failing scenario:		1. A WAR file containing various jarfiles in the /lib directory is deployed on Geronimo 2.1.3	2. Navigate to the deployed app's address to generate the WSDL for the web service	3. Redeploy or uninstall of the WAR will now fail since all the jarfiles in the WAR /lib directory are locked by Windows and cannot be deleted.		What appears to be happening is that there are three Axis2 URLClassLoaders in this scenario and at least two of them are creating their own ClassPath and URLClassPath$JarLoader objects that apparently are locking the jarfiles in the /lib directory.
462||In WSDL11ToAxisServiceBuilder:		  1) Within the 'setup()' method, a map ('schemaMap') indexed by targetNamespace and values equal root (W3C) Elements is populated		  2) When either a RPC/Literal binding or an HTTP binding with message parts referencing type definitions is found, new global element declarations based on the WSDL operation name are created. These new elements can either be added to an existing (W3C) Document (in case the 'schemMap'  contains a document with the same target namespace as the one that the newly created element has) or added to a newly created Document.:	    a) If a new document is created, an additional namespace mapping declaration is added to that document (see 'XMLNS_AXIS2WRAPPED' ). This helps distinguishing this document among the other original ones.	    b) If an additional document is NOT created, the new global element declarations are added to an existing document. No additional namespace mapping declaration is added.		  3) After all wrapped elements have been created,  XmlSchema objects are created from the original, modified and newly created W3C Documents		Note that all this leads to duplicate global element declarations any time there's already an element named after an operation name. This is very common and happens every time operation names across multiple bindings are the same.  In general, all this is caused by the creation of XML schema elements while transforming operations using the RPC/Literal encoding style into the Document/Literal encoding style using the wrapped convention.			There is more than one problem associated with the creation of new XML global element declarations:		  1) First of all, the XML schema documents end up with duplicated global element declarations which makes the Schema invalid. But why nobody seems to have noticed it? I think it's just a coincidence, let me explain: A XmlSchema object maintains a MAP, indexed by element name (QName) and XmlSchemaElement objects as values. This map is used for a faster object retrieval. At the same time, the XmlSchema object also maintains a LIST of all nodes (XmlSchemaObject objects I think). So whenever duplicate elements are added to the schema, the last-inserted elements overwrite the previous elements on the MAP of elements but they are inserted with no problems in the LIST of nodes and because the latter elements are usually what people is looking for (i.e. in case of databinding libraries that create the client stub for a single port), the 'correct' element is returned		  2) If the Definition object (from WSDL4J) is used to populate multiple AxisServices from different WSDL ports, for example, within the 'WSDL11ToAllAxisServicesBuilder' (which, by the way doesn't seem to work at all), the W3C Schema Document may end up with multiple duplicated global element declarations and the 'AxisService.getSchemaElement(QName)' method will fail to return the appropriate reference.
463||WS-AddressingAndIdentity[1] specification allows us to WS-Addressing's endpoint reference by providing identity information about the endpoint. This mechanism can be used to provide the public key information of the service using the WSDL as we discussed in the security strategy discussion. I am planning to add this feature to Axis2.	The plan is to set the identity information in a service parameter and when building the WSDL, AxisService2WSDLXXBuilder can serialize the identity information correctly according to the spec. When Rampart is engaged Rampart can set this property according to the Rampart configuration in the engageNotify() or one can set public key data using this parameter directly.		http://schemas.xmlsoap.org/ws/2006/02/addressingidentity/
464||In the eclipse codegen plugin if you use wsdl2java route and specify the output location as in the workspace, after codegeneration the workspace does not show the added files. The user has to refresh the project to see the generated code. The plugin should refresh the workspace after the code generation has being done.
465||Here's the exception I got when I tried to deploy a web service without SEI with 3 public and 2 private methods:		javax.xml.ws.WebServiceException: The ServiceDescription failed to validate due to the following errors -- Validation Phase 2 failure:  :: Endpoint failed validation ::  :: Invalid Endpoint Interface ::  :: The number of operations in the WSDL portType does not match the number of methods in the SEI or Web service impl	ementation class.  wsdl operations = [divide add multiply ] dispatch operations= [myInit divide add myDestroy multiply ]		Here's the basic service class:		@WebService()	public class CalculatorImpl {		    public int divide(int n1, int n2) {	        return n1/n2;	    }		    public int add(int n1, int n2) {	        return n1 + n2;	    }		    public int multiply(int n1, int n2) { 	        return n1 * n2;	    }		    @PostConstruct	    private void myInit() {	        System.out.println(this + " PostConstruct");	    }		    @PreDestroy()	    private void myDestroy() {	        System.out.println(this + " PreDestroy");	    }	}		The wsdl for this service defined operation for the divide, add, and multiply operations.
466||By default, the AxisService constructor sets the scope to be "request".  The org.apache.axis.deployment.ServiceBuilder is responsible for setting this value to be the actual value specified in the services.xml file. However, the populateService() method which handles this, processes the service life cycle attribute before it processes the service scope attribute. As a result, the AxisService object which is passed to the ServiceLifeCycle.startUp() method is always the default scope regardless of what the user has specified in their services.xml.		I believe that by simply rearranging the order in which these attributes are processed (in ServiceBuilder.populateService()) we can avoid confusion in situations where users are performing scope specific actions in their ServiceLifeCycle implementations.  It may be beneficial to leave off processing of the service life cycle attribute for as long as possible, so that when the startUp() method is finally invoked, users are given the most accurate representation of their service.		Thanks,	Manny Lim
467||Class: org.apache.axis2.util.SessionUtils		The Javadoc for the calculateMaxScopeForServiceGroup(AxisServiceGroup) method is incorrect. It states that  the method "[walks] through the list of services and [uses] the minimum of the scopes as the scope for the whole service group." When in fact it uses the maximum of the scopes as the scope for the whole service group.		Thanks,	Manny Lim
468||Observed Behavior: 	Within the 'populateBinding' method, both the Message Exchange Pattern of the operation -axisOperation.getMessageExchangePattern()- and the message labels -WSDLConstants.MESSAGE_LABEL_XX_VALUE- depend on the 'isServerSide' flag but this dependency is ignored when the AxisBindingMessage and AxisMessage objects are being populated. This can be seen whenever the 'isServerSide' flag is set to 'false'.		Expected Behavior: 	The value of both the operation's MEP and message labels should be retrieved taking into consideration the 'isServerSide' flag.
469||The axis2.xml contains the following entries for two deployers for the same extension:		    <deployer extension=".jar" directory="servicejars"	              class="org.apache.axis2.jaxws.framework.JAXWSDeployer"/>	    <deployer extension=".jar" directory="transports"	              class="org.apache.axis2.deployment.TransportDeployer"/>		Once would think that any jar files found in the "servicejars" directory would be handled by the JAXWSDeployer and jar files found in the "transports" directory would be handled by the TransportDeployer. However, this is not implemented that way. In fact, the code assumes that there is only one Deployer for a given extension. So effectively the JAXWSDeployer will never be called/used. See AxisConfigBuilder.processDeployers() or DeploymentEngine.getDeployerForExtension().
470||Provider/Dispatch supports a few types, all of which require multiple transforms.  If we expose OMElement as a supported type, several transforms can be avoided, which greatly improves performance.
471||When parsing an invalid date (as specified by the XSD Schema specification), Axis relies on the java.util.Calendar leniency to parse. E.g. 2008-02-31 (31st of februari) is invalid according to http://www.w3.org/TR/xmlschema-2/#dateTime. convertToDateTime() returns the 2nd of march instead. 	This can be easily solved by setting the Calender leniency to false (setLenient(false)).
472||JSONOMBuidler doesn't set the namespace of the top element correctly and the serialization fails due to this reason.
473||If you let axis convert POJOs to a webservice which contain HashSet objects you will run into the problem that you get the HashSet as a list via SOAP but you are not able to sent this list back. You will face an "argument type mismatch" error.	This happens because inside the source code there is a check if the class of the property is a subclass or implementor of Collection which is the case for HashSet. But if this check is true, an ArrayList is build up every time, but ArrayList is not the only class which implements Collection, so this will lead to errors for each class implementing the Collection interface beside the ArrayList class.
474||Hi,	I have a problem when I try to get the effective policy from a MessageContext when I have a policy attached at the binding level of a Web Service. I am using Axis2 1.4.0	Let me explain a little bit the scenario I have. I am using an AAR that has into its services.xml:		<parameter name="useOriginalwsdl">true</parameter>		and a PolicyAttachment at its service level:		<wsp:PolicyAttachment xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy">	            <wsp:AppliesTo>	                <policy-subject identifier="binding:soap11"/>	                <policy-subject identifier="binding:soap12"/>	            </wsp:AppliesTo>	            <wsp:Policy wsu:Id="User" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">...	</wsp:PolicyAttachment>		As a result the WSDL generated has the policy specified and policy reference at the binding subject level. Here is an excerpt from the wsdl for the SOAP11Binding:		<wsdl:binding name="MTOMServiceSOAP11Binding" type="tns:MTOMServicePortType">	<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>	<wsp:PolicyReference URI="#User"/>		At client side I have a dynamic client. So the issue is that when I invoke the service and the WSDL is read and the corresponding AxisService object is crated at the client side I have some modules' handlers that take palce. One of them is a custom one in which I have the following invocation:		Policy policy = msgCtx.getEffectivePolicy();		The problem is that this returns "null"! I debugged this and it came out that msgCtx is not null. When the method is invoked it tries to calculate the effective policy as given below.		         AxisBindingMessage bindingMessage =	             (AxisBindingMessage)	 getProperty(Constants.AXIS_BINDING_MESSAGE);		         if (bindingMessage != null) {	             return bindingMessage.getEffectivePolicy();	         } else {	             if (axisMessage != null) {	                 return axisMessage.getEffectivePolicy();	             } else {	                 return null;	             }	         }		where bindingMessage  is null and axisMessage.getEffectivePolicy(); returns null, too. When I dig through the AxisService -> AxisEndpoint -> AxisBinding -> here the PolicySubject is in fact a PolicyReference to the Policy that is set into the AxisService policyMap. So as a result axisMessage.getEffectivePolicy() returns null and I can not get the Policy I need.	I saw that I need something like the AxisDescription.getApplicablePolicy in order to locate the real Policy of a given PolicyReference.	You can see the patch applied that I have tested and seem to me that works fine.			Thank you in advance,	Dobri
475||wsdl2java generates incorrect callback handlers in unpacked mode. The problematic code seems to be in the AxisServiceBasedMultiLanguageEmitter#emitStub(), namely:		                if (!codeGenConfiguration.isPackClasses()) {	                    // write the call back handlers	                    writeCallBackHandlers();	                }		Note that this is called before the local variable this.axisBinding is populated.	writeCallBackHandlers subsequently calls createDOMDocumentForCallbackHandler which on its side uses loadOperations(Document doc, Element rootElement, String mep). The latter one relies on the local axisBinding being already set to retrieve the binding operations using this.axisBinding.getChildren()	As a result the generated callback handler includes wrong methods.	To simulate the issue one could use the attached wsdl with the "-u" option. 	The issue seems to be introduces in the 590668 revision, commit comment says:		"use binding operation to get the polices. earlier it has assumed that the	binding Qname and the operation Qname should be equal. but this is not 	the case if there are in two different wsdl files."		A simple fix would be to move the already mentioned code in the AxisServiceBasedMultiLanguageEmitter#emitStub after the loop over the service endpoints.
476||This JIRA is for removing SOAP Version Restriction from Provider Endpoints. Currently a JAX-WS Provider Endpoint can support a SOAP11 or SOAP 12 call based on the soap version defined in the binding type annotation. With this JIRA I am introducing a new constant that SOAP_HTTP_BINDING can be used in @BindingType annotation, when this new constant is used  the javax.xml.ws.Provider java endpoints will cater to SOAP11 and SOAP12 messages.		This JIRA will also add proper validation checks to support the new constant, for example it will ensure that a SOAP Fault will be thrown when a response of soap12 is sent on a soap11 request etc. This JIRA also adds code to update various validation checks for new constant during web services deployment.		This JIRA also adds test cases in JAXWS-Integration module to test various scenarios for this new constants and validations.
477||JAXWS has problems finding JAXB classes when users place their application classes inside a jar file that resides in a Windows directory containing spaces	i.e For example:	C:Documents and SettingsmytempmyApp.jar		Exceptions will be thrown saying the class is not known to the JAXB context, i.e:	Throwable occurred: javax.xml.ws.WebServiceException: javax.xml.bind.JAXBException: class xxxx nor any of its super class is known to this context.	       at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:175)	       at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70)		The fix is simple. Create an encoded URI.. which takes care of the spaces in file URL.	At:	org.apache.axis2.jaxws.message.databinding.impl.ClassFinderImpl.getClassesFromJarFile()	From:	         File f = new File(url.getPath());	To:	         File f = new File(url.toURI().getPath());
478||User seeing a MarshallingException when using JAXB bean artifacts generates JAXBElement<GregorianCalander> . Heres	the stack trace for the issue		Caused by: javax.xml.bind.MarshalException	 - with linked exception:	[javax.xml.bind.JAXBException: org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl is not known to this context]		at com.sun.xml.internal.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:316)		at com.sun.xml.internal.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:242)		at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:86)		at com.ibm.xml.xlxp2.jaxb.marshal.MarshallerProxy.marshal(MarshallerProxy.java:99)		at org.apache.axis2.datasource.jaxb.JAXBDSContext$1.run(JAXBDSContext.java:388)		at org.apache.axis2.java.security.AccessController.doPrivileged(AccessController.java:76)		at org.apache.axis2.datasource.jaxb.JAXBDSContext.marshalByElement(JAXBDSContext.java:369)		at org.apache.axis2.datasource.jaxb.JAXBDSContext.marshal(JAXBDSContext.java:339)		at org.apache.axis2.jaxws.message.databinding.impl.JAXBBlockImpl._outputFromBO(JAXBBlockImpl.java:189)		at org.apache.axis2.jaxws.message.impl.BlockImpl.outputTo(BlockImpl.java:342)		at org.apache.axis2.jaxws.message.impl.BlockImpl.serialize(BlockImpl.java:266)		at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.internalSerializeAndConsume(OMSourcedElementImpl.java:725)		at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:961)		at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerializeAndConsume(OMElementImpl.java:990)		at org.apache.axiom.soap.impl.llom.SOAPEnvelopeImpl.serializeInternally(SOAPEnvelopeImpl.java:240)		at org.apache.axiom.soap.impl.llom.SOAPEnvelopeImpl.internalSerialize(SOAPEnvelopeImpl.java:228)		at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerializeAndConsume(OMElementImpl.java:990)		at org.apache.axiom.om.impl.llom.OMNodeImpl.serializeAndConsume(OMNodeImpl.java:484)		at org.apache.axis2.transport.http.SOAPMessageFormatter.writeTo(SOAPMessageFormatter.java:79)		at com.ibm.ws.websvcs.transport.http.SOAPOverHTTPSender.writeMessage(SOAPOverHTTPSender.java:2814)		at com.ibm.ws.websvcs.transport.http.SOAPOverHTTPSender.sendChunkedRequest(SOAPOverHTTPSender.java:685)		at com.ibm.ws.websvcs.transport.http.SOAPOverHTTPSender.sendSOAPRequest(SOAPOverHTTPSender.java:606)		at com.ibm.ws.websvcs.transport.http.SOAPOverHTTPSender.send(SOAPOverHTTPSender.java:457)		at com.ibm.ws.websvcs.transport.http.HTTPTransportSender.invoke(HTTPTransportSender.java:320)		at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:446)		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:401)		at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:228)		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:163)		at org.apache.axis2.jaxws.core.controller.impl.AxisInvocationController.execute(AxisInvocationController.java:554)		... 53 more	Caused by: javax.xml.bind.JAXBException: org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl is not known to this	context		at com.sun.xml.internal.bind.v2.runtime.XMLSerializer.reportError(XMLSerializer.java:236)		at com.sun.xml.internal.bind.v2.runtime.XMLSerializer.reportError(XMLSerializer.java:251)		at com.sun.xml.internal.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:119)		at com.sun.xml.internal.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:102)		at com.sun.xml.internal.bind.v2.runtime.ElementBeanInfoImpl.serializeBody(ElementBeanInfoImpl.java:281)		at com.sun.xml.internal.bind.v2.runtime.ElementBeanInfoImpl.serializeRoot(ElementBeanInfoImpl.java:288)		at com.sun.xml.internal.bind.v2.runtime.ElementBeanInfoImpl.serializeRoot(ElementBeanInfoImpl.java:47)		at com.sun.xml.internal.bind.v2.runtime.property.SingleReferenceNodeProperty.serializeBody(SingleReferenceNodeProperty.	java:87)		at com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl.serializeBody(ClassBeanInfoImpl.java:298)		at com.sun.xml.internal.bind.v2.runtime.XMLSerializer.childAsSoleContent(XMLSerializer.java:583)		at com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl.serializeRoot(ClassBeanInfoImpl.java:288)		at com.sun.xml.internal.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:484)		at com.sun.xml.internal.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:313)		... 81 more	Caused by: javax.xml.bind.JAXBException: org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl is not known to this	context		at com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:583)		at com.sun.xml.internal.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:116)		... 91 more		I will provide the fix for this issue.
479||DEBUG [axis2.deployment.WarBasedAxisConfigurator] trying to load axis2.xml from module: /WEB-INF/conf/axis2.xml	DEBUG [axis2.deployment.WarBasedAxisConfigurator] trying to load axis2.xml from module: /WEB-INF/conf/axis2.xml		For the 2nd message, the actual path is /WEB-INF/axis2.xml	if (axis2Stream == null) {	    // Simple deployment, no need for conf directory either	    axis2Stream = config.getServletContext().getResourceAsStream("/WEB-INF/axis2.xml");	    log.debug("trying to load axis2.xml from module: /WEB-INF/conf/axis2.xml");	}
480||While using HTTP GET, the null value for a Dispatch invocation using the XML/HTTP binding should be acceptable.	Currently, it always throws an Exception, saying 	...	Caused by: java.lang.Throwable: The parameter cannot be a null value for a Dispatch invocation using the XML/HTTP binding.		at org.apache.axis2.jaxws.client.dispatch.BaseDispatch.getProtocolException(BaseDispatch.java:437)		... 2 more	Code Fragment :	Service service = Service.create(GREETER_SERVICE);	        service.addPort(HTTP_GREETER_PORT, HTTPBinding.HTTP_BINDING,	                "http://localhost:8080/jaxws-provider/provider/http/source/sayhi?value=geronimo");	        Dispatch<Source> dispatch = service.createDispatch(HTTP_GREETER_PORT, Source.class, Service.Mode.MESSAGE);	        Map<String, Object> requestContext = dispatch.getRequestContext();	        requestContext.put(MessageContext.HTTP_REQUEST_METHOD, "GET");	        dispatch.invoke(null);
481||Duing to included binding, already include by another top-level binding file, I was gettng a NPE in org.apache.axis2.jibx.CodeGenerationUtility		The following diff show the fix:		1077,1081c1077,1079	<                 BindingElement includeBinding = include.getBinding();	<                 if (includeBinding != null) {	<                     collectTopLevelComponents(include.getBinding(), defaultns,	<                                               elementMap, complexTypeMap, simpleTypeMap, bindingMap);	<                 }	---	>                 collectTopLevelComponents(include.getBinding(), defaultns,	>                                           elementMap, complexTypeMap, simpleTypeMap, bindingMap);	>
482||created a directory named "pojo" under "repository" directory. then put my java class file in to it. but it gave a faulty service.	(I started axis2 by giving repository directory as my repo path. ).
483||Need to add following JTA transaction related configuration to axis2.xml		<transaction>	 <parameter name="string">text</parameter>*	 </transaction>		Example,		 <transaction>	<parameter name="java.naming.factory.initial">org.jnp.interfaces.NamingContextFactory</parameter>*	<parameter name="java.naming.provider.url">localhost:1099</parameter>	<parameter name="UserTransactionJNDIName">UserTransaction</parameter>	<parameter name="TransactionManagerJNDIName">TransactionManager</parameter>	</transaction>		-
484||Hi guys,	   I have been using the applyPolicy() method to automatically engage any modules required for the current policy.  Nandana pointed me out that this is also being used in ADB generated client and I expected it to work properly any AxisDescription instance.	However I noticed that if calling this method on AxisEndpoint and AxisBinding nothing happens - the policy is there but the modules do not get engaged.		It seems that the reason for this is that the applyPolicy() iterates over the children of the current AxisDescription till it reaches the AxisMessage, then goes up the hierarchy collecting the effective policy.	This works fine when called on any AxisDescription in the AxisService -> AxisOperation(s) -> AxisMessage(s) hierarchy, but if it is called on the	AxisEndpoint it does not go further below since the AxisBinding is not added as a child to the AxisEndpoint.	Furthermore even if it was able to go down and reach any potential AxisBindingMessages in the 	AxisEndpoint -> AxisBinding -> AxisBindingOperation -> AxisBindingMessage hierarchy it would not be able to compute the effective policy since the getApplicablePolicy(AxisDescription) method is working only on an AxisMessage instance.
485||URIResolverImpl currently does not attempt to resolve using a static XML  catalog.  Updated URIResolverImpl to extend	CatalogURIResolver and attempt to use the catalog to resolve if a catalog is available.  If catalog resolution fails,	revert to existing resolveEntity logic to resolve remotely.
486||I have a service with a message level policy defined in its wsdl as follows. 		<wsdl:portType name="multiplyNumbersPortType">	<wsdl:operation name="multiplication">	<wsdl:input message="ns:multiplicationRequest" wsp:PolicyURIs="#SgnEncrAnonymous" wsaw:Action="urn:multiplication"/>	<wsdl:output message="ns:multiplicationResponse" wsaw:Action="urn:multiplicationResponse"/>	</wsdl:operation>	</wsdl:portType>		However this message level policy is not added to the ?wsdl2 of the service
487||Deploy attached service and check its wsdl, the endpoint addresses are not modified to reflect the servers location. This should be done based on the modifyUserWSDLPortAddress parameter
488||Each AxisDescription instance (AxisService, AxisOperation, etc.) has a "PolicySubject" field containing the policy components (policy, policy reference) attached at that subject. The problem is that this PolicySubject class is not thread safe - it maintains a HashMap with all policy components (mapped by their id). So when users are somehow modifying the policy of a subject (attaching new components or removing some) if meanwhile a service execution calls MessageContext.getEffectivePolicy(), which iterates over the policy components, a ConcurrentModificationException is thrown. In that case the service invocation will fail and a fault will be send to the client.
489||PropertyDescriptorPlus.get(Object targetBean) is missing a Null check:		Object ret = method.invoke(targetBean, null);	if (method.getReturnType() == JAXBElement.class) {	      ret = ((JAXBElement) ret).getValue();	}	return ret;		Should be changed to:		if (method.getReturnType() == JAXBElement.class && ret != null) {    		because you get a NullPointerException if the return type is a JAXBElement and the return value is null.
490||For the test, I put 	            <xs:simpleType name="QuotRegExp"> 	                <xs:restriction base="xs:string"> 	                    <xs:pattern value="&quot;" /> 	                </xs:restriction> 	            </xs:simpleType> 	into a WSDL file, then I got a generated QuotRexExp.java 	including 	                                            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches(""")) { 	which causes a compilation error because of a syntax error.
491||I converted the WSDL1.1 to WSDL2.0 by using WODEN.		Then using Axis2 WSDL2Java , there are exceptions;		wsdl2java  -wv 2.0  -or -g  -ss  -uri  parlayx_sms_send_service_2_2.wsdl2		Woden[Warning],0:0,Description-1001,The targetNamespace 'http://www.csapi.org/ws	dl/parlayx/sms/send/v2_2/service' is not dereferencable.	Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException	: Error parsing WSDL	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerat	ionEngine.java:153)	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35)	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24)	Caused by: org.apache.axis2.AxisFault	        at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430)	        at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateServi	ce(WSDL20ToAxisServiceBuilder.java:276)	        at org.apache.axis2.description.WSDL20ToAllAxisServicesBuilder.populateA	llServices(WSDL20ToAllAxisServicesBuilder.java:90)	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerat	ionEngine.java:105)	        ... 2 more	Caused by: java.lang.NullPointerException	        at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateOpera	tions(WSDL20ToAxisServiceBuilder.java:1088)	        at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.processInterf	ace(WSDL20ToAxisServiceBuilder.java:957)	        at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.processServic	e(WSDL20ToAxisServiceBuilder.java:385)	        at org.apache.axis2.description.WSDL20ToAxisServiceBuilder.populateServi	ce(WSDL20ToAxisServiceBuilder.java:273)	        ... 4 more
492||The change introduced in r726705 causes build failures in the Commons transport project and Synapse. The tests for the HTTP transports in these projects fail with an "address already in use" error.
493||ServiceLevelDataLocatorDemoService.aar  and WSDLDataLocatorDemoService.aar do no contain datalocator classes.	Default Axis2 datalocator demo sample throw following exception, because supplied schema file contain xml processing instructions. 			Caused by: org.apache.axis2.dataretrieval.DataRetrievalException: Failed to load from file, META-INF/DefaultAxis2DataLocatorDemoService.xsd		at org.apache.axis2.dataretrieval.DataRetrievalUtil.buildOM(DataRetrievalUtil.java:64)		at org.apache.axis2.dataretrieval.ServiceData.getFileContent(ServiceData.java:112)		at org.apache.axis2.dataretrieval.BaseAxisDataLocator.outputInlineForm(BaseAxisDataLocator.java:99)		at org.apache.axis2.dataretrieval.SchemaDataLocator.outputInlineForm(SchemaDataLocator.java:95)		at org.apache.axis2.dataretrieval.SchemaDataLocator.getData(SchemaDataLocator.java:80)		at org.apache.axis2.dataretrieval.AxisDataLocatorImpl.getData(AxisDataLocatorImpl.java:81)		... 15 more	Caused by: org.apache.axiom.om.OMException: com.ctc.wstx.exc.WstxParsingException: Illegal processing instruction target ("xml"); xml (case insensitive) is reserved by the specs.	 at [row,col {unknown-source}]: [20,5]		at org.apache.axiom.om.impl.builder.StAXOMBuilder.next(StAXOMBuilder.java:251)		at org.apache.axiom.om.impl.llom.OMDocumentImpl.getOMDocumentElement(OMDocumentImpl.java:132)		at org.apache.axiom.om.impl.builder.StAXOMBuilder.getDocumentElement(StAXOMBuilder.java:526)		at org.apache.axis2.dataretrieval.DataRetrievalUtil.convertToOMElement(DataRetrievalUtil.java:87)		at org.apache.axis2.dataretrieval.DataRetrievalUtil.buildOM(DataRetrievalUtil.java:62)		... 20 more	Caused by: com.ctc.wstx.exc.WstxParsingException: Illegal processing instruction target ("xml"); xml (case insensitive) is reserved by the specs.	 at [row,col {unknown-source}]: [20,5]		at com.ctc.wstx.sr.StreamScanner.constructWfcException(StreamScanner.java:605)		at com.ctc.wstx.sr.StreamScanner.throwParseError(StreamScanner.java:467)		at com.ctc.wstx.sr.BasicStreamReader.readPIPrimary(BasicStreamReader.java:3917)		at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2055)		at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)		at org.apache.axiom.om.impl.builder.StAXOMBuilder.parserNext(StAXOMBuilder.java:621)		at org.apache.axiom.om.impl.builder.StAXOMBuilder.next(StAXOMBuilder.java:171)		... 24 more
494||I have the following definition in an XSD: 		<xsd:simpleType name="tariffID"> 	    <xsd:annotation> 	        <xsd:documentation>Standard tariff ID</xsd:documentation> 	    </xsd:annotation> 	    <xsd:restriction base="xsd:int"> 	        <xsd:totalDigits value="7"/> 	    </xsd:restriction> 	 </xsd:simpleType> 		When I generate the Java code I get the TariffID type as expected, but in the generated setTariffID(int) method, there is no code generated that captures the <xsd:totalDigits> restriction: 		/** 	 * Auto generated setter method 	 * @param param TariffID 	 */ 	  public void setTariffID(int param){ 	    this.localTariffID=param; 	  } 		If I then add either <xsd:pattern> or <xsd:minInclusive> and <xsd:maxInclusive> to the XSD then these restrictions are captured in the generated code.  For example, this: 		<xsd:simpleType name="tariffID"> 	    <xsd:annotation> 	        <xsd:documentation>Standard tariff ID</xsd:documentation> 	    </xsd:annotation> 	    <xsd:restriction base="xsd:int"> 	        <xsd:totalDigits value="7"/> 	        <xsd:minInclusive value="0"/> 	        <xsd:maxInclusive value="9999999"/> 	    </xsd:restriction> 	</xsd:simpleType> 		results in the following Java code being generated: 		/** 	 * Auto generated setter method 	 * @param param TariffID 	 */ 	public void setTariffID(int param){ 	  if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param, "9999999") <= 0){ 		    this.localTariffID=param; 	  } 	  else { 	    throw new java.lang.RuntimeException(); 	  }                                        	  if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param, "0") >= 0){ 	    this.localTariffID=param; 	  } 	  else { 	    throw new java.lang.RuntimeException(); 	  } 	} 		I and others on the user mailing list believe this is a bug in the ADB databinding code generation.
495||I implemented some of the features specified jsr311 specification in Axis2. By this feature users will able to use rest support available in axis2 using  annotations inserted in the service source. current implementation support both .class  & .aar type deployment. Earlier users had to manually edit the WSDL in order to use REST support in axis2. with this users will able to consume RESTFUL web services in axis2 by adding some annotations in the source.	currently i have implemented support for : 	Path             (whttp:location)	HttpMethod  (whttp:method)	Produces      (whttp:outputSerialization)	Consumes    (whttp:inputSerialization)
496||Generating java classes using wsdl2java (as ADBBeans) (Axis2 version 1.4.1)  	 on WSDL containing the following information:  			   <xs:complexType name="PaymentAmount">  	      <xs:simpleContent>  	         <xs:extension base="tns:Amount"/>  	      </xs:simpleContent>  	   </xs:complexType>  	   <xs:complexType name="Amount">  	      <xs:simpleContent>  	         <xs:extension base="xs:decimal">  	            <xs:attribute name="currency" type="tns:currency" use="required"/>  	         </xs:extension>  	      </xs:simpleContent>  	   </xs:complexType>  			The generated PaymentAmount class has no setter or getter methods.  	The generated Amount class has as expected setter and getter method for Currency and Decimal.
497||SOAPConnectionImpl (which is part of the "**SOAP with Attachments** API for Java" implementation...) actually doesn't support SOAP with Attachments. Indeed it contains the following code: 		        if (request.countAttachments() != 0) { // SOAPMessage with attachments 	            opClient.getOptions().setProperty(Constants.Configuration.ENABLE_MTOM, 	                                              Constants.VALUE_TRUE); 	            return handleSOAPMessage(request, opClient); 	        } else { // simple SOAPMessage 	            return handleSOAPMessage(request, opClient); 	        } 		This implies that SOAPMessages that should normally be sent as a SwA messages are always sent as MTOM messages. 		This issue has also been reported on the mailing list some time ago, but without any reply: http://markmail.org/message/n3mwpni26ej5tsj2
498||SOAPConnectionImpl copies "unreferenced" (whatever that means) attachments from request to response. This is of course nonsense since not all real life services are echo services... 		It should also be noted that the echo service used in IntegrationTest doesn't echo attachments, but only the SOAP part.
499||A range is defined as: 				<xs:restriction base="xs:integer"> 				<xs:minInclusive value="0"/> 				<xs:maxInclusive value="999999999999999"/> 			</xs:restriction> 		The generated databinding calls: 		            public void setPhoneNumberType(java.math.BigInteger param){ 	                if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param, "999999999999999") <= 0){ 	                        this.localPhoneNumberType=param; 	                }  else { 	                      throw new java.lang.RuntimeException(); 	                } 			The ConverterUtil code is: 		    public static int compare(BigInteger binBigInteger, String value) { 	        return binBigInteger.intValue() - Integer.parseInt(value); 	    } 				This will always fail for values that exceed the capacity of a java.lang.Integer with: 		  Caused by: java.lang.NumberFormatException: For input string: "999999999999999" 	          at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48) 	          at java.lang.Integer.parseInt(Integer.java:459) 	          at java.lang.Integer.parseInt(Integer.java:497) 	          at org.apache.axis2.databinding.utils.ConverterUtil.compare(ConverterUtil.java:1281) 	          [...]
500||With recent changes to the ListenerManager with revisions 726705 and 728440. The ListenerManager stop() method can now only be invoked after the start() method is called because of the proper use of the 'stopped' boolean flag. But when transports are added with the addListener() method and the 'started' parameter is set to false, the addListener() method starts the transport (just like invoking the start() method), but the stopped boolean is not set to 'false'.  Currently the only was to set the 'stopped' boolean flag is my invoking the start() method. The code should be changed to set the 'stopped' boolean flag during the addListener() method if the 'started' parameter is set to false.		Prior to these recent changes the stop() method could be invoked with transports added with the addListener() method.		This problem was uncovered running the sandesha2 unit tests.
501||Issue with Steps to re-produce: 		Say, I have 3 (could be 'n') operations in my wsdl. All 3 take the same param type (say CustomParamterType) but internally have different business logic.  		Step1- I take the wsdl and run the Axis 2 code gen as follows: 	Step 2- There would be '3' different public accessor methods generated in the stub (which is good and expected) take in the same parameter type, then the respective toOM() method generated. Say: 		public  com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesResponseType CreateLinkedIdentities(com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesType linkIdentities150) throws java.rmi.RemoteException 		public  com.ebay.trinity.identityservice.pres.wsdl.ModifyLinkResponseType ModifyLink 	(com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesType modifyLink140) throws java.rmi.RemoteException 		public  com.ebay.trinity.identityservice.pres.wsdl.RemoveLinkResponseType RemoveLink 	(com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesType removeLink132) throws java.rmi.RemoteException 		All the above take LinkIdentitiesType param. 		In side each of the method, an envolope is formed as follows (auto gen code further) 	env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), linkIdentities150,optimizeContent(new javax.xml.namespace.QName("", "CreateLinkedIdentities"))) 		private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesType param, boolean optimizeContent) throws org.apache.axis2.AxisFault { 	 org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope(); 	        envelope.getBody().addChild(toOM(param, optimizeContent)); 	        return envelope; 	}  		private org.apache.axiom.om.OMElement toOM(com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesType param, boolean optimizeContent) 	throws org.apache.axis2.AxisFault { 	    try { 	---------some code------- 	 JaxbRIDataSource source = new JaxbRIDataSource( com.ebay.trinity.identityservice.pres.wsdl.LinkIdentitiesType.class, 	       param, 	       marshaller, 	       " 	", 	       "removeLink"); /////////////////////////////////////////////// CULPRIT ////////////////////////////////////////////////// 	 org.apache.axiom.om.OMNamespace namespace = factory.createOMNamespace("", 	          null); 	 return factory.createOMElement(source, "removeLink", namespace); /////////////////////////////////////////////// CULPRIT ////////////////////////////////////////////////// 	    } catch (javax.xml.bind.JAXBException bex){ 	 throw org.apache.axis2.AxisFault.makeFault(bex); 	    } 	} 		The above mehods are called by the following calls: 		So whenever we make any af the above  *Link call, it used to form the envelope as follows: 		<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope 	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><axis2ns1:version 	xmlns:axis2ns1="">1.2</axis2ns1:version></soapenv:Header><soapenv:Body><removeLink /////////////////////////////////////////////// CULPRIT ////////////////////////////////////////////////// 		So all calls finally landing to the Server were being processed for removeLink.  		For now, I can fix the aut-generated code for the above methods which takes a extra parameter called apiName which can be passed around without stuff like removeLink  & createIdentity being hardcoded. The DISADVANTGE IS THAT we need to have a static stub version which is checked in our code base which can be used in our build time. This is AVOID us from integrating codeGen within our ANT script. 		As a dev persion, the problem seems to be: 		Lets consider *Link calls..All these above 3 calls take LinkIdentities param. So Axis generates common toEnvelope method which takes LinkIdentities param. Now it should create 4 different "toOM" methods for the following 		CreateLinkedIdentities 	ModifyLiink 	ModifyLiinkReturnGuid 	RemoveLink 		But some how it creates just one method and inside this, the RemoveLink is always hardcoded.
502||One of the most used widely methods of Axis2, the AxisEngine.send() method contains the following code, which causes the send operation to execute within another thread.		                // This boolean property only used in client side fireAndForget invocation	                //It will set a property into message context and if some one has set the	                //property then transport sender will invoke in a diffrent thread	                Object isTransportNonBlocking = msgContext.getProperty(MessageContext.TRANSPORT_NON_BLOCKING);	                if (isTransportNonBlocking != null && ((Boolean) isTransportNonBlocking).booleanValue()) {	                    msgContext.getConfigurationContext().getThreadPool().execute(	                            new TransportNonBlockingInvocationWorker(msgContext, sender));	                } else {	                    sender.invoke(msgContext);	                }	                //REVIEW: In the case of the TransportNonBlockingInvocationWorker, does this need to wait until that finishes?		In addition, the OutOnlyAxisOperation, in its executeImpl() method does:		        // ship it out	        if (!block) {	            mc.setProperty(MessageContext.TRANSPORT_NON_BLOCKING, Boolean.TRUE);	        }		The MessageContext defines this property as:	    /**	     * To invoke fireAndforget method we have to hand over transport sending logic to a thread	     * other wise user has to wait till it get transport response (in the case of HTTP its HTTP	     * 202)	     */	    public static final String TRANSPORT_NON_BLOCKING = "transportNonBlocking";			The AxisEngine code creates a new thread "if the transport is non-blocking" which seems weired. AFAIK, the Kernel code should not be creating any threads like this, nor an AxisOperation set a property on the message about the transport. A transport blocking or non-blocking is outside of the purview of the Axis2 kernel, as even the Axis2 HTTP transports has already been implemented in both blocking and non-blocking manner.
503||The ListenerManagerShutdownThread calls listenerManager.stop( ) and the stop( ) method in turns attempts to unregister the shutdown hook causing an IllegalStateException to be thrown.		Exception in thread "Thread-2" java.lang.IllegalStateException: Shutdown in progress		at java.lang.Shutdown.remove(Shutdown.java:104)		at java.lang.Runtime.removeShutdownHook(Runtime.java:218)		at org.apache.axis2.engine.ListenerManager.stop(ListenerManager.java:155)		at org.apache.axis2.engine.ListenerManager$ListenerManagerShutdownThread.run(ListenerManager.java:258)
504||Hi guys,	   Currently Axis2 does not check whether an incoming SOAP message contains a SOAP body (which is mandatory according to the spec).	Axiom does not do it either and just returns null if body is missing (see SOAPEnvelope#getBody()).		So in the case of missing body users receive a very uninformative fault:		<soapenv:Fault>	    <soapenv:Code>	        <soapenv:Value>soapenv:Receiver</soapenv:Value>	    </soapenv:Code>	    <soapenv:Reason>	        <soapenv:Text xml:lang="en-US">unknown</soapenv:Text>	    </soapenv:Reason>	    <soapenv:Detail />	</soapenv:Fault>		I think this should be handled gracefully with an according error message message.
505||The idea is to make use of MTOM policy assertions (for both the versions 1.0 and 1.1(latter is still a working draft)) for configuring usage of MTOM in a service and get MTOM policy assertions attached to WSDL in order to provide information to Web service clients that the service supports MTOM and the clients can also MTOM-ize mesages they send to the service. 	Therefore it is suggested that a MTOM module will provide the needed functionality. Additionally this module does some validation of the messages exchanged compared to the MTOM policy set, too. 	Currently the general part of the module is already commited and can be used.		This module is compliant with the following specifications:		http://www.w3.org/TR/soap12-mtom/	http://www.w3.org/Submission/WS-MTOMPolicy/	http://www.w3.org/TR/soap12-mtom-policy/
506||org.apache.axis2.saaj.AttachmentTest contains test cases (testMultipleAttachments and testMultipleAttachments2) that build attachments from external URLs (http://www.apache.org/...). This may cause the tests to hang for a long time on systems that are not connected to the Internet and where the connection times out.
507||when generating wsdl 1.1 from axis service http location,input,output types are hardcoded. but in wsdl2 generation it is possible to set these values by modifying WSDL constants.
508||In rev. 733910, the introduction of the custom test runners broke the tests when the tests are built with IBM's JDK.		The paths to the following factories are different for IBM:		                      System.setProperty("javax.xml.soap.MessageFactory",	            		"com.sun.xml.messaging.saaj.soap.ver1_1.SOAPMessageFactory1_1Impl");	            	System.setProperty("javax.xml.soap.SOAPFactory",	            		"com.sun.xml.messaging.saaj.soap.ver1_1.SOAPFactory1_1Impl");	            	System.setProperty("javax.xml.soap.SOAPConnectionFactory",	            		"com.sun.xml.messaging.saaj.client.p2p.HttpSOAPConnectionFactory");	            	System.setProperty("javax.xml.soap.MetaFactory",	            		"com.sun.xml.messaging.saaj.soap.SAAJMetaFactoryImpl");			The simple fix is to properly set these system properties when using IBM's JDK.
509||If a client sends a message without any WS-A headers to a provider with addressing optional and asynchronous only, an OnlyNonAnonymousAddressSupported fault occurs.  This is incorrect because addressing is optional and there aren't any WS-A headers on the message, so the invocation pattern shouldn't be checked.
510||org.apache.axis2.engine.Handler.cleanup() is marked		/**	 * @deprecated This method will be going away after the 1.3 release, it was never used.	 */		This change was made in AXIS2-2857 as a result of AXIS2-653.		It's after the 1.3 release, now, and should be removed.
511||Integration tests are needed for applied patch  Axis2-4194.
512||Eclipse Axis2 Code Generator crashes as well as using xsd2java class from command prompt.	In our case it happens when trying to generate binding that contains xsd file with no namespace defined while trying to use chameleon pattern.	Does this mean that this pattern is not supported?
513||- Define a security policy for a service and deploy it.	- Access a service method which throws an exception  with a client - with the epr http://localhost:8080/axis2/services/SimpleService		[It works fine when you access the service with a binding specific epr, i.e http://localhost:8080/axis2/services/SimpleService.SimpleServiceHttpSoap12Endpoint ]
514||Hi, I'm facing a trouble using the Enpoint.publish() JAXWS API. I've checked several issues that may be related, with no success until now :	https://issues.apache.org/jira/browse/AXIS2-3116?page=com.atlassian.jira.plugin.ext.subversion:subversion-commits-tabpanel	https://wso2.org/jira/browse/CARBON-738		I'm using the last nightly build as some issues were fixed on this kind of thing recently.		I publish a very basic WS Endpoint.publish(String url) API: the service seems to be published (isPublished() returns true), but it fails to return an endpoint reference. My code does this (the code of the web service is at the end of this post):		            Endpoint endPoint = Endpoint.create(new Axis2Test());	            endPoint.publish("http://localhost:8081/services/Test");	            logger.debug("isPublished: " + endPoint.isPublished());	            logger.debug("getProperties: " + endPoint.getProperties());	            logger.debug("getMetadata: " + endPoint.getMetadata());	            logger.debug("getEndpointReference: " + endPoint.getEndpointReference());		This fails on endPoint.getEndpointReference(), an returns:	2009-02-23 11:28:37,242 [main] DEBUG fr.anr.techlog.neurolog.server.LaunchStandaloneWebServices:18 - isPublished: true	2009-02-23 11:28:37,242 [main] DEBUG fr.anr.techlog.neurolog.server.LaunchStandaloneWebServices:19 - getProperties: null	2009-02-23 11:28:37,242 [main] DEBUG fr.anr.techlog.neurolog.server.LaunchStandaloneWebServices:20 - getMetadata: null	2009-02-23 11:28:37,492 [main] FATAL fr.anr.techlog.neurolog.server.LaunchStandaloneWebServices:24 - Unable to create server	java.lang.IllegalStateException: Unable to locate a deployed service that maps to the requested endpoint, Service: {http://mypackage/}Axis2TestService, Port: {http://mypackage/}Axis2TestPort	        at org.apache.axis2.jaxws.addressing.factory.impl.Axis2EndpointReferenceFactoryImpl.createEndpointReference(Axis2EndpointReferenceFactoryImpl.java:66)	        at org.apache.axis2.jaxws.addressing.factory.impl.Axis2EndpointReferenceFactoryImpl.createEndpointReference(Axis2EndpointReferenceFactoryImpl.java:97)	        at org.apache.axis2.jaxws.addressing.util.EndpointReferenceUtils.createAxis2EndpointReference(EndpointReferenceUtils.java:133)	        at org.apache.axis2.jaxws.server.endpoint.EndpointImpl.getEndpointReference(EndpointImpl.java:244)	        at org.apache.axis2.jaxws.server.endpoint.EndpointImpl.getEndpointReference(EndpointImpl.java:261)	        at mypackage.LaunchA2xis2Test.main(LaunchA2xis2Test.java:21)		Also, accessing the service using Firefox returns this :	2009-02-23 11:52:46,184 [HttpConnection-8081-2] ERROR org.apache.axis2.engine.AxisEngine:212 - The service cannot be found for the endpoint reference (EPR) /services/Test?wsdl	org.apache.axis2.AxisFault: The service cannot be found for the endpoint reference (EPR) /services/Test?wsdl	        at org.apache.axis2.engine.DispatchPhase.checkPostConditions(DispatchPhase.java:65)	        at org.apache.axis2.engine.Phase.invoke(Phase.java:333)	        at org.apache.axis2.engine.AxisEngine.invoke(AxisEngine.java:264)	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:163)	        at org.apache.axis2.transport.http.util.RESTUtil.invokeAxisEngine(RESTUtil.java:136)	        at org.apache.axis2.transport.http.util.RESTUtil.processURLRequest(RESTUtil.java:130)	        at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:257)	        at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:281)	        at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:187)	        at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:82)	        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1061)	        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)	        at java.lang.Thread.run(Thread.java:619)			In addition, a quite curious behaviour is this: when I get this URL, http://localhost:8081/services/Axis2TestService.Axis2TestPort, I get a proper service page with a correct list of available operations. However the link to the wsdl (http://localhost:8081/services/Axis2TestService.Axis2TestPort?wsdl) returns another error : 	2009-02-23 11:55:31,728 [HttpConnection-8081-4] WARN  org.apache.axis2.description.AxisService:1003 - Unable to generate EPR for the transport : http			My web service code is the most simple that could be:		import javax.jws.WebService;		@WebService	public class Axis2Test	{	    public Axis2Test() {}		    public int getNumber() {	        return 0;	    }	}
515||I tried to deploy the axis2  ver 1.4.1 in websphere 6.1 with jdk 1.5 and wanted to load the modules from the classpath., which did not work. In websphere a jar URL will be starting with "wsjar" instead of  "jar" for eg.  the addressing module xml file came up like wsjar:file:/opt/IBM/WebSphere/xyz/xyz.ear/addressing-1.4.1.jar!/META-NNF/module.xml.		To overcome this issue in the class org.apache.axis2.deployment.RepositoryListener, method name "loadClassPathModules()", i changed its implementation to also look for "wsjar" instead of  just "jar"  and "file". Also since the "wsjar" is not actually an instance of  "java.net.JarURLConnection", we can't use directly this way of getting the URL of the jar	((java.net.JarURLConnection)url.openConnection()).getJarFileURL();		One more "else if" clause was added for "wsjar" and its file name was fetched directly by doing		else if (fileName.startsWith("wsjar")) {	    fileName =fileName.substring("wsjar:".length());	    fileName =fileName.substring(0, fileName.lastIndexOf("!/META-INF/module.xml"));	}		Thanks	Vijay
516||If IOException occurs, new AxisFault(e.getMessage()) is called, but should new AxisFault(e) to be called to preserve exception root cause information		(i have strange error about missing TCP transport while i'm using only HTTP, and i can't figure where and why exactly - because of missing root exception)
517||When using Transformer API to build a SOAP message from DOM with comment nodes can create an invalid DOM document: 		Input: 		<root> 	   <a> 	      <!-- this is a test with a comment node --> 	   </a> 	</root> 		Final (invalid) doc: 		<root> 	   <a> 	      <!--<!-- this is a test with a comment node -->--> 	   </a> 	</root>
518||Hello there, 		I'm invoking a service using a ServiceClient, the wsdl operation declares an empty soapAction. 	However the soapActiuon actually sent is "urn:anonOutInOp" which the server refuses. This action is the action the anonymous operation "urn:anonOutInOp" and is set by the ServiceClient. 		Later when CommonsHTTPTransportSender#findSOAPAction [1] is invoked, if the action of the MessageContext is null or empty, the operation action is used.  The empty case seems like a bug, because this is the action set in the wsdl and it is not applied. 	This opinion is strengthened by the fact that other senders do not have this behavior. 		The right behavior would be: 	if null ; use the operation action as a default 	if empty ; send an empty soapAction 		Could you confirm please? 		Alexis 		[1] http://is.gd/m0Mt
519||When I attempt to stop and cleanup the ListenerManager for a closed SOAP connection with either the stop() or destroy() method two Timer threads remain active in the waiting state.  I tracked it down to the "final" timer created for each instance of a Scheduler object.  During the initialization of the ListenerManager,  the Scheduler is created during execution of the startSearch() method of the DeploymentEngine.  This method is called twice during the creation of the ConfigurationContext.  Once for the FileSystemConfigurator and again for the ScriptDeploymentEngine (when initializing the ScriptModule) 		Here is how I create the ConfigurationContext and ListenerManager: 	            ConfigurationContext configctx = 	                ConfigurationContextFactory.createConfigurationContextFromFileSystem(m_repoLocation, 	                                                                                     m_confLocation);  // -- THIS IS WHEN THE TWO TIMERS ARE CREATED 	            AxisConfiguration aconf = configctx.getAxisConfiguration(); 	            TransportInDescription tid = aconf.getTransportIn("http"); 	            Parameter param = tid.getParameter("port"); 	            param.setValue(getServerPortString()); 		            m_listenerManager = new ListenerManager(); 	            m_listenerManager.init(configctx); 	            m_listenerManager.start(); 		I have managed to cleanup the Timer associated the Scheduler for the FileSystemConfigurator, but I cannot find a way to cleanup the TImer for the ScriptDeploymentEngine: 		Here is my current cleanup code: 		            m_listenerManager.stop(); 	            m_listenerManager.getConfigctx().cleanupContexts(); 	            m_listenerManager.getConfigctx().terminate();   // -- THIS CALL WILL CLEANUP ONE OF THE TIMERS 	            m_listenerManager.destroy(); 		Our application can create and shutdown SOAP communications to various servers numerous times and each time we are "leaking" this one Timer object (Thread).  At some point, Java throws the following exception (java.lang.OutOfMemoryError: unable to create new native thread) and we have to kill the program)
520||A client generated with wsdl2java.sh with no options except -uri throws an "Unexpected subelement" exception when a method returns an object that has a null member of type Object. 		The Web Service is an Axis2 POJO Web Service.
521||When trying to build Axis2 trunk with Axiom 1.2.9-SNAPSHOT (instead of 1.2.8), I noticed a regression in RPCCallTest#testCompanyArray related to the fact that StAXOMBuilder#next() no longer accepts START_DOCUMENT events: if a START_DOCUMENT event is received from the underlying parser in the middle of the document, an exception is triggered (This behavior changed in r744780). Obviously this should never happen if the XMLStreamReader behaves correctly, but under some circumstances ADBXMLStreamReaderImpl generates this type of events.
522||In the current Axis2 JAXWS implementation, WSDL is generated through a separate WSDLSupplier. It doesn't use the AxisService object at all. If someone programatically adds a policy into a JAXWS service, this policy is not shown in the WSDL when ?wsdl is called. Therefore a client won't be able to invoke this service. 		In JAXWS service deployment, there are 2 cases 	1. buildAxisServiceFromWSDL 	2. buildAxisServiceFromAnnotations 		In case 1, AxisService is built using WSDL11ToAxisServiceBuilder. Therefore in this case, WSDL can be generated in the normal way without using this WSDLSupplier. But in case 2, AxisService object doesn't contain a schema in it and the WSDL can't be generated in the normal way. I think that's why this WSDLSupplier is used. 		In order to fix this issue, I've generated the WSDL from this WSDLSupplier in the deployment time and then used the WSDL11ToAxisServiceBuilder to build the AxisService. Now we don't want this WSDLSupplier (when ?wsdl is called) in both the above cases and policies are shown in the WSDL properly. 		I've added a parameter into axis2.xml as "useGeneratedWSDLinJAXWS". By default it is false and the behavior is exactly as it was before this fix. If it is set to true, this new behavior is turned on and the WSDLSupplier is not registered. 		I'm attaching the patch to this JIRA
523||If JarFileClassLoader contains one classpath entry that is a directory, it will allow resources to be loaded from ANY directory on the file system. 		The JarFileClassLoader should of course only allow resources to be loaded from within the directory specified.
524||This patch is attached in response to the following mail thread. 		http://www.nabble.com/Improvements-to-Axis2-Faulty-Services-Handling-td22448235.html 		A service can become faulty due to a module which is not yet deployed. When this module deployed, the faulty services due to this module should recovered. This patch will enable axis2 to handle this scenario. 		Thanks 	Sameera
525||Every time I throw an application fault the error gets displayed in server side as an error. 		To reproduce: run the faulthandling example from the distribution (xis2-1.4.1/samples/faulthandling) 		In the server side you get: 		ERROR] Account does not exist! 	org.apache.axis2.AxisFault: Account does not exist! 	    at example.BankServiceMessageReceiverInOut.createAxisFault(BankServiceMessageReceiverInOut.java:237) 	    at example.BankServiceMessageReceiverInOut.invokeBusinessLogic(BankServiceMessageReceiverInOut.java:75) 	    at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) 	    at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:100) 	    at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:176) 	    at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:275) 	    at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:278) 	    at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:281) 	    at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:187) 	    at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:82) 	    at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1061) 	    at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575) 	    at java.lang.Thread.run(Thread.java:613) 			I tracked the source of the error and it is in class AxisEngine line 212 where it blindly logs all faults as errors: 		catch (AxisFault e) { 	            log.error(e.getMessage(), e);  // <<<<< 	            msgContext.setFailureReason(e); 	            flowComplete(msgContext); 	            throw e; 	        } 		Now, the only way to deal with it now is to switch off logging which is never a good idea. This is a serious bad issue if you want to use faults.
526||Hello 	i dont know if it is a vulnerability or it is an issue of missconfiguration. 		The problem occur by doing the following things, 		http://localhost:8080/InsaneService/services/WSInsane?xsd=/../../../WEB-INF/conf/axis2.xml 		i was able to get these files displayed by the web browser. Once i tried this,  	furthermore i was also able to get public and private keystore/truststore located in the WEB-IN dir as well. 		So please let me know if it is a missconfiguration, and tell me how i can configure more securely. 	If its a bug please let me also know! 		Thank you in advance! 	Wolfram
527||In saaj's pom.xml, the targetPath that the *.properties are being copied to is empty.  This results in the build attempting to copy the file into '/' 		<testResource> 	    <targetPath></targetPath>  <!-- Not good. --> 	    <directory>test-resources</directory> 	    <includes> 	       <include>**/*.properties</include> 	    </includes> 	</testResource>
528||Hi all, 	I am opening a new JIRA related to the HttpState association with a given Axis client. 		The use case 	I want to point out a concrete use case I have. I want to reuse a HttpClient among different instances of a clients which are executed in different threads. Every client can make several invocations. The clients can call different Web Services (WSs) deployed at different hosts/servers. As a consequence every client may need to provide different authentication Credentials and may need to support transport sessions using Cookies. 		Both Credentials and Cookies are part of the HttpState. As a result the HttpState associated with the HttpClient that is reused cannot be reused that easily in the scenario described above. Credentials are associated with a given host, port, realm and authentication schema (defines the AuthScope object used as a key for the credentials Map part of the HttpState). 		Following is an excerpt from the AbstractHTTPSender#setAuthenticationInfo: 		creds = new UsernamePasswordCredentials(username, password); 	agent.getState().setCredentials(new AuthScope(host, port, realm), creds); 		Credentials are kept into a Map and could be identified uniquely from client to client (thread to thread), but this Map is exposed to all clients which reuse the HttpClient which is not a good idea. 		The situation with the other member of the HttpState (i.e. Cookies) is similar. When we have *different* client instances (configured to use cookies options.setManageSession(true)) calling one and the same WS's operation then the effect is that both are sharing one JSESSIONID. 		The proposal 	The proposal is based on my question posted at httpclient-users@hc.apache.org [2] 	The idea is to provide the capability to specify/associate a separate HttpState with every client and still reuse one and the same HttpClient. What you just need is to pass it as a parameter to the HttpClient#executeMethod. 	I decided that the HttpState should be kept into the ServiceContext. I did all changes needed in Axis2 kernel (in fact they are really few) and added the possibility to use a separate HttpState and invoke HttpClient#executeMethod passing it as a parameter. The changes keep the kernel backward compatible. I did and several tests and it looks good. 		Please, give me your comments. Do you like this extension? If so I can provide you with the changes and finally we can agree on committing them into the kernel.  		I have the patches but we are using a little bit older version of axis2 .I need some time to apply the changes to the trunk version. Then I will provide them.  	Although I am a WS committer I can not commit anything since I am still waiting my company's lawyers to check all aspects of this.  		Thank you, 	Dobri 		[1] http://www.mail-archive.com/axis-dev@ws.apache.org/msg45787.html 	[2] http://www.mail-archive.com/httpclient-users@hc.apache.org/msg01944.html
529||I think there is a problem with axis2 	osgi modules.This is my example 		        1) axis2-kernel.1.4.1.jar exports "org.apache.axis2.util" version  	=0.0.0 	        2) axis2-adb-1.41.jar exports "org.apache.axis2.util" version =0.0.0  	( a package with the same name) 	        3) tuscany-binding-ws-axis2-2.0-M1.jar imports  	"org.apache.axis2.util" version=0.0.0 		Both packages are called with the same name but they have differents  	classes. Only the first one contains "TargetResolver" class.  	Tuscany-binding-ws-axis2 bundle imports the wrong package because all  	exported packages have the same version and OSGi framework resolve then by  	bundle id. 		I have fixed this changing version of exported package from axis2-kernel. If  	it exports a bigger version, tuscany-binding can recover the right package. 		OSGi only will register the first package from the different installed bundles. So it is very important, that embeded packages to be exported in several bundles will include the same set of classes or if they are different  they must havedifferent versions 		Thank you.
530||ListenerManager should initialize all the listeners while initializing the listener manager, and starting of the ListenerManager should start the listeners. 		Further, for synapse requirements we need to get rid of the shutdown hook and there has to be an option to not to set the shutdown hook while starting the listener manager. 		this is required in the 1.5 release because synapse 1.3 is going to depend on the 1.5 release of axis2.
531||when I run the quickstartjibx sample as given in the README.txt got the following exception at the 	server side  		org.apache.axis2.AxisFault 	        at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 	        at samples.quickstart.service.jibx.StockQuoteServiceMessageReceiverInOut.invokeBusinessLogic(StockQuoteServiceMessageReceiverInOut.java:53) 	        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) 	        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114) 	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:173) 	        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:167) 	        at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:267) 	        at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:281) 	        at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:187) 	        at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:82) 	        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) 	        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) 	        at java.lang.Thread.run(Thread.java:595) 	Caused by: java.lang.RuntimeException 	        at samples.quickstart.service.jibx.StockQuoteServiceMessageReceiverInOut.getNewUnmarshalContext(StockQuoteServiceMessageReceiverInOut.java:130) 	        at samples.quickstart.service.jibx.StockQuoteServiceMessageReceiverInOut.jibxReceiver1(StockQuoteServiceMessageReceiverInOut.java:216) 	        at samples.quickstart.service.jibx.StockQuoteServiceMessageReceiverInOut.invokeBusinessLogic(StockQuoteServiceMessageReceiverInOut.java:42
532||org.apache.axis2.transport.http.SoapMessageFormatter, line 67, contains a bitwise & instead of a logical &&.   		It's the same result, but it takes a brain cycle and a ctrl-click to realize that nothing special's going on...
533||Small patch cleaning up some minor things in BaseAxisDataLocator: 		- Short circuit when we know we're going to return an empty array. 	- Clean to 1.5isms. 	- When calling ArrayList.toArray(), pass in appropriately sized array.
534||Herewith I am attaching a patch. This patch will enable users to add deployers programmatically. Here in this patch, I have added two method to the DeploymentEngine. They are  		public void addDeployer(Deployer deployer, String directory, String extension); 	public void removeDeployer(String directory, String extension); 		This patch won't break anything but will extend Axis2 API
535||3 areas currently using commons-httpclient 3.1: 		1. The code that interfaces between Axis2 and the underlying 	transport, e.g. the Stub class. This code only refers to 	org.apache.commons.httpclient.Header and could easily be made 	independent of commons-httpclient. This is what the patch in 	AXIS2-3933 does. 		2. MultipartFormDataFormatter uses code from commons-httpclient to 	build multipart/form-data requests. Maybe this code should be 	rewritten to use HttpMime [1] and/or mime4j. 		3. The code in the HTTP transport. Note that in Axis2 1.5 this code is 	no longer part of the kernel and lives in a separate module. The core 	question here is whether we should upgrade that code from 	commons-httpclient 3.1 to HttpClient 4.0 or if it is better to keep 	two separate transport sender implementations (at least temporarily). 	It would be interesting to get Oleg's opinion on this. 		For the legal issue around NTLM, I think the best solution is to allow 	the user to register additional AuthSchemeFactory classes in the 	transport configuration in axis2.xml. People who need NTLM can than 	use the code from [2]. 		[1] http://hc.apache.org/httpcomponents-client/httpmime/index.html 	[2] http://hc.apache.org/httpcomponents-client/ntlm.html 		I am willing to provide a patch to upgrade to httpclient 4.0. I have completed some work locally and I believe most of the existing functionality has been replicated successfully in httpclient 4.0 but still more areas need to be settled before the local work becomes a candidate for commit into the trunk. 		Unanswered questions/proposals: 		1) I assume upgrading to httpclient 4.0 rather than providing a separate transport is the best long term solution. 		2) Drop support for HTTPConstants.CUSTOM_PROTOCOL_HANDLER option 		Reason DefaultHttpClient already supports http and https schemes by default do we really want to allow a user to use a different scheme/socketfactory combination? This doesn't seem to be a commonly used feature. 		If we still need to support this option then an instance of Scheme would need to be passed in by the user and registered in the SchemeRegistry in turn used to build the HttpClient. We can no longer use a DefaultHttpClient if we do this, we would have to extend it most likely. 		3) drop authenticator preemptive authentication support 		Preemptive authentication is considered unsecure and is strongly discouraged. Moreover the code found in examples: http://hc.apache.org/httpcomponents-client/examples.html is no longer officially supported. Which means that we should drop preemptive authentication support from the trunk; alternatively we can allow a number of pluggable mechanisms to allow users to enable preemptive auth. The user would have to provide HttpRequestInterceptor and HttpResponseInterceptor implementations as well as a means to properties to configure a BasicHttpContext for use with the HttpClient. As a workaround/alternative the user could fully initialize it's own AbstractHttpClient instance and pass it through the existing CACHED_HTTP_CLIENT option. 		3) Drop support for HTTPConstants.AUTO_RELEASE_CONNECTION 		httpclient 4.0 already releases http connections (to the connection pool) after every http method execution. Therefore this property becomes obsolete. 		4) Axis2 and java compiler source compliance setting? I see that some axis2 modules still compile with 1.4 source compliance. Should this be supported? On mailing lists I saw that Axis2 already started moving to java 5. Should Axis2 1.4 kernel module still use java compliance 1.4, should we change source compliance for the kernel to 1.5?
536||I reopen issue AXIS2-3870, because the fix is half baked. It does a proper clean-up job for AxisConfiguration#removeServiceGroup but omits AxisConfiguration#removeService.
537||Some of the improvements done on the Axis2 trunk  after  branching are not merged to Axis2 1.5 branch.
538||the code in class JAXWSDeployer method getListOfClasses tries to transform the name of a class file to a real java class name. 	The logic fails if the classname contains something like "proclassic", since the execution of 	  name = name.replaceAll(".class", ""); 	does not only remove the ".class" at the end but also the "oclass" in the middle of the file name. 	replaceAll interprets the arguments as regular expression and the "." stands for "Any character". 		The error could be prevented by changing the call to replaceAll(".class$", "") - only matching on .class at the end of the line. Or by replacing the replaceAll call with cutting the last 6 characters (since it's already ensured that the string ends with ".class").
539||I am making a small change to improve performance when a JAX-WS provider<OM> is used by an application. Currently when a message block is represented by OM, we are expanding OM before we serialize, this change is to avoid OM Expansion and directly serialize the xml represented by OM into an Output Stream there by improving the performance and avioding un necessary expansion of OM.
540||The Java2WSDLBuilder.setServiceEPR(), Utils.addSoap12Endpoint(), and Utils.addSoap11Endpoint() methods should use URI instead of URL. The WSDL specification says that the location attribute for a SOAP address needs to be a URI, not a URL. The existing code causes a MalformedURLException when you are defining a JMS endpoint with certain parameters in the URI value. For example: 		jms:/myMDB.JMSQueue?transport.jms.DestinationType=queue&amp;transport.jms.ConnectionFactoryJNDIName=my.jms.queue.connection.factory&amp;java.naming.factory.initial=weblogic.jndi.WLInitialContextFactory&amp;java.naming.provider.url=t3://localhost:7001 		I don't think it likes the 'jms:/' and also the last value for the java.naming.provider.url parameter 		This is a valid URI, however.
541||I have an improvement I'd like to commit. 		Background:  JAX-WS handlers can retrieve and manipulate SOAP headers if they wish.  However, this is a relatively expensive operation, considering the transformation of the underlying message OM data from Axiom to SAAJ (JAX-WS spec requires SAAJ, but for efficiency reasons, JAX-WS implentation uses Axiom under the covers). 		Proposal:  Allow JAX-WS handler implementations to retrieve and manipulate SOAP headers by allowing them to retrieve headers off the MessageContext parameter passed into them. 		The patch is trivial to enable this support.  Writing tests was the big effort in putting this together.  See patch.
542||Currently Axis2 follows the parent first class loading for service and module loading.  		The reason for this is it uses DeploymentClassLoader loader which is extended from the ClassLoader class. 		The loadClass method of the ClassLoader class looks like this. 		protected synchronized Class<?> loadClass(String name, boolean resolve) 		throws ClassNotFoundException 	    { 		// First, check if the class has already been loaded 		Class c = findLoadedClass(name); 		if (c == null) { 		    try { 			if (parent != null) { 			    c = parent.loadClass(name, false); 			} else { 			    c = findBootstrapClass0(name); 			} 		    } catch (ClassNotFoundException e) { 		        // If still not found, then invoke findClass in order 		        // to find the class. 		        c = findClass(name); 		    } 		} 		if (resolve) { 		    resolveClass(c); 		} 		return c; 	    } 		it first check for parent class loader classes and then for its classes. So we can add child first class loading simply reversing this order in a override loadClass method as follows. 		protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { 		        Class c = findLoadedClass(name); 	        if (c == null) { 	            try { 	                c = findClass(name); 	            } catch (Exception e) { 	                c = super.loadClass(name, resolve); 	            } 	        } 	        return c; 	    }
543||I am using the ServiceClient to invoke a Web Service, but the WSDL file and imported schema files are located within a jar file that is in the Classpth. I can get the Definition object, and I set the DocumentBaseURI to the proper URL pointing inside the jar file, but when I pass it to the ServiceClient I get an error saying that it can't resolve the imported schema files. This happens when it calls AxisService.createClientSideAxisService(). 		It looks like a fix was put in the WSDLToAxisServiceBuilder class (the addition of the setCustomResolver() method) so that you can set a custom URIResolver to resolve imported schema files. This gets inherited by the WSDL11ToAxisServiceBuilder, however the problem is that this setter is not exposed to the ServiceClient, so I can never use it.  The ServiceClient constructors and the AxisService.createClientSideAxisService() methods should take in an additional argument so that calling code can pass in the right URIResolver instance which would get set on the WSDL11ToAxisServiceBuilder instance.
544||For reference, the default and fixed constraints are defined here: 	http://www.w3.org/TR/xmlschema-1/#e-value_constraint 		Consider the following XML schema definitions: 		<xs:element name="ResultCode" type="tns:ResultCode" /> 	<xs:complexType name="ResultCode"> 	    <xs:sequence> 	        <xs:element name="code" default="0" type="xs:long" /> 	    </xs:sequence> 	</xs:complexType> 		<xs:element name="SuccessCode" type="tns:SuccessCode" /> 	<xs:complexType name="SuccessCode"> 	    <xs:sequence> 	        <xs:element name="code" fixed="0" type="xs:long" /> 	    </xs:sequence> 	</xs:complexType> 		ADB code generated for the ResultCode element is correct in setting the default value of the code field to 0: 		    protected long localCode = org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("0"); 		ADB code generated for the SuccessCode element is incorrect according to XSD definition for the fixed element.  It actually appears to completely ignore the fixed attribute.  Considering the XSD definition for the fixed attribute, I think the generated code should declare the code field as final and set the final value as follows: 		    protected final long localCode = org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("0"); 		It follows that the generated code should not contain a setter method for the code field.
545||The -xc option for java2wsdl doesn't work in 1.5. 		The option is still documented, and the extraClasses member is still in DefaultSchemaGenerator, but the code that added the extra classes to the schema seems to have been removed.
546||Getting the following error  	rg.apache.axis2.AxisFault: org.apache.axis2.databinding.ADBException: Unexpected subelement address1 		at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 		at com.example.company.CompanyStub.fromOM(CompanyStub.java:543) 		at com.example.company.CompanyStub.getCompanyDetails(CompanyStub.java:183) 		at org.example.www.company.CallService.main(CallService.java:35) 	Caused by: java.lang.Exception: org.apache.axis2.databinding.ADBException: Unexpected subelement address1 		at com.test.service.provider.shared.companytype._2009._02.Address_type$Factory.parse(Address_type.java:675) 		at com.test.service.provider.shared.companyflow._2009._02.CompanyResponse$Factory.parse(CompanyResponse.java:553) 		at com.example.company.GetCompanyDetailsResponse$Factory.parse(GetCompanyDetailsResponse.java:419) 		at com.example.company.CompanyStub.fromOM(CompanyStub.java:538) 		... 2 more 	Caused by: org.apache.axis2.databinding.ADBException: Unexpected subelement address1 		at com.test.service.provider.shared.companytype._2009._02.Address_type$Factory.parse(Address_type.java:669) 		... 5 more
547||When a service become faulty due to a module, there is no information about it. Users does not have anyway to get to know it. And the default faulty list is also not updated.
548||Initially posted by Boris Klug on the mailing list: http://markmail.org/thread/ttag7rc32uf2x7o5 		Hi! 		I created a wsdl which contains a attribute/value pair where the 	value is definied as xsd:anyType: 		<xs:complexType name="ZAttributeValue"> 	 <xs:sequence> 	   <xs:element name="name"                        type="xs:string" /> 	   <xs:element name="displayName" nillable="true" type="xs:string" /> 	   <xs:element name="value"       nillable="true" type="xs:anyType" /> 	   <xs:element name="className"   nillable="true" type="xs:string" /> 	 </xs:sequence> 	 </xs:complexType> 		Now I used wsdl2java to create client and server code using adb data binding. 		When value is "" (=empty string), the client throws this exception: 		Exception in thread "main" org.apache.axis2.AxisFault: Current state END_ELEMENT is not among the statesCHARACTERS, COMMENT, CDATA, SPACE, ENTITY_REFERENCE, DTD valid for getText() 	       at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 	       at de.mypackage.ZederbasicServiceStub.fromOM(ZederbasicServiceStub.java:8846) 	       at de.mypackage.ZederbasicServiceStub.getZEDERObjects(ZederbasicServiceStub.java:1028) 	       at ZederBasicClientTest.main(ZederBasicClientTest.java:36) 	Caused by: java.lang.IllegalStateException: Current state END_ELEMENT is not among the statesCHARACTERS, COMMENT, CDATA, SPACE, ENTITY_REFERENCE, DTD valid for getText() 	       at com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.getText(XMLStreamReaderImpl.java:1052) 	       at org.apache.axiom.om.impl.llom.OMStAXWrapper.getText(OMStAXWrapper.java:418) 	       at org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(ConverterUtil.java:1528) 	       at de.debeka.repository.zws 		In this case, the soap message looks like this: 		<attributes xmlns="http://model.zws2.boq.debeka.gen/xsd"> 	 <name>HINWEIS</name> 	 <displayName>Hinweis</displayName> 	 <value xmlns:s45="http://www.w3.org/2001/XMLSchema-instance" xmlns:s46="http://www.w3.org/2001/XMLSchema" s45:type="s46:string"> 	 </value> 	 <className>java.lang.String</className> 	</attributes> 		When value is set to null, I get this exception: 		Exception in thread "main" org.apache.axis2.AxisFault: org.apache.axis2.databinding.ADBException: Unexpected subelement value 	       at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 	       at de.mypackage.ZederbasicServiceStub.fromOM(ZederbasicServiceStub.java:8846) 	       at de.mypackage.ZederbasicServiceStub.getZEDERObjects(ZederbasicServiceStub.java:1028) 	       at ZederBasicClientTest.main(ZederBasicClientTest.java:36) 	Caused by: java.lang.Exception: org.apache.axis2.databinding.ADBException: Unexpected subelement value 	       at de.mypackage.ZederbasicServiceStub$ZAttributeValue$Factory.parse(ZederbasicServiceStub.java:2583) 	       at de.mypackage.ZederbasicServiceStub$ZDataObject$Factory.parse(ZederbasicServiceStub.java:7596) 	       at de.mypackage.ZederbasicServiceStub$GetZEDERObjectsResponse$Factory.parse(ZederbasicServiceStub.java:4833) 	       at de.mypackage.ZederbasicServiceStub.fromOM(ZederbasicServiceStub.java:8833) 	       ... 2 more 	Caused by: org.apache.axis2.databinding.ADBException: Unexpected subelement value 	       at de.mypackage.ZederbasicServiceStub$ZAttributeValue$Factory.parse(ZederbasicServiceStub.java:2569) 	       ... 5 more 		The soap message is: 		<attributes xmlns="http://model.zws2.boq.debeka.gen/xsd"> 	 <name>KLASSE</name> 	 <displayName xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="1" /> 	 <value xmlns:s29="http://www.w3.org/2001/XMLSchema-instance" xmlns:s30="http://www.w3.org/2001/XMLSchema" s29:type="s30:string">C_Jobplan</value> 	 <className>java.lang.Integer</className> 	</attributes> 			I tried Axis2 1.4.1 and the new 1.5 version. The whole problem with nil and 	empty string values only exists with anyType, not if the element is declared 	as string or something else. 		I really need anyType here. 		Thank you for your help in advance.
549||If a request parameter in a SOAP or REST request to a POJO web service is not of the expected type, the error messages that are returned to the client and that appear in the logs are often not very good. For example, the faultcode is soapenv:Receiver (should be soapenv:Sender since the error was caused by an invalid request), and the name of the offending parameter or field doesn't appear anywhere. 		Here is a sample request (args0 is declared as xs:int): 		<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:axis="http://ws.apache.org/axis2"> 	   <soap:Header/> 	   <soap:Body> 	      <axis:echoInt> 	         <!--Optional:--> 	         <axis:args0>?</axis:args0> 	      </axis:echoInt> 	   </soap:Body> 	</soap:Envelope> 		The response is: 		<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"> 	   <soapenv:Body> 	      <soapenv:Fault> 	         <soapenv:Code> 	            <soapenv:Value>soapenv:Receiver</soapenv:Value> 	         </soapenv:Code> 	         <soapenv:Reason> 	            <soapenv:Text xml:lang="en-US">For input string: "?"</soapenv:Text> 	         </soapenv:Reason> 	         <soapenv:Detail/> 	      </soapenv:Fault> 	   </soapenv:Body> 	</soapenv:Envelope> 		The tomcat log contains: 		[ERROR] For input string: "?"                                                                                                                                             	java.lang.NumberFormatException: For input string: "?"                                                                                                                    	        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)                                                                                  	        at java.lang.Integer.parseInt(Integer.java:447)                                                                                                                   	        at java.lang.Integer.<init>(Integer.java:620)                                                                                                                     	        at org.apache.axis2.databinding.typemapping.SimpleTypeMapper.getSimpleTypeObject(SimpleTypeMapper.java:80)                                                        	        at org.apache.axis2.databinding.utils.BeanUtil.processObject(BeanUtil.java:675)                                                                                   	        at org.apache.axis2.databinding.utils.BeanUtil.ProcessElement(BeanUtil.java:630)                                                                                  	        at org.apache.axis2.databinding.utils.BeanUtil.deserialize(BeanUtil.java:562)                                                                                     	        at org.apache.axis2.rpc.receivers.RPCUtil.processRequest(RPCUtil.java:153)                                                                                        	        at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:188)                                                                                    	        at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:102)                                                             	        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)                                              	        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114)                                                                   	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:173)                                                                                                	        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:167)                                                         	        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:142)                                                                                       	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)                                                                                                   	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	        at org.josso.tc60.agent.SSOAgentValve.invoke(SSOAgentValve.java:275) 	        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) 	        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) 	        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) 	        at java.lang.Thread.run(Thread.java:619) 	[ERROR] For input string: "?" 	org.apache.axis2.AxisFault: For input string: "?" 	        at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 	        at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:161) 	        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) 	        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114) 	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:173) 	        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:167) 	        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:142) 	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) 	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	        at org.josso.tc60.agent.SSOAgentValve.invoke(SSOAgentValve.java:275) 	        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) 	        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) 	        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) 	        at java.lang.Thread.run(Thread.java:619) 	Caused by: java.lang.NumberFormatException: For input string: "?" 	        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48) 	        at java.lang.Integer.parseInt(Integer.java:447) 	        at java.lang.Integer.<init>(Integer.java:620) 	        at org.apache.axis2.databinding.typemapping.SimpleTypeMapper.getSimpleTypeObject(SimpleTypeMapper.java:80) 	        at org.apache.axis2.databinding.utils.BeanUtil.processObject(BeanUtil.java:675) 	        at org.apache.axis2.databinding.utils.BeanUtil.ProcessElement(BeanUtil.java:630) 	        at org.apache.axis2.databinding.utils.BeanUtil.deserialize(BeanUtil.java:562) 	        at org.apache.axis2.rpc.receivers.RPCUtil.processRequest(RPCUtil.java:153) 	        at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:188) 	        at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:102) 	        ... 20 more
550||Scenario: 	A customer can supply JAX-WS application handlers with their application.  The customer indicates which handlers are run by providing an xml file describing the handler chain.           		The following example xml file indicates that test.MyHandler handler should be run for all ports (*).                         		<jws:handler-chains                                              	xmlns:jws="http://java.sun.com/xml/ns/javaee">                   	  <jws:handler-chain name="MyHandlerChain">                      	      <jws:protocol-bindings>some value</jws:protocol-bindings>  	     <jws:port-name-pattern>*</jws:port-name-pattern>            	      <jws:handler>                                              	         <jws:handler-class>test.MyHandler</jws:handler-class>   	      </jws:handler>                                             	  </jws-handler-chain>                                           	</jws:handler-chains>                                            		Due to an error introduced by a prior fix, this scenario will not succeed.  The test.MyHandler handler will not run, and no errors are reported by the JAX-WS engine.   		This failure is limited to the case where the customer uses a single wildcard (*) in the <jws:port-name-pattern> or  <jws:service-name-pattern>. 		Solution: 	The JAX-WS runtime code that performs the regular expression evaluation for the <jws:port-name-pattern> and  <jws:service-name-pattern> elements is incorrect.   	I am working on a fix that will correct the algorithm.  I will also provide unit tests to verify the behavior.
551||A JAX-WS Service Endpoint Interface (SEI) may contain @XmlSeeAlso annotations.  These annotations inform the runtime about the existence of specific classes that are not directly referencedby the web service.  The JAX-WS runtime uses the annotations to determine how to marshal or unmarshal data objects.                                                         		Due to a problem in the JAX-WS runtime, these annotations are not being processed correctly.  This may cause the JAX-WS runtime to unmarshal the data objects as Data Object Model (DOM) Elements instead of JAXB objects.  When the web service application attempts to process the data object an error may occur indicating that the DOM Element is  incompatible with a user class.  Example:                        		javax.xml.ws.soap.SOAPFaultException:                            	org.apache.xerces.dom.ElementNSImpl incompatible with some_class 	org.apache.axis2.jaxws.marshaller.impl.alt.MethodMarshallerUtils 	... 		The root of the problem is that the SEI is not being correctly located for the scenario where the web service implementation does not implment the SEI but instead 	uses the @WebService endpointInterface parameter to designate the SEI. 		The solution is to locate and load the SEI for this scenario, and process the @XmlSeeAlso annotations on the SEI. 		I am completing my testing on the solution.
552||Problem: 	There are five different client invoke entry points into the web service engine.   	Four are in BaseDispatch: 	  - synchronous invoke 	  - invokeOneWay 	  - invokeAsync (Future) 	  - invokeAsync (Callback) 		And one in JAXWSProxyhanderl 	  -invokeSEIMethod 		There have been several bug fixes/improvements over the past year where developers have added code to one or more of these methods 	and neglected the same change in the other methods.  The most recent example is some session managrment (changes). 		Solution: 	Scrub the code to look for any other obvious mistakes.  Add comments to assist developers when changing the code.  Add debug statements as necessary. 		Next Actions: 	Paul Mariduena has completed this work in his sandbox.  I am working on committing the code to Apache.
553||I'm attaching my sample jaxws service and its source code. 		In JAXWS services, body and header parts are kept as org.apache.axis2.jaxws.message.impl.BlockImpl objects. These message blocks are read before invoking the service and all are set as "consumed". 		But in this sample service, I want to access Reference Parameters and I've done that using the following line. 		List<Element> referenceParam = (List<Element>) context.getMessageContext().get(MessageContext.REFERENCE_PARAMETERS); 		And also this service is expecting a header which is called "TestHeader" and it is already consumed when the execution comes into the service. But above access to reference parameters calls the getXMLStreamReader of the BlockInmpl object of the header block. As it is already consumed, it gives the following exception. 		Caused by: javax.xml.ws.WebServiceException: An internal error occurred. The org.apache.axis2.jaxws.message.databinding.impl.JAXBBlockImpl block object is already consumed. Processing cannot continue.  Run with the debug option to determine where the block was first consumed. 		at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:173) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:118) 		at org.apache.axis2.jaxws.message.impl.BlockImpl.getXMLStreamReader(BlockImpl.java:229) 		at org.apache.axis2.jaxws.message.impl.BlockImpl.getReader(BlockImpl.java:256) 		at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.getDirectReader(OMSourcedElementImpl.java:226) 		at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.forceExpand(OMSourcedElementImpl.java:255) 		at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.getAttribute(OMSourcedElementImpl.java:412) 		at org.apache.axis2.jaxws.addressing.util.ReferenceParameterList.initialize(ReferenceParameterList.java:96) 		at org.apache.axis2.jaxws.addressing.util.ReferenceParameterList.size(ReferenceParameterList.java:74) 		at java.util.AbstractList$Itr.hasNext(AbstractList.java:339) 		at org.axis2.jaxws.sample.TestServiceImpl.newOperation(TestServiceImpl.java:27) 			So how can I access the reference parameters in the service? 		Thanks, 	~Isuru
554||ADB generates the following code inside the getOMElement method: 		org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) { 	    public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException { 	        <bean class name>.this.serialize(MY_QNAME,factory,xmlWriter); 	    } 	}; 		Since the "serialize" method is declared by the ADBBean interface, using an anonymous inner class is actually not necessary. ADBBean already has everything it needs (the reference to the bean and MY_QNAME; factory is not needed as explained in AXIS2-4415) to invoke that method directly.
555||Since the ADBBean#serialize methods directly serialize to an XMLStreamWriter, they should never create any Axiom object and therefore should not require an OMFactory argument. Note that the code generated by ADB indeed never uses this argument.
556||When working on the ADB test suite, I noticed that the getPullParser methods generated by ADB don't work properly. 98 (!) out of 114 existing test cases (working properly with serialize or getOMElement) fail when trying to use getPullParser. 		Probably this is the reason why ADBDataSource#getReader builds an Axiom tree from the bean and gets the XMLStreamReader from this tree (which is highly inefficient) instead of using getPullParser.
557||1.The Service Code: 	public class PrintService { 			public void print(String aMessage) throws Exception{ 			System.out.println(aMessage); 		} 	} 		2.The Service.xml: 	<service name="PrintService" scope ="application" > 		<Description> 			Please Type your service description here 		</Description> 		<messageReceivers> 			<messageReceiver mep="http://www.w3.org/2004/08/wsdl/in-only" class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver" /> 			<messageReceiver  mep="http://www.w3.org/2004/08/wsdl/in-out"  class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/> 		</messageReceivers> 			<parameter name="ServiceClass" locked="false">soap.test.PrintService</parameter> 			 <!--  		<operation name="print"> 	        <messageReceiver  			class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/> 	    </operation> 		    --> 	</service> 		3. generate clent code by wsdl2java and run test 	    I get the exception 	   java.lang.UnsupportedOperationException: An access occurred that is not valid. 		at org.apache.axis2.description.InOnlyAxisOperation.getMessage(InOnlyAxisOperation.java:109) 		at org.apache.axis2.util.MessageContextBuilder.createOutMessageContext(MessageContextBuilder.java:190) 		at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:37) 		at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:100) 		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:176) 		at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:275) 		at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:133) 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) 		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:199) 		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:145) 		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:210) 		at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) 		at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) 		at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:955) 		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:139) 		at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) 		at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) 		at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:955) 		at org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2460) 		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:133) 		at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) 		at org.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:119) 		at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:594) 		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) 		at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:594) 		at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) 		at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:955) 		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:127) 		at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) 		at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) 		at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:955) 		at org.apache.coyote.tomcat4.CoyoteAdapter.service(CoyoteAdapter.java:157) 		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874) 		at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665) 		at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528) 		at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81) 		at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689) 		at java.lang.Thread.run(Thread.java:534) 		4. remove the service.xml comment,the  'An access occurred that is not valid.' not Occurred 		5. get the new wdsl from web site,then generate clent code by wsdl2java and run same test 	    I get Exception 	    The input stream for an incoming message is null. 	org.apache.axis2.AxisFault: The input stream for an incoming message is null. 		at org.apache.axis2.transport.TransportUtils.createSOAPMessage(TransportUtils.java:72) 		at org.apache.axis2.description.OutInAxisOperationClient.handleResponse(OutInAxisOperation.java:353) 		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:416) 		at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:228) 		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:163) 		  if I do not re generate clent code ,the exception will not Occurred. 		 Finally , I fount that wsdl  is different when I remove the comment,  		<wsdl:input message="ns:printRequest" wsaw:Action="urn:print"/> 	<wsdl:fault message="ns:Exception" name="Exception" wsaw:Action="urn:printException"/> 	---> 	<wsdl:input message="ns:printRequest" wsaw:Action="urn:print"/> 	<wsdl:output message="ns:printResponse" wsaw:Action="urn:printResponse"/> 	<wsdl:fault message="ns:Exception" name="Exception" wsaw:Action="urn:printException"/> 		Then generate client code is changed : 	__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();    //right! 	---> 	__operation = new org.apache.axis2.description.OutInAxisOperation();                     //error! 		By the way, if  	public void print(String aMessage) throws Exception ---> public void print(String aMessage)  	will have no problem!
558||When Axis2 receives a message with a DOCTYPE declaration referencing a DTD (using a system ID), it will attempt to load that DTD. Since SOAP doesn't allow DTDs, we should not try to load it. 		See also: http://markmail.org/message/e4yiij7lfexastvl 		Note that the described behavior depends on the StAX parser implementation. For more information, see WSCOMMONS-394 (which also describes a potential solution for the present issue).
559||DependencyManager.initService(ServiceGroupContext) method does not actually "throw" any Exceptions caught as a result of service object initialization failure (initServiceObject((serviceImpl, serviceContext)). The Exception is caught and then an AxisFault is created from it, but the AxisFault is not thrown. 		As a result, I was unable to catch application scoped service initialization failures. Below is a patch to quickly fix this bug: 		Index: DependencyManager.java 	=================================================================== 	--- DependencyManager.java	(revision 797569) 	+++ DependencyManager.java	(working copy) 	@@ -129,7 +129,7 @@ 	                     serviceContext.setProperty(ServiceContext.SERVICE_OBJECT, serviceImpl); 	                     initServiceObject(serviceImpl, serviceContext); 	                 } catch (Exception e) { 	-                    AxisFault.makeFault(e); 	+                    throw AxisFault.makeFault(e); 	                 } 	             } 	         }
560||The current DefaultObjectSupplier implementation cannot instantiate static nested classes. The problem is that it assumes that if the class to instantiate has a declaring class, it is an inner class. However, according to the Java language specification, an inner class is a nested class, which is not declared in a static context. Thus, in case the nested class is declared static, it is not required to create the parent enclosing instance (and it is not even possible, because the inner class does not have an implicit constructor with a parent instance first parameter)  		See http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.1.3
561||When generating the schema for a class'  field which is an inner class, with the wrapped array support turned on, a NPE gets thrown: 		Caused by: java.lang.NullPointerException 	        at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.generateSchemaforFieldsandProperties(DefaultSchemaGenerator.java:703) 	        at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.generateSchema(DefaultSchemaGenerator.java:555) 	        at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.generateSchemaForType(DefaultSchemaGenerator.java:862) 	        at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.processMethods(DefaultSchemaGenerator.java:334) 	        at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.generateSchema(DefaultSchemaGenerator.java:252) 	        at org.apache.axis2.deployment.util.Utils.fillAxisService(Utils.java:514) 	        at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:386) 		Reason seems to be that the type table is searched for a complex type e.g. Data$Number, while it should be Data_Number (replacing the dollar character with an underscore).
562||In Axis2 1.5  schema types generated for inner classes have just the name of the class, while in Axis2 1.4.1 the name of the type incorporated the name of the parent class, e.g. 		class Parent { 	    class Inner { 	    } 	} 		Axis2 1.4.1 created a complex type named "Parent_Inner" for the Inner class (it was replacing the dollar character in "Parent$Inner" with an underscore), while Axis2 1.5 creates just "Inner" type. 		The reason must be in using Class#getSimpleName(), this method does not return the parent class prefix as the annogen's JClass#getSimpleName() did in Axis2 1.4.1.
563||There are three (!) different types of TransportListener implementations (and TransportInDescription instances) that are used during the lifecycle of AxisServlet: 		1) The default axis2.xml that we ship with the Web app has a transportReceiver entry for org.apache.axis2.transport.http.SimpleHTTPServer. This is of course wrong because we want to use AxisServlet, not the standalone HTTP server. Since AxisServlet replaces this TransportInDescription anyway (see point 2), the SimpleHTTPServer is never started (fortunately!), but it is still necessary to have the dependencies of SimpleHTTPServer in the classpath (see AXIS2-4464). Note that simply removing the transportReceiver entry from axis2.xml doesn't work, because this leads to the issue described in AXIS2-4141. 		2) AxisServlet#init creates a fresh TransportInDescription (with AxisServlet as TransportListener) and registers it in the ListenerManager/AxisConfiguration. This replaces the TransportInDescription from point 1. AxisServlet, in conjunction with ListingAgent#extractHostAndPort also implements some sort of autodetection mechanisms for the port number (using the RUNNING_PORT configuration context property). Note that all this is only done for HTTP, not HTTPS. 		3) ListingAgent can also create and register TransportInDescription instances on the fly if it detects requests using a protocol for which no TransportInDescription has been registered, i.e. HTTPS. See the addTransportListener method. This TransportInDescription instance will have yet another type of TransportListener associated with it, namely org.apache.axis2.transport.http.CustomListener. 		This approach has several problems: 	- It is a complete mess. 	- Nobody will ever be able to document this properly or explain to a user how this works. 	- It causes lots of issues. See the JIRAs linked to this report. 	- It doesn't take into account that fundamentally, no port autodetection scheme will ever work reliably (i.e. in such a way that it produces the correct WSDL from the start) if the servlet is used with both HTTP and HTTPS. The reason is that autodetection can only rely on information from incoming requests. This means that the WSDL can only be complete if the servlet has received at least on HTTP request and at least one HTTPS request. 		Here is a simple proposal to solve these problems once and for all: 	- Use a single TransportListener implementation with AxisServlet. This cannot be the AxisServlet itself because there can be two TransportListener instances for the same AxisServlet instance. It would basically be CustomListener, but with a better name, e.g. AxisServletListener. 	- Require the user to declare a transportReceiver (with AxisServletListener) in axis2.xml for every protocol (http and/or https) he wants to use. 	- If a single transportReceiver is configured, the user is not required to specify the port and AxisServlet will autodetect it based on incoming requests. 	- If a transportReceiver is configured for both http and https, the user is required to provide information about the port numbers. This makes sure that the correct WSDL can always be generated. 	- For consistency, if AxisServlet receives a request with a protocol for which no transportReceiver is configured, the request is rejected. 	- Update the default axis2.xml for the WAR distribution so that it contains: <transportReceiver name="http" class="org.apache.axis2.transport.http.AxisServletListener"/> 		The only cases where this approach may fail to give consistent results is when 	- port autodetection takes places and the WSDL is retrieved through a non HTTP protocol (very unlikely, unless something like MEX over SOAP/JMS is used...); 	- port autodetection takes places and the servlet container accepts connections for the same protocol on different ports. 	In both cases it is sufficient to specify the port number in the transportReceiver element to avoid the issue.
564||As pointed out by Alexander Bruch, Axis2 1.5 doesn't work well together with the Web Service tooling in Eclipse JST. There is an open issue [1] for this in the JST bug tracker, but if we can implement some workarounds to make it work with the current version of JST, we should do so. 		Steps to reproduce: 		0. Open Eclipse 	1. Configure Axis2 	- Goto Menu Windows -> Preferences -> Web Services -> Axis2 Preferences 	- Choose the Axis2 installation Path i.e. on Windows c:Program Filesaxis2-1.5 	- Apply 	3. Create new Dynamic WbProject 	- Goto Menu File -> New -> Dynamic Web Project 	- Project name: TestAxis2-1.5 	- Target Runtime i.e. "Apache Tomcat 6.0" 	- Dynamic Web module version: 2.5 	- Configuration: Default Configuration for Apache Tomcat v6.0 	- Configuration: Click Button "Modify" 	- Activate Root Checkbox of Axis2 Webservices 	(This should install axis2 Project Facets (axis2-web, libs etc.) 	- Click Next / Finish until the Project setup is completed 		4. Create POJO 	- Create New Java Class : Package com.test.axis2, Class Name SimplePOJO 	- Add two Private properties (String name, int age) and let eclipse generate public getters and setters. 	- Save The niew Class 		5. Create WebService 	- Right click on the new SimplePOJO.java 	- chosse WebService -> Create WebService 	- At the configuration Section choose: 	Server: Tomcat v6.0 Server 	Webservice runtime: Apache Axis2 	Service projectz: TestAxis1.5 		Move the Slider to the top -> "Test Service" 	Move the Client Slider to the bottom -> "No client" 		- click Next 	- In the next Dialog select " Generate a default service.xml file 	- Click Next 	- In the Next Dialog select "Start Server" if not already startes 	- Click next / finish 			Issue no. 1: The generated web.xml refers to org.apache.axis2.transport.http.AxisAdminServlet, but this class has been moved to org.apache.axis2.webapp. 			[1] https://bugs.eclipse.org/bugs/show_bug.cgi?id=282466
565||While reviewing some code, I noticed that org.apache.axis2.datasource.jaxb.JAXBAttachmentUnmarshaller contains unreachable code. There are two places where the following if statement is used: 		if (xmlStreamReader instanceof OMXMLStreamReader) { 	    ... 	} 		"xmlStreamReader" is an attribute of JAXBAttachmentUnmarshaller, but this attribute is never initialized and remains null (this is obviously a bug; see code in the constructor). Since "null instanceof X" is always false, the code inside the if statement is unreachable. 		Since this code is related to XOP/MTOM processing, I'm wondering how it is possible that MTOM actually works in JAX-WS (does it?). Also it would be interesting to analyze why this issue doesn't trigger any test failure.
566||If a JAXWS web service implementation or Provider throws and exception, the jaxws engine creates an appropriate SOAP Fault.  The SOAP Fault is returned to the caller or sent to the FaultTo address. 		However a JAXWS mode=Message Provider may return an object representing a SOAP Fault (i.e. no exception is thrown).  In such cases, the JAX-WS is failing to recognize the SOAP Fault and the the subsequent Faul is returned to the caller (instead of being directed to a FaultTo address). 		The error is in the ProviderDispatcher.  A small code change is needed to analyze the returned object and create a "Fault" message context if necessary. 		I am testing this small change and will have it done later today.
567||The JAX-WS engine uses the marshal methods provided by JAX-B. 		The JAX-B supports marshaling to an XMLStreamWriter or an OutputStream. 	In most cases, the JAX-WS runtime uses the latter (marshaling to OutputStream).  This is accomplished by getting the target OutputStream from the XMLStreamWriter. 		However, there is one path where this optimization is not being used.  This JIRA corrects this path
568||I have faced port binding exception on port 5001 when I have tried to deploy Soap monitor on more than one domain sharing same Unix box. 	We have number of weblogic domains sharing same Unix box, each weblogic domain is identified by unique IP address. Soap monitor creates a socket connection on port 5001 on Unix box level which doesn't allow any other domain to use the same port. 		Solution : 		org.apache.axis2.soapmonitor.servlet.SOAPMonitorService  class uses method  ServerSocket(Integer.parseInt(port)) if we can change that method to  ServerSocket(int port, int backlog, InetAddress bindAddr)  we can specify Server IP address in the web.xml .It will allow number of domains  deployed on same Unix box to use SOPA monitor service.
569||I am introducing code that will improve performance for Provider OM. The 	code improves serialize calls on OM as we now create an OMSourcedElement backed by a data Source that feeds contents 	from Parser. This eliminates the expensive serialize code path that goes though OMSerializeUtils
570||Implementations of HandlerPostInvoker have no way to determine if the SOAP message has even been accessed by the handlers.  Without this information they may needlessly expand the message causing performance degradation.  		Add a property "jaxws.messageAccessed" to the SOAPMessageContext when a SOAPMessageContext.getMessage() is performed.  HandlerPostInvoker implementations can then check for the property.
571||UUIDs generated with Axis2 Util UUIDGenerator have the form 		urn:uuid:16F37BAAB5ADE4B10F1255435492771 		This is not conform to the Standard (ISO/IEC 11578:1996) and these UUID are rejected by e.g. Windows Clients etc. 		A Standard conform UUID would look like: 		urn:uuid:fddc7dc5-837b-443c-8ae7-7e715bab8666 		Please fix this bug! Java includes a UUID Class, with produces Standard conform UUID of the form fddc7dc5-837b-443c-8ae7-7e715bab8666 for Webservice use one must only add urn:uudi: befor the generated Number
572||I've detected that org.apache.axis2.databinding.utils.BeanUtil class can be improved for performance. It seems that invoking Introspector.getBeanInfo(Class,  Class) takes a lot of time. By caching java.beans.BeanInfo in this class it doubles up (at least) the performance, especially when returning a big dataset. I changed this myself and saw a great deal of performance improvement.
573||Background: 		When an inbound SOAP message contains a SOAP Fault, the JAX-WS engine examines the element inside of the Fault detail. 	This child element of the detail is called a detail entry in SAAJ. 	If the JAX-WS engine finds a matching service exception (aka application exception), the engine will use the contents of the detail entry to create a service exception. 			Problem: 		The vendor sending the message may add other detail entries to the detail element.  For example the vendor may add an "exception" or "stacktrace" element that contains 	debug information about the location of the exception on the server.   The presence of these extra detail entries caused the JAX-WS engine to incorrectly unmarshal 	the fault as a system exception (not a service exception). 			Solution: 		The solution is very simple.  The code currently only attempts service exception unmarshalling if there is one detail entry. 	The code will be changed to attempt service exception unmarshalling if there are one or more detail entries.  The first one will be used to do the service exception unmarshalling. 	I have a fix, and am testing it now.
574||I have a WSDL file with multiple ports and operations. I declared two WSDL messages as fault messages and ran WSDL2Code: 		######################### 	-uri ${project_loc:IdaresEvalProcess}/IdaresWS.wsdl 	-p de.ahija.thesis.idares.skeleton 	-Emp de.ahija.thesis.idares.skeleton 	-d adb 	-ss 	-sd 	-ssi 	-g 	-S gen/skeleton 	-R gen/res 	-or 	--noBuildXML 	######################### 		Unexpectedly I got an Exception: 	######################### 	Retrieving document at 'C:UsersAhijaDocumentsStudiumS10DiplomarbeitJavacodeIdaresIdaresEvalProcess/IdaresWS.wsdl'. 	Retrieving schema wsdl:imported from 'idares-model.xsd', relative to 'file:/C:/Users/Ahija/Documents/Studium/S10/Diplomarbeit/Java/code/Idares/IdaresEvalProcess/IdaresWS.wsdl'. 	Retrieving document at 'C:UsersAhijaDocumentsStudiumS10DiplomarbeitJavacodeIdaresIdaresEvalProcess/IdaresWS.wsdl'. 	Retrieving schema wsdl:imported from 'idares-model.xsd', relative to 'file:/C:/Users/Ahija/Documents/Studium/S10/Diplomarbeit/Java/code/Idares/IdaresEvalProcess/IdaresWS.wsdl'. 	Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: Element QName is null for sqlErrorMessage! 		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:271) 		at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35) 	Caused by: org.apache.axis2.wsdl.codegen.CodeGenerationException: java.lang.RuntimeException: Element QName is null for sqlErrorMessage! 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.emitSkeleton(AxisServiceBasedMultiLanguageEmitter.java:1432) 		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.generate(CodeGenerationEngine.java:253) 		... 1 more 	Caused by: java.lang.RuntimeException: Element QName is null for sqlErrorMessage! 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.getFaultParamElements(AxisServiceBasedMultiLanguageEmitter.java:2908) 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.getFaultElement(AxisServiceBasedMultiLanguageEmitter.java:2827) 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.generateMethodElement(AxisServiceBasedMultiLanguageEmitter.java:2348) 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.loadOperations(AxisServiceBasedMultiLanguageEmitter.java:2224) 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.createDOMDocumentForSkeletonInterface(AxisServiceBasedMultiLanguageEmitter.java:2181) 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.writeSkeletonInterface(AxisServiceBasedMultiLanguageEmitter.java:2083) 		at org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter.emitSkeleton(AxisServiceBasedMultiLanguageEmitter.java:1378) 		... 2 more 	######################### 		Interestingly the bug does not appear, if I use a different message for each fault.
575||The change made to AddressingOutHandler in revision 778244 means that if DISABLE_ADDRESSING_FOR_OUT_MESSAGES is set to true in the module.xml, addressing will always be disabled on out messages, even if the value is false on the msg context.  This behaviour is incorrect because the module.xml value should only be a default, which is overridden by the value in the msg context if it exists.
576||java2wsdl utility should show a message on the command prompt saying "xyz.wsdl is created successfully" when wsdl file is created using the command line. 		Right now no message is displayed on the command prompt.
577||When using the when the JAX-WS Dispatch<OMElement>  	or Provider<OMElement> APIs, there may be cases where the parser incorrectly reports missing prefix and/or duplicate attributes on the SOAP message. 		Under some circumstances the JAX-WS implementation of the  	Dispatch<OMElement> and Provider<OMElement> APIs are not able  	to find the namespace or attribute declarations that are   	located on ancestor xml elements or these declarations  	were incorrectly discovered to be duplicated. 		The algorithm should be corrected to propagate namespace and  	attribute declarations to child elements.
578||The WSDL11ToAxisServiceBuilder doesn't respect the isServer attribute when building the bindings, thus the bindings for a client AxisService will be switch and even worse in case of a one-way operation missing.
579||Background: 		The JAX-WS runtime inspects the JAX-WS artifacts to determine which packages or classes should be part of the JAXBContext. 	In most cases, the JAXBContext is constructed with a series of packages (which is relatively fast). 	However if a package does not contain JAXB ObjectFactory or package.info, then the JAXBUtils code must inspect individual classes in the package to see if they are actually JAXB tolerable. 		Problem: 	When the code falls down this secondary lookup path, it should avoid classes that implement javax.ejb.SessionBean.  Such classes are not JAXB classes and inspecting those classes can result in degraded performance. 		Solution: 	I have a design to inspect classes to see if they should be skipped over.  For example classes that implement SessionBean should be skipped.  This new code avoids loading the SessionBean objects (which may not be present).   		I am testing the solution, and I am designing a unit test to verify the code.
580||The following exception occurred when a JAX-WS Dispatch<OMElement> API was used on the client, and the server responded with a message containing a SOAPFault. 		javax.xml.ws.WebServiceException: java.lang.ClassCastException: org.apache.axiom.om.impl.llom.OMSourcedElementImpl incompatible with org.apache.axiom.soap.SOAPFault 	       at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:175) 	       at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70) 	       at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:128) 	       at org.apache.axis2.jaxws.client.dispatch.BaseDispatch.invoke(BaseDispatch.java:244) 			Analysis: 		The ParserInputStreamCustomBuilder was inadvertently optimizing the input stream even though the message contained a SOAPFault.  I am changing the code to detect this situation and disable the optimization.
581||Currently, JAXWSRIWSDLGenerator classpath doesn't contain the third party jars in the 'lib' folder of the jaxws service archive. Therefore, WSDL generation fails for a service which has a class coming from a third party library as a method parameter. 		Ex: 	@WebMethod 	public String getValue(MyClass test) { 	... 	} 		If the class "MyClass" is coming from a third party library which is in the "lib" folder of the service archive, WSDL generation fails. To fix this issue, we have to add those third party libs into the "wsgen" classpath.
582||having some better background information would make deployment a lot easier
583||Problem: 		A ConcurrentModificationException may occur in the JAX-WS handler chain processing if two applications (on separate threads) provide the same handler list. 		Solution: 		The HandlerChainProcessor will be chained to make a local copy of the list during the handler processing.  This will avoid the CME.  Kudos to Mike Rheinheimer and Nick Gallardo for contributing their thoughts to this problem.
584||When running mvn eclipse:eclipse on the saaj module, it fails with the following error: 		[INFO] Scanning for projects... 	[INFO] Searching repository for plugin with prefix: 'eclipse'. 	[INFO] ------------------------------------------------------------------------ 	[INFO] Building Apache Axis2 - SAAJ 	[INFO]    task-segment: [eclipse:eclipse] 	[INFO] ------------------------------------------------------------------------ 	[INFO] Preparing eclipse:eclipse 	[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'. 	[INFO] Setting property: velocimacro.messages.on => 'false'. 	[INFO] Setting property: resource.loader => 'classpath'. 	[INFO] Setting property: resource.manager.logwhenfound => 'false'. 	[INFO] [remote-resources:process {execution: default}] 	[INFO] [remote-resources:process {execution: legal-files}] 	[INFO] [eclipse:eclipse] 	[INFO] Using Eclipse Workspace: null 	[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER 	[INFO] Resource directory's path matches an existing source directory. Resources will be merged with the source directory target/maven-shared-archive- 	resources 	[INFO] Resource directory's path matches an existing source directory. Resources will be merged with the source directory test-resources 	[INFO] ------------------------------------------------------------------------ 	[ERROR] BUILD ERROR 	[INFO] ------------------------------------------------------------------------ 	[INFO] Request to merge when 'output' is not identical. Original=resource test-resources: output=target/test-resources/saaj-repo, include=[axis2.xml], 	 exclude=[**/*.java], test=true, filtering=false, merging with=resource test-resources: output=target/test-classes, include=[], exclude=[**/*.java], t 	est=true, filtering=false 	[INFO] ------------------------------------------------------------------------ 	[INFO] For more information, run Maven with the -e switch 	[INFO] ------------------------------------------------------------------------ 	[INFO] Total time: 7 seconds 	[INFO] Finished at: Mon Dec 07 13:41:39 GMT 2009 	[INFO] Final Memory: 16M/30M 	[INFO] ------------------------------------------------------------------------
585||Update the WSDL instance namespace in org.apache.axis2.addressing.metadata.WSDLLocation to http://www.w3.org/ns/wsdl-instance instead of http://www.w3.org/2006/01/wsdl-instance.  This will make it match the example in the WS-A Metadata Spec http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/#refmetadatfromepr and be compliant with the new WSDL 2.0 spec: http://www.w3.org/TR/2007/REC-wsdl20-20070626/#wsdlLocation-aii.
586||A null pointer exception occurs in WSDL11ToAxisServiceBuilder when importing the WSDL below.  It includes a notification style operation (i.e. output only), and the null pointer occurs when the service builder attempts to copy across the extension elements.  The problem is that it tries to copy the extension elements from the input message rather than the output message - as the input is null, a null pointer occurs.  If the input message was not null this is still a bug as it is copying the extension elements from the wrong place. 		The bug is on line 1343 (revision 822304 from http://svn.apache.org/viewvc/webservices/axis2/trunk/java/modules/kernel/src/org/apache/axis2/description/WSDL11ToAxisServiceBuilder.java). 		{code} 	1334 	 // Create an output message and add 	1335 	Output wsdl4jOutputMessage = wsdl4jOperation.getOutput(); 	1336 	if (null != wsdl4jOutputMessage) { 	1337 	AxisMessage outMessage = axisOperation 	1338 	.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE); 	1339 	Message message = wsdl4jOutputMessage.getMessage(); 	1340 	if (null != message) { 	1341 	 	1342 	outMessage.setName(message.getQName().getLocalPart()); 	1343 	copyExtensionAttributes(wsdl4jInputMessage.getExtensionAttributes(), 	1344 	outMessage, PORT_TYPE_OPERATION_OUTPUT); 	1345 	 	1346 	// wsdl:portType -> wsdl:operation -> wsdl:output 	1347 	}  	{code} 		The following WSDL triggers the problem: 		{code:xml} 	<?xml version="1.0" encoding="UTF-8"?> 	<wsdl:definitions targetNamespace="http://www.example.com/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 		xmlns="http://www.example.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" 		xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"> 			<wsdl:message name="operationResponse"> 			<wsdl:part name="parameters" element="operationResponse" /> 		</wsdl:message> 			<wsdl:portType name="examplePortType"> 			<wsdl:operation name="operation"> 				<wsdl:output message="operationResponse" /> 			</wsdl:operation> 		</wsdl:portType> 			<wsdl:binding name="binding" type="examplePortType"> 			<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" /> 			<wsdl:operation name="operation"> 				<soap:operation soapAction="urn:operation" style="document" /> 				<wsdl:output> 					<soap:body use="literal" /> 				</wsdl:output> 			</wsdl:operation> 		</wsdl:binding> 			<wsdl:service name="service"> 			<wsdl:port name="endpoint" binding="binding"> 				<soap:address location="https://127.0.0.1:8444/services/Service/" /> 			</wsdl:port> 		</wsdl:service> 	</wsdl:definitions> 	{code}
587||Revision 702224 defaulted DISABLE_ADDRESSING_FOR_OUT_MESSAGES to true in BindingProvider, however it didn't add any code to turn addressing on if <wsaw:usingAddressing /> is present in the WSDL.  This means that addressing is always off on the client unless AddressingFeature is used to turn it on, and that's only available in JAX-WS 2.1 clients.
588||While processing a JAX-WS aysnchronous response, a NullPointerException may occur in the onError method of the jaxws AsyncResponse object. 	This is an exception that occurs while processing an exception and leads to instability in the system. 	For example it may lead to a hung system if the caller does not adequately account for such secondary errors. 		protected void onError(Throwable flt, MessageContext faultCtx) { 	        if (log.isDebugEnabled()) { 	            log.debug("AsyncResponse received a fault."); 	        } 		        fault = flt; 	        faultMessageContext = faultCtx; 	        faultMessageContext.setEndpointDescription(endpointDescription);  <--------------------NPE occurs here. 			Proposed Solution: 	The code will be changed to check for a null faultMessageContext before using it.  A null faultMessageContext is an indication that the onError is processing a local exception (versus an error from an Endpoint's SOAP Fault). 		The onError method will also be hardened to catch other other errors and respond gracefully.  Throwing secondary exceptions from onError leads to system instability.
589||Any JAXWS operation which returns or receives a Complex type (not Lists or Arrays, simple objects) throws the following exception in latest trunk. 		Caused by: javax.xml.bind.JAXBException: XXXXXXX is not known to this context 		at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:587) 		at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.getBeanInfo(UnmarshallerImpl.java:531) 		at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:337) 		My service is as follows (I'll attach the jar to this JIRA) 		@WebService(serviceName = "SampleService", 	        targetNamespace = "http://sample.jaxws.apache.org" 	) 	public class JaxwsSample { 		    @WebMethod( 	            action = "urn:echo1" 	    ) 	    public String echo1(InWrapper in) { 	        return in.getIn(); 	    } 		    @WebMethod( 	            action = "urn:echo2" 	    ) 	    public OutWrapper echo2(String in) { 	        OutWrapper out = new OutWrapper(); 	        out.setOut(in); 	        return out; 	    } 	} 		OutWrapper and InWrapper are two simple beans which has a string inside. 		I think this issue has occured after fixing http://issues.apache.org/jira/browse/AXIS2-3341.
590||Background: 		The JAX-WS programming model uses JAX-B objects as the representation of user business data. 	The JAX-WS runtime in Axis2 is responsibile for building the JAXBContext and marshaling and umarshaling the JAX-B objects. 	The marshaling and unmarshaling includes marshaling and unmarshaling MTOM data. 		When unmarshaling JAXB, the streaming, non-cached parser (original XMLStreamReader) or cached XMLStreamReader (OMStaXWrapper) is used 	as the input XMLStreamReader for the JAXB unmarshal code. 		Problem: 		The Axiom implementation has been changed such that the non-cached parser is now wrapped by one or more other axiom wrappers or delegates. 	Failure to the access the original steaming parser has resulted in poorer performance in some cases when unmarshaling 	WSCommons-518 now exposes additional methods to access the original non-cached parser.
591||We should omit optional WS-A headers to avoid unnecessary axiom element serialization.  Therefore we should stop sending messageID and noneURI replyTo headers on response messages.
592||I've implemented the ServiceLifeCycle interface to create and close connections in the startUp and shutDown methods.   shutDown is fired when Tomcat is shutdown, however it isn't fired when I perform a hot update (i.e drop a new version of the aar file into the services directory).
593||I created a Phase which overrides the checkPreconditions and checkPostconditions methods in the Phase class. 	If I add this Phase to the input flow in the axis2.xml file, it passes through the mentioned methods. 	But if I add the same Phase to the output flow, it doesn't pass through these methods. 	In both cases, I use a global Phase. 	From what I saw in the kernel jar, there's a problem in the PhasesInfo.class. 	The getGlobalOutPhaseList() method, when adding a new phase to the output flow list, it calls the method copyPhase(phase), which recreates the phase by adding the name, description and handlers. But by doing so, the initial Phase is cast down from the class I defined (for example MyPhase extends Phase) to a simple Phase and the checkPreconditions and checkPostconditions methods are no longer available. Therefore, in this case, it pases through the checkPrecondition method which is in the Phase class. 	For the input flow, the method getGlobalInFlow() in PhasesInfo doesn't call the copyPhase method, and the original phase remains how it was.
594||This bug still exists in the 1.5.1 source code. 		If there is a byte array defined, the name of the element isn't used to look up the element from the "beanElement".  The OMElementImpl#getFirstElement() method is used.  There is a good chance that the byte array won't be first. 		These are the original issues that I can find: 	AXIS2-3538,AXIS2-3765 		Both 3538 and 3765 have proposed solutions.
595||Problem: 		In most classes, the Log and LogFactory are statically declared (example AxisServlet).  This causes the Log to be discovered and loaded during the class loading, which can be expensive.  		If Axis2 is embedded, the wrong Log may be calculated (i.e. it may get the Log associated with the static loading versus the Log associated with the application's classloader). 		Solution: 		Adding a OnDemandLogger object will defer the Log construction until the Log is needed.   This solution was proposed by Nikhil Thaker and Muhammad Sadiq.
596||Attempting to use a URL to point to the axis2.xml file does not work -- every call will fail with a "stream closed" exception. 		The problem is in WarBasedAxisConfigurator, which has these lines of code (lines 113 to 135, nb line 124): 		                String axis2xmlpath = config.getInitParameter(PARAM_AXIS2_XML_PATH); 	                if (axis2xmlpath != null) { 	                    // when init parameter was present. 	                    axis2Stream = new FileInputStream(axis2xmlpath); 	                    log.debug("using axis2.xml from path: " + axis2xmlpath); 	                } 		                if (axis2Stream == null) { 	                    String axisurl = config.getInitParameter(PARAM_AXIS2_XML_URL); 	                    if (axisurl != null) { 	                        axis2Stream = new URL(axisurl).openStream(); 	                        axisConfig = populateAxisConfiguration(axis2Stream); 	                        log.debug("loading axis2.xml from URL: " + axisurl); 	                    } 	                } 		                if (axis2Stream == null) { 	                    // both the axis2.xml.path and axis2.xml.url init parameters were not present 	                    // try to find the default /WEB-INF/conf/axis2.xml 	                    axis2Stream = config.getServletContext() 	                            .getResourceAsStream("/WEB-INF/conf/axis2.xml"); 	                    log.debug("trying to load axis2.xml from module: /WEB-INF/conf/axis2.xml"); 	                } 		And then further down at line 157: 		            axisConfig = populateAxisConfiguration(axis2Stream); 		The problem is that we are attempting to call populateAxisConfiguration TWICE -- once when we grab the URL, and once at the very end.  No other configuration method attempts to do this; just the URL-based method. 		This should be an incredibly easy fix -- just remove the call on line 124.
597||Currently the JAXWS metadata module's EndpointInterfaceDescriptionImpl has the ability to retrieve valid endpoint methods by reading the system property jaxws.runtime.legacyWebMethod=true|false, When this system property is set a customer using newer JAXWS apis can still use the applicaton build using older JAXWS apis. I am extending this feature so that a customer can now set the LegacyWebmethod=true|false property in a manifest file. 		If both system property and manifest property are set then the system property will override the value in manifest property.
598||I am adding two tests to verify the MTOMFeature JAX-WS API functionanlity, the test will verify the following: 	1) The MTOMFeature extends the WebServiceFeature API and has ability to add threshold attribute, the test ensures that the MTOMFeature is working as per the JAX-WS Specification rules.   	2) Also, JAX-WS 2.2 added few changes to the WebserviceFeature, It seems the function has already been added to Axis2/JAX-WS code, I am adding test case to verify the Client Proxy and Dispatch work as per expectation.  	3) I will also add a new test endpoint that will use the @MTOM annotation to verify that works as expected on server side.
599||AxisService.getWSDL()  sends the response body for a ..service?wsdl query, then calls .flush() and .close() for its output stream. Upon return, ListingAgent.processListService() calls .flush() and .close() again for the same stream.  		The second close() interferes with the next request on the intermediate ajp connector socket. 		I don't know whether calling close() twice should be harmless but, in this case, it is not. 		[edit: Actually, the 2nd close() is harmelss. It's the flush() coming after the 1st close() that seems to be the problem.]
600||NPE in SimpleTypeMapper.java while handling date attribute of Java bean.  	I convert a Javabean into an OMElement using BeanUtil.getPullParser() which internally uses the SimpleTypeMapper.getStringValue(). Below is the exception stack trace: 		java.lang.NullPointerException 		at org.apache.axis2.databinding.typemapping.SimpleTypeMapper.getStringValue(SimpleTypeMapper.java:297) 		at org.apache.axis2.databinding.utils.BeanUtil.getPropertyQnameList(BeanUtil.java:154) 		at org.apache.axis2.databinding.utils.BeanUtil.getPullParser(BeanUtil.java:67) 		All this occurs from here of SimpleTypeMapper.java: 		MessageContext messageContext = MessageContext.getCurrentMessageContext(); 	            AxisService axisServce = messageContext.getAxisService(); 	            // if the user has given a pirticualr timezone we use it. 	            if (axisServce.getParameter("TimeZone") != null){ 	               zulu.setTimeZone(TimeZone.getTimeZone((String)axisServce.getParameter("TimeZone").getValue())); 	            } 	see? If your MessageContext.getCurrentMessageContext() is null then axisService is null too. 		Can you please fix this ASAP in axis2-1.5.1? 		Thanks in advance, 	Vasant
601||Java classes that are generated from Web service Parameters (types) have non-sensible code block (please excuse me for using the term). 	These happens setter methods: 		Take the following example generated code: 		    public void setBarcode(java.lang.String param) { 	        if (param != null) { 	            //update the setting tracker 	            localBarcodeTracker = true; 	        } else { 	            localBarcodeTracker = true; 	        } 	        this.localBarcode = param; 	    } 		localBarcodeTracker is always set to true in either case.  This either is a bug, or it's redundant check.  This happens to every other property setters that I have seen so far.
602||when a service is not exposed on all transports, DispatchPhase.validateTransport() throws an AxisFault "servicenotfoundforepr".
603||The ant task Java2WSDLTask doesn't allow setting the attribute extraClasses because it is an array type. 		I fixed this by changing the String [] to String for extraClasses 		And the setter and getter accordingly. 		I also change the addToOptionMap entry: 		        addToOptionMap(optionMap, 	                Java2WSDLConstants.EXTRA_CLASSES_DEFAULT_OPTION, 	                getMultiStringArray(getExtraClasses())); 		Basically, I parse the extraClasses string (comma delimited). 		The method getMultiStringArray is just extraClasses.split(",")
604||Java 2 Security exception may occur with this callstack: 	java.security.AccessControlException: Access denied (java.lang.RuntimePermission getClassLoader) 	...... 		at java.lang.Thread.getContextClassLoader(Thread.java:497) 		at org.apache.axis2.jaxws.server.dispatcher.JavaDispatcher$AsyncInvocationWorker.call(JavaDispatcher.java:114) 		at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:284) 		at java.util.concurrent.FutureTask.run(FutureTask.java:138) 		at org.apache.axis2.jaxws.utility.SingleThreadedExecutor.execute(SingleThreadedExecutor.java:45) 		at org.apache.axis2.jaxws.server.dispatcher.JavaBeanDispatcher.invokeOneWay(JavaBeanDispatcher.java:159) 	.....
605||WSDL20ToAxisServiceBuilder.processSOAPBindingExtention, line 671.   	If 'httpLocation' (line 663) is null, httpLocationString stays as an empty string.  As a result, the httpLocationTable has an entry with a key of  "" that gets overwritten for every operation in the binding.  It ultimately ends up with the last binding operation. 		The repercussion will show up in HTTPLocalBasedDispatcher.findOperation, line 69. 		Example: 		http://localhost:8080/axis2/services/StuffService.StuffServiceHttpSoap11Endpoint/thisDoesNotExist 		Even though there is no operation named 'thisDoesNotExist', an operatin is performed, and it is the LAST operation in the binding definition that is set in WSDL20ToAxisServiceBuilder.processSOAPBindingExtention. 		So, any invalid operation in a RESTFUL URL using SOAP with WSDL 2.0 will always return the results from the last operation in the SOAP binding definition.
606||Hello everyone, 		I have this snippet from the WSDL: 		... 	<xs:complexType name="EntityCompanyWithCountType"> 	                <xs:sequence> 	                    <xs:element minOccurs="0" name="count" nillable="true" type="xs:int" /> 	                    <xs:element maxOccurs="unbounded" minOccurs="0" name="entity" nillable="true" /> 	                </xs:sequence> 	</xs:complexType> 	... 		The correct would be this: 		<xs:complexType name="EntityCompanyWithCountType"> 	                <xs:sequence> 	                    <xs:element minOccurs="0" name="count" nillable="true" type="xs:int" /> 	                    <xs:element maxOccurs="unbounded" minOccurs="0" name="entity" type="ax2329:EntityCompanyType" nillable="true" /> 	                </xs:sequence> 	</xs:complexType> 		I have this in Java: 		public class Entity { 	... 	/*Inner class*/ 	       public class EntityCompanyWithContactType { 	        private EntityCompanyType entity; 	        private DigitalAddress.DigitalAddressType[] digital_address; 	        private PhoneNumber.PhoneNumberType[] phone_number; 	        private PostalAddress.PostalAddressType[] postal_address; 	        private PostalAddress.PostalAddressPhoneNumberType[] postal_address__phone_number; 			            /** 	         * The default constructor. 	         */ 	        public EntityCompanyWithContactType(){} 	        /** 	         * The constructor with all the input for one record. 	         * @param entity value; 	         * @param digital_address list value; 	         * @param phone_number list value; 	         * @param postal_address list value; 	         * @param postal_address__phone_number list value; 	         */ 	        public EntityCompanyWithContactType(EntityCompanyType entity, DigitalAddress.DigitalAddressType[] digital_address, PhoneNumber.PhoneNumberType[] phone_number, PostalAddress.PostalAddressType[] postal_address, PostalAddress.PostalAddressPhoneNumberType[] postal_address__phone_number) { .. } 		..... 	} 		I'm using "ant install" -> <echo> - install: build of AAR and deploy into WSAS. Also generates API documentation.</echo> 		My build.xml  : 	.. 	<target name="install" 	          depends="build-service,doc" 	          description="Installs the service package AAR into the Web service server repository."> 	    <echo message="Copying the created AAR files into the repository..."/> 	    <copy toDir="${repository.dir}/${services.dir}"> 	      <fileset dir="${services.dir}"> 	        <include name="**/*.aar"/> 	      </fileset> 	    </copy> 	  </target> 	... 		What am i doing wrong? Help. :( 		For more info, please please contact me :)
607||Hi, 		It seems HTTPS only transport does not work with 2.1.5.1. The following code executes and expects the HTTP transport definition in Axis2.xml file. 		TransportOutDescription transportOut = msgContext.getConfigurationContext(). 	                    getAxisConfiguration().getTransportOut(Constants.TRANSPORT_HTTP); 			Steps to reproduce  		1. only keep https definition in axis2.xml and remove http definition. 	2. run any axis2 service. Result would be a Null pointer exception 			In my Axis2.xml configuration, i removed the HTTP (<transportSender name="http") transport sender and am only having the "https" transport sender . I see that the request comes in fine into the service, however i get a NullPointer at the time the response is to be sent..Why is that?  What if i just want to use HTTPS ? 		java.lang.NullPointerException 	        at org.apache.axis2.transport.http.CommonsHTTPTransportSender.invoke(CommonsHTTPTransportSender.java:170) 	        at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:435) 	        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:43) 	        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114) 	        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:173) 	        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:167) 	        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:142) 	        at javax.servlet.http.HttpServlet.service(HttpServlet.java:763) 			     <transportSender name="local" 	                     class="org.apache.axis2.transport.local.LocalTransportSender"/> 		    <transportSender name="https" 	                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender"> 	        <parameter name="PROTOCOL">HTTP/1.1</parameter> 	        <parameter name="Transfer-Encoding">chunked</parameter> 	    </transportSender>  			knowing that 1.6 does not happen soon, it would be great if there could be a patch provided to resolve this issue, it would not be easy for lot of them to upgrade versions very frequently. can Axis2 commiter please provide a patch ASAP to resolve this ? 				Thanks, 	Vish
608||Dear all,  		We are conducting an study about the relevance of the warnings reported by the FindBugs tool when executed over several open-source systems.  		Particularly, in the case of Axis2, we would like to confirm the relevance of the following warning reported by the tool (for Axis2 1.5.1):  		Warning: Invocation of toString on an array  	Locations:  	* org.apache.axis2.context.externalize.DebugObjectOutputStream write - Line 70  	* org.apache.axis2.jaxws.description.builder.ActionAnnot toString - Line 83  	* org.apache.axis2.jaxws.description.impl.AttachmentDescriptionImpl toString - Line 66  	* org.apache.axis2.jaxws.description.impl.OperationDescriptionImpl toString - Line 1559  	* org.apache.axis2.jaxws.message.util.Reader getTextCharacters - Line 277  		Warning: Nullcheck of value previously dereferenced. A value is checked here to see whether it is null, but this value can't be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference  	Location:  	* org.apache.axis2.jaxws.description.impl.URIResolverImpl constructPath - Line 284  		Warning: This call to a generic collection method contains an argument with an incompatible class from that of the collection's parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument).  	Locations:  	* org.apache.axis2.jaxws.message.impl.MessageImpl getAttachmentID - Line 337  	* org.apache.axis2.jaxws.utility.XMLRootElementUtil createPropertyDescriptorMap - Line 209  		Warning: Null value is guaranteed to be dereferenced. There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced  	Locations:  	* org.apache.axis2.schema.writer.CStructWriter process - Line 340  	* org.apache.axis2.schema.writer.JavaBeanWriter process - Line 489  		Warning: Null pointer dereference. A null pointer is dereferenced here.  	Location:  	* org.apache.axis2.saaj.SOAPHeaderImpl addUpgradeHeaderElement - Line 370  		Warning: Possible null pointer dereference. There is a branch of statement that, if executed, guarantees that a null value will be dereferenced, which would generate a NullPointerException  	Location:  	* org.apache.axis2.wsdl.codegen.emitter.AxisServiceBasedMultiLanguageEmitter getOutputParamElement - Line 3222  		Warning: Nullcheck of value previously dereferenced. A value is checked here to see whether it is null, but this value can't be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference.  	Location:  	* org.apache.axis2.wsdl.codegen.emitter.CEmitter addCSpecifcAttributes - Line 672  		Since these warnings seemed relevant to us, we would like to confirm our classification with Axis2's developers.  		Best regards,  		Marco Tulio Valente  	Brazil
609||For the example code below, the p2n flag has its value pairs enclosed in square brackets.  If the brackets are left out, there is no error and usage print outs, the application just silently ignored, and an *unexpected* WSDL is generated. 		<java classname="org.apache.ws.java2wsdl.Java2WSDL" 	classpathref="maven.test.classpath" fork="true" failonerror="true"> 	   <arg value="-o"/> 	   <arg value="${project.build.directory}/java2wsdl"/> 	   <arg value="-of"/> 	   <arg value="p2n.wsdl"/> 	   <arg value="-cn"/> 	   <arg value="org.apache.axis2.description.CalculatorService"/> 	   <arg value="-p2n"/> 	   <arg value="[org.apache.axis2.description,http://www.example.org/calculator]"/> 	   <arg value="-stn"/> 	   <arg value="http://www.example.org/calculator-service"/> 	</java>
610||There is a minor typo that prevents policies defined in configs or remotely being used in modules.  I shall attach the patch for someone to apply.
611||Background/Problem: 	-------------------------------- 		An xml attribute can have a type (i.e. CDATA). 	The current version of OM stores this type. 		During JAX-WS processing, the OM tree is converted into an SAAJ tree when the JAX-WS handlers are invoked. 	After the JAX-WS handlers are completed, the SAAJ tree is converted back into OM. 		The attribute type information is lost in this process, because there is no SAAJ specification compliant api to store the attribute type on SAAJ. 		Solution: 	------------ 		The SAAJConverterImpl code (OM->SAAJ) is changed to store the attribute type information on the SAAJ DOM Attr object as "user data". 	The SAAJ->OM conversion uses XMLStreamReaderFromDOM.  This code is changed to get the attribute type from the "user data" if it is not available on the Attr. 		A verification test is added. 		Note that only the JAX-WS source and test are changed by this JIRA. 		Min Zheng and Rich Scheuerle collaborated on the diagnosis, design and testing of this JIRA.    Thanks Min for writing the test case.
612||Background: 		The JAX-WS runtime builds a JAXBContext to control the marshaling and unmarshaling of data. 	A JAXBContext is built using package names (the class that does this is JAXBUtils). 		The JAX-WS runtime builds a list of packages by doing a one-time examination of the referenced types. 	     i) types referenced by the each method with a @WebMethod. 	     ii) types referenced by @XmlSeeAlso annotations 	     iii) types referenced by @RequestWrapper or @ResponseWrapper annotations. 		The JAX-WS runtime also collects packages by doing a ns->package conversion for namespaces that it finds: 	     a) namespaces are found in the wsdl/schema 	     b) namespaces are found in the annotations on the web service methods. 		Problem: 	   A customer has an application that has two different packages that contain JAXB generated code for the same namespace. 	   One of these packages was directly referenced (via (i) above) by the web service. 	   The other package was assume referenced (via (a) above). 	   When the JAX-WS runtime attempts to build the JAXBContext, an error occurs indicating that 2 classes had the same @XmlType. 		Solution: 	    The root problem is the current algorithm does not differentiate between the actual package references and the "softer" namespace-calculated references. 	    The algorithm will be changed to identify and use precedence (i.e. actual package reference has the highest precedence). 		    The solution only affects the JAX-WS code. 	    I will also contribute a test case that matches the problem scenario.
613||Hi, 		i have the following project structure: 		+root 	   + master (which is the parent project) 	      + pom.xml  (shared pom definitions) 	   + client-axis2 (which is a module) 	      + pom.xml (module specific definitions) 		when i use the pom.xml in client-axis2 generating the webservice client from the wsdl works fine. 	however when i use the pom.xml from the master, to build my client-axis2 module the build fails, because 	the axis2-wsdl2code-maven-plugin looks in the work directory for the wsdl file: 		the wsdl location in the plugin is configured as : 		                                <configuration> 	                                        <packageName>com.foo.myservice</packageName> 	                                        <wsdlFile>src/wsdl/PersonService.wsdl</wsdlFile> 	                                </configuration> 		the location should be relative to the module directory, not relative to the parent directory (at least 	all other maven plugins behave like that). 		i have attached a little testcase, that shows the problem. see the attached file. 	just run  	mvn clean package in the master directory (this will fail) 	however, running "mvn clean package" in the client-axis2 directory will work. 		and here is the error message i get. as you can see the wsdl is looked for in the wrong directory: 		file:/tmp/directory_with_blanks/workspace/master/src/wsdl/PersonService.wsdl  	however it should be 	file:/tmp/directory_with_blanks/workspace/client-axis2/src/wsdl/PersonService.wsdl 		[INFO] Unable to find resource 'ws-commons:tcpmon:pom:1.0' in repository central (http://repo1.maven.org/maven2) 	[INFO] [axis2-wsdl2code:wsdl2code {execution: default}] 	Retrieving document at 'src/wsdl/PersonService.wsdl'. 	java.io.FileNotFoundException: This file was not found: file:/tmp/directory_with_blanks/workspace/master/src/wsdl/PersonService.wsdl 	        at com.ibm.wsdl.util.StringUtils.getContentAsInputStream(Unknown Source) 	        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 	        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.readInTheWSDLFile(CodeGenerationEngine.java:288) 	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:111) 	        at org.apache.axis2.maven2.wsdl2code.WSDL2CodeMojo.execute(WSDL2CodeMojo.java:558) 	        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490) 	        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694) 	        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556) 	        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535) 	        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387) 	        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348) 	        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180) 	        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328) 	        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138) 	        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362) 	        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60) 	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	        at java.lang.reflect.Method.invoke(Method.java:597) 	        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315) 	        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255) 	        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430) 	        at org.codehaus.classworlds.Launcher.main(Launcher.java:375) 	[INFO] ------------------------------------------------------------------------ 	[ERROR] BUILD ERROR 		cheers, 	andy
614||I am adding code that will Add support for RespectBinding changes in JAX-WS2.2 on Client and Server side. I will make modifications to RespectBindingConfiguration on client and server and also add Unit test cases to verify the functionality. 		I will provide patch for this change.
615||If a schema use an array of xsd:date there is an exception on unmashalling xml to adb objects. 		Solution: 		add the code below to class org.apache.axis2.databinding.utils.ConverterUtil.java in method public static Object convertToArray(Class baseArrayClass, List objectList) at line 1148 		        } else if (Date.class.equals(baseArrayClass)) { 	            Date[] array = new Date[listSize]; 	            for (int i = 0; i < listSize; i++) { 	                Object o = objectList.get(i); 	                if (o != null) { 	                    if (o instanceof String){ 	                        array[i] = ConverterUtil.convertToDate(o.toString()); 	                    } else if (o instanceof Date) { 	                        array[i] = (Date) o; 	                    } 	                } 	            } 	            returnArray = array;
616||Hi everyone, 		I have this in my build.xml, to generate my wsdl: 		... 	<java classname="org.apache.ws.java2wsdl.Java2WSDL" fork="yes" > 	             <arg value="-l"/>  	             <arg value="https://entitas-d.corp.turismodeportugal.pt:9443/services/Entity" />  		     <arg value="-of"/> 	             <arg value="${wsdl.dir}/Entity.wsdl" /> 		     <arg value="-tn"/>   		     <arg value="http://entitas.turismodeportugal.pt" /> --> 	 	    <!-- <arg value="-cn" /> 	             <arg value="pt.turismodeportugal.entitas.Entity" /> 	      <classpath> 	       <path refid="axis.classpath"/> 	       <pathelement path="${classes.dir}"/> 	      </classpath> 	     </java>  	... 		For HTTP(changing the line   <arg value="https://entitas-d.corp.turismodeportugal.pt:9443/services/Entity" /> to   <arg value="http://entitas-d.corp.turismodeportugal.pt:9763/services/Entity" />) it produces this in the wsdl: 	.... 	 <wsdl:service name="Entity"> 	        <wsdl:port name="EntityHttpSoap11Endpoint" binding="ns:EntitySoap11Binding"> 	            <soap:address location="http://entitas-d.corp.turismodeportugal.pt:9763/services/Entity"/> 	        </wsdl:port> 	        <wsdl:port name="EntityHttpSoap12Endpoint" binding="ns:EntitySoap12Binding"> 	            <soap12:address location="http://entitas-d.corp.turismodeportugal.pt:9763/services/Entity"/> 	        </wsdl:port> 	        <wsdl:port name="EntityHttpEndpoint" binding="ns:EntityHttpBinding"> 	            <http:address location="http://entitas-d.corp.turismodeportugal.pt:9763/services/Entity"/> 	        </wsdl:port> 	    </wsdl:service> 	.... 		For the HTTPS, it doesn't produce the Endpoints.... Any ideas? Something in the services.xml missing? I will attach the files..... 	Help please it urgent :S
617||Background: 	A JAX-WS web service should send a response that has the same character encoding as the request message. 			Solution: 	    The JAXB Marshaller in the JAX-WS runtime is not being reset correctly.  This leads to a bad message. 		     I am fixing the code and providing a small unit test that demonstrates the problem
618||A java.lang.NoSuchMethodException:my.app.SampleEnum.fromValue may occur when invoking a JAX-WS Web service. 		The problem will occur if the customer's java class (i.e. my.app.SampleEnum) is a java enum and does not have a fromValue(java.lang.String) method. 		Here is an example error: 		Exception is java.lang.NoSuchMethodException: 	my.app.SampleEnum.fromValue(java.lang.String) 		Solution: 		I am changing the JAX-WS runtime to detect the missing fromValue method and use a different algorithm to construct the enum constant.
619||A JAX-WS Web service client or provider may receive an UnmarshalException "unexpected element" error when it receives  	an inbound message.   The error indicates that a problem has occurred converting the incoming message into the customer's JAXB data object. 		Here is an example message: 		Cause:javax.xml.bind.UnmarshalException 	- with linked exception: 	[javax.xml.bind.UnmarshalException: unexpected element 	(uri:"http://my.test/", local:"myOperation"). Expected elements 	are 	<{http://my.test/}myOperationResponse>] 			All of the following must be true for this error to occur: 	  A) The JAX-WS Web service must use the document/literal  	wrapped style. 	  B) The method being invoked must not have the  	@RequestWrapper or @ResponseWrapper annotation. 	  C) The customer has provided a wrapper bean in the expected  	package (i.e. my.test.jaxws.MyOperationResponse). 	  D) The customer has provided another (non-wrapper bean) in  	the same package as the Web service interface (i.e.  	my.test.MyOperationResponse) 		Solution: 	When a JAX-WS Web service method does not have the @RequestWrapper or @ResponseWrapper annotation, the JAX-WS project uses an algorithm to locate the wrapper classes. 		The algorithm should first look in a sub-package named "jaxws" for the wrapper bean.  If the wrapper bean is not found, then it should look in the package associated with the target namespace. 		The error occurred because the algorithm was examining the packages in the wrong order.  I am making a correction, and will commit code later today.
620||Override the implementation of the following Provider method that was added to section 6.2.4 of the JAX-WS specification for JAX-WS 2.2: 		createW3CEndpointReference(String address, QName interfaceName, QName serviceName, QName portName, List<Element> metadata, String wsdlDocumentLocation, List<Element> referenceParameters, List<Element> elements, Map<QName, String> attributes) 	Creates W3CEndpointReference using the specified parameters. This method adds support for extension elements, extension attributes, and porttype name.
621||Problem: 		Due to a coding flaw, the doc/lit wrapped processing (specifically DocLitWrappedMininalMethodMarshaller) contains rpc/literal checking. 		Solution: 		The rpc/literal checking will be removed from this portion of the code.  A testcase validating the change will also be contributed.
622||Summary: 	The JAX-WS runtime may unmarshal data into incorrect JAXB java objects in the following scenario: 		----------------------------- 	Failing Scenario: 	1) The JAX-WS web service methods reference JAXB classes from different packages (i.e. a.Bean2 and b.Bean1). 		2) Both packages contain JAXB classes for the same namespace. (i.e. a.Bean2 and b.Bean1 are both generated from a schema whose target namespace is urn:sample) 		3) Both packages contain other JAXB classes with similar names (i.e. b.Bean2 and a.Bean1) 		In this scenario, the JAX-WS runtime may unmarshal data into the wrong JAXB object.  For example, the data may be  	unmarshaled into an a.Bean1 object even though b.Bean1 is referenced in the JAX-WS web service. 		This is an unusual scenario, and will occur if the customer provides hand-written JAXB classes instead of using RAD wsimport tooling. 		------------------------ 	Proposed Solution: 	I am currently testing a solution that does the following: 	  * keeps track of the classes that are directly referenced. 	  * when the jaxbcontext is created from classes, the directly referenced classes are prefered. 		I also have a unit fvt test that mimics the failing case.
623||Functions public static Date convertToDate(String source) and public static Calendar convertToDateTime(String source) returns wrong time when parsing a data without timezone information. 		When parsing a time without timezone set, default timezone is used, But, daylight saving is always set to zero (instead of using the local default daylight savings also). This gives the wrong time back when the local daylight savings is not zero. 		The fix is to only set daylight savings to zero (   calendar.set(Calendar.DST_OFFSET, 0);   ) when the time has time zone information.
624||There is a threading issue in the CommonsHTTPTransportSender.writeMessageWithCommons() method where it determines what HTTP version to use when sending the message and whether the chunked transfer encoding should be used.  The 'chunked' and 'httpVersion' member variables are set when this transport sender is constructed, but are then overridden as every message is sent if that message defines a property explicitly enabling the chunked encoding, or setting the HTTP version.  However, as multiple threads may be active in this code simultaneously, it is very possible that the wrong combination of parameters will be used for a particular message.  In addition, as soon as one message sets these values explicitly, the default values are changed for all subsequent messages. 		In the current trunk (r919960) from line 392: 		{code} 	if (messageContext.getProperty(HTTPConstants.CHUNKED) != null) { 	                chunked = JavaUtils.isTrueExplicitly(messageContext 	                        .getProperty(HTTPConstants.CHUNKED)); 	            } 		            if (messageContext.getProperty(HTTPConstants.HTTP_PROTOCOL_VERSION) != null) { 	                httpVersion = (String) messageContext 	                        .getProperty(HTTPConstants.HTTP_PROTOCOL_VERSION); 	            } 	            // Following order needed to be preserved because, 	            // HTTP/1.0 does not support chunk encoding 	            sender.setChunked(chunked); 	            sender.setHttpVersion(httpVersion); 	            sender.setFormat(format); 	{code} 		This should be changed to use local variables for the http version and chunked encoding value, and retrieve this either from the message property or from the member variables if the message property is not set.  The member variables for these settings should be regarded as immutable after init() has been called.
625||The initial client-side enforcement drop r941769 does not work because it's looking for the required property on the response message context instead of the the request, and the check to tell if it's on the client side doesn't work either.
626||When using Axis2 Service Client to access a web service in transport session scoped services (by using 'Options.setManagedSession(true)'). If the operation called from the Service Client is an in-only operation, the session is not kept. 		This is because, when an in-only operation is called, the HTTP response code is 202, where by default, in the transports, when only the code is 200, the transport headers are set and the response it processed. So since headers are not set in 202 code situations, the session cookie is not again set in subsequent operations from the Service Client. 		Cheers, 	Anjana.
627||When using the SAAJ API, a user could add an AttachmentPart to the SOAPMessage and explicitly set the content type of the attachment by calling AttachmentPart.setContentType().   This causes the AttachmentPart to maintain the user-specified content type separate from the content type of the underlying DataHandler.    Within the jaxws module, the DataHandler instance is saved away and then used to serialize the SOAP message, but we don't maintain the user-specified content type.  Consequently, the DataHandler's content type is then used unconditionally when serializing the MIME part in the output message.     Recently, the DataHandler class (or more likely one of its underlying DataSource implementations) has started using a default content type of "application/xml" for an XML document attachment.   This has caused a failure in a Java EE CTS testcase, as the testcase explicitly sets the content type of the AttachmentPart to "text/xml" and expects that to be used in the outgoing request message.   I'm including a patch which fixes this problem by introducing a new "WrappedDataHandler" class which maintains the content type from the AttachmentPart as well as the DataHandler instance.   This allows for the correct content type to be used when serializing the message...
628||In partial wsdl scenario we create the AxisOperation from annotations but fail to add that AxisOperation into AxisService, hence the operation invocation fails in partial wsdl case. 		I will make the code change to address this issue.
629||I am experiencing 100% CPU on InputStream.read() on 30Kb json data from JSONDataSource. 	Using InputStream.read() is highly inefficient since we don't know the size of the JSON data;  	a reasonably-sized char buffer should be used to cut down on CPU and to lower the method calls on StringBuilder.append().  		Note also that regardless of the solution, there must be a charset conversion between an InputStream and a Reader (or a String object for that matter), and that the cast between int and char in the old code will corrupt an InputStream containing multibyte characters. Since JSON data is usually sent in UTF-8, we could hardcode the conversion in the InputStreamReader to overcome problems on Windows:  		            BufferedReader in = new BufferedReader(new InputStreamReader(jsonInputStream,"UTF-8")); 	            StringBuilder sb = new StringBuilder(512);  	            char[] tempBuf = new char[512]; 	            int readLen = -1; 		            while( (readLen = in.read(tempBuf)) != -1 ) 	                sb.append(tempBuf,0, readLen); 	             tempBuf = null;
630||In public ADBXMLStreamReaderImpl(QName adbBeansQName, 	                                  Object[] properties, 	                                  Object[] attributes, 	                                  TypeTable typeTable, 	                                  boolean qualified) {}  at the line 131 has  	String prefix =qname.getPrefix(); 	                        if(prefix ==null && "".equals(prefix)){ 	                            prefix = OMSerializerUtil.getNextNSPrefix(); 	                        } 		OMSerializerUtil.getNextNSPrefix(); will never be executed. Please change the && to || or change the entire 'if' condition.
631||We should cache the MessageFactory and SOAPFactory objects in org.apache.axis2.jaxws.utility.SAAJFactory
632||When using the JMS transport with axis2 and if we use local or distributed JMS transactions there is no way to signal the transport to rollback the transaction. The decision to roll back or commit the transaction is based on the out come of   jmsMessageReceiver.onMessage() in ServiceTaskManager class and the property "SET_ROLLBACK_ONLY".  	We need to set the property SET_ROLLBACK_ONLY to true in case the message receiver hit any error so that at the transport we can rollback the transaction (if any).  	A small patch will follow.  		Rajika
633||Wa are stressing the WSO2 ESB with some cache mediator enabled. Messages are echanged by tribes through the cluster's nodes. Under heavy load and with some big xml messages (1 mb per message) the local variable Map<ChannelMessage, Long> receivedMessages is growing continuously leading to a potential Out of Memory if the cleaning thread that runs every 5 minutes is not fast enough to free up memory. 		See: http://svn.apache.org/viewvc/axis/axis2/java/core/trunk/modules/clustering/src/org/apache/axis2/clustering/tribes/AtMostOnceInterceptor.java?view=markup 		This is because when an object is passed to a HashMap as a key internally the original object is kept. The Hasmap is using a private class Entry that has the hash, the orginal object used to create the hash, and the value that, in this usage case, is a long. 		Somewhere inside HashMap.java 		        // private variables 		  final Object key; 	        Object value; 	        Entry next; 	        final int hash; 			  // constructor  	        Entry(int i, Object obj, Object obj1, Entry entry) 	        { 	            value = obj1; <==== value, ok 	            next = entry; <===== entry with the same hash 	            key = obj; <======= orginal object, needed for the equals use in case of same hash 	            hash = i; <======== key, ok  	        } 		So if the AtMostOnceInterceptor manages for example 50 msg/sec and a message is 1 mb we could have within 5 minutes a memory usage for the messageReceived object of 6 GB. 		A simple solution, if we dont'to accept all this as something by desing, could be to pass to the HashMap the already calculated hash of the object (that is also the same method that is called internally  int i = hash(obj.hashCode());) to not give the opportunity to the HashMap to keep the actual object used to produce the key. 		..... 	// map 	 private static final Map<Integer, Long> receivedMessagesHashCodes = 	            new HashMap<Integer, Long>(); 		..... 		Integer hashCode = new Integer(msg.hashCode()); 		if (receivedMessagesHashCodes.get(hashCode) == null) {  // If it is a new message, keep track of it 	        receivedMessagesHashCodes.put(hashCode, System.currentTimeMillis()); 	        super.messageReceived(msg); 	} else {  // If it is a duplicate message, discard it. i.e. dont call super.messageReceived 	        log.info("Duplicate message received from " + TribesUtil.getName(msg.getAddress())); 	} 		etc... 		but maybe is not strong enough in the case tow messages have the same hash. A FIFO queue with a limited capacity  ?
634||I am adding a small change to check if debugging is enabled to add log statements in WSDL11ToAxisServiceBuilder, currently we log error messages even though a particular exception is absorbed. This change will reduce the footprint of log and make debugging easier.
635||JAX-WS 2.2 allows user to package application without packaging a FaultBean, this scenario is only valid from Start from Java case where wsdl is not packaged by the customer. When wsdl is not packaged Axis2 generates one and a user can store these generated artifacts in a cache directory. I am updating the JAX-WS implementation so that we can pick up generated classes from cache if such a cache exits.
636||The following NullPointerException may occur when invoking a JAX-WS async method 		 java.lang.NullPointerException 	at 	org.apache.axis2.jaxws.marshaller.factory.MethodMarshallerFactory. 	getMarshaller(MethodMarshallerFactory.java:106) at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler. 	getFaultResponse(JAXWSProxyHandler.java:473) at org.apache.axis2.jaxws.client.proxy.ProxyAsyncListener. 	getFaultResponse(ProxyAsyncListener.java:70) at org.apache.axis2.jaxws.client.async.AsyncResponse. 	processFaultResponse(AsyncResponse.java:431) at org.apache.axis2.jaxws.client.async.AsyncResponse.onError 	(AsyncResponse.java:129) 	... 		The problem occurs because the JAX-WS runtime must find and inspect the JAX-WS synchronous method in some cases. 	For example, the synchronous method contains the checked exceptions and must be examined when the web service 	returns a fault. 		If the synchronous method has a name that is different than the wsdl operation name, the search may fail. 	This triggers the NullPointerException. 			Proposed Solutoin: 		I have a small change to the search algorithm which will guarantee that the synchronous method is found. 		Kudos to Paul Mariduena for providing a test and testing this fix. 		I will be committing the change later today.
637||Background: 		A JAX-WS method document/literal wrapped method is annotated with @ResponseWrapper and @RequestWrapper annotations.  These annotations define (or default) to a class that represents the JAXB wrapper class.  In all common cases, the JAXB class represents a root element.  However in some cases the JAXB class may represent a complexType. 		Problem: 		When the @RequestWrapper or @ResponseWrapper class does not have an @XmlRootElement annotation, an UnmarshalException may occur. 		Proposed Solution: 		I am working on a change to the JAX-WS runtime to detect this scenario and use the "by type" JAXB unmarshaling to unmarshal the xml. 	A testcase will be changed to validate the code.
638||JAX-WS enables a user to pass a map of custom http headers with the request (by setting MessageContext.HTTP_REQUEST_HEADERS property on the BindingProvider). The map is a mapping of a header name to a list of values. Right now Axis2 seems to be handling a single value. If multiple values are passed an exception is generated in TransportHeadersAdapter. 		In revision 958078 I added a test case (with commented out code) that might be helpful in debugging this problem.
639||We are trying to upgrade AXIS2 from 1.5 to 1.5.2-SNAPSHOT in geronimo 2.2 branch and met some problems after the upgrading. 		A SAAJ client that are calling  services for several time will result in a timeout exception.   We didn't have this issue before the upgrading.   I noticed that there are some changes on the http transport code in 1.5.1 and 1.5.2.    		I don't have much  control on the httpSender itself because we are use SAAJ SOAPConnection.     I believe there must be some clean up code that need to be added to SOAPConnectionImpl after a calling. 		Can anyone give me some suggestions on this ? 		--------------------------------------------------------------------------------------------------------------------- 	 javax.xml.soap.SOAPException: Timeout waiting for connection 		at org.apache.axis2.saaj.SOAPConnectionImpl.handleSOAPMessage(SOAPConnectionImpl.java:198) 		at org.apache.axis2.saaj.SOAPConnectionImpl.call(SOAPConnectionImpl.java:132) 		Caused by: org.apache.axis2.AxisFault: Timeout waiting for connection 		at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 		at org.apache.axis2.transport.http.HTTPSender.sendViaPost(HTTPSender.java:203) 		at org.apache.axis2.transport.http.HTTPSender.send(HTTPSender.java:76) 		at org.apache.axis2.transport.http.CommonsHTTPTransportSender.writeMessageWithCommons(CommonsHTTPTransportSender.java:400) 		at org.apache.axis2.transport.http.CommonsHTTPTransportSender.invoke(CommonsHTTPTransportSender.java:225) 		at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:435) 		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:402) 		at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:229) 		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:165) 		at org.apache.axis2.saaj.SOAPConnectionImpl.handleSOAPMessage(SOAPConnectionImpl.java:192) 		... 40 more 		Caused by: org.apache.commons.httpclient.ConnectionPoolTimeoutException: Timeout waiting for connection 		at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager.doGetConnection(MultiThreadedHttpConnectionManager.java:497) 		at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager.getConnectionWithTimeout(MultiThreadedHttpConnectionManager.java:416) 		at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:153) 		at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) 		at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:346) 		at org.apache.axis2.transport.http.AbstractHTTPSender.executeMethod(AbstractHTTPSender.java:542) 		at org.apache.axis2.transport.http.HTTPSender.sendViaPost(HTTPSender.java:199) 		... 48 more
640||Cookie value is always kept whatever SESSION_MAINTAIN_PROPERTY value is configured
641||The JAX-WS runtime may report the following error condition        	for SOAP headers on the response message that contain defined      	output parameters:                                                 	.                                                                  	javax.xml.ws.WebServiceException: org.apache.axis2.AxisFault:      	Must Understand check failed for header http://someNamespaceURI    	: SomeHeaderName                                                   	at                                                                 	org.apache.axis2.jaxws.ExceptionFactory.createWebServiceExceptio   	n(ExceptionFactory.java:175)                                       	at                                                                 	org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(   	ExceptionFactory.java:70)                                          	at                                                                 	.....                                                              	Caused by: org.apache.axis2.AxisFault: Must Understand check       	failed for header http://someNamespaceURI : SomeHeaderName         	at                                                                 	org.apache.axis2.engine.AxisEngine.checkMustUnderstand(AxisEngin   	e.java:114)                                                        	at                                                                 	org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:178)    	at                                                                 	org.apache.axis2.description.OutInAxisOperationClient.handleResp   	onse(OutInAxisOperation.java:363)                                  	at                                                                 	.....                                                              		Output parameters may be defined to be in SOAP headers either      	in the WSDL or by JAX-WS annotations.                              		Here is an example of a WSDL binding which defines output          	parameter on a SOAP header:                                        	<output>                                                           	  <soap:header message="tns:MyResponse"                            	part="MyResponseHeader" use="literal"/>                            	  <soap:body parts="MyResponse" use="literal"/>                    	</output>                                                          		Here is an example of a JAX-WS annotation which defines an         	output parameter on a SOAP header:                                 	@WebMethod                                                         	public String echoString(                                          	   @WebParam(mode=WebParam.Mode.OUT, header=true)                  	Holder<String> MyResponseHeader)                                   		According to the JAX-WS spec, because these headers are defined for the operation, they should be automatically understood by the runtime... 	10.2.1 SOAP mustUnderstand Processing .... 	    3. Identify the set of header qualified names (QNames) that the binding instance understands. This is 	the set of all header QNames that satisfy at least one of the following conditions: 	        (a) that are mapped to method parameters in the service endpoint interface; 		Currently the code only checks for IN or INOUT parameters. 		I have created a patch to fix the problem.  During OperationDescription creation I have added code to check for output and return parameters that are in headers and add them to the understoodQNames ArrayList.  This is the list that is later referenced during mustunderstand checking.  I have also modified a unittest to verify that output and return type headers are correctly added to the ArrayList.
642||I changed my axis2 (1.5) service url to /data/MyService instead of 	/axis2/services/MyService by doing the following 	1. deleted the default tomcat ROOT web service and renamed axis2 to ROOT 	2. In web.xml I added 	<servlet-mapping> 	<servlet-name>AxisServlet</servlet-name> 	<url-pattern>/data/*</url-pattern> 	</servlet-mapping> 		3. In axis2.xml I set the parameter 		<parameter name="servicePath">data</parameter> 		This works fine except if the hostname starts with "data". So the following 	works 	http://axis2.myservices.com/data/MyService?wsdl 	http://feeddata.myservices.com/data/MyService?wsdl 	but 	http://data.myservices.com/data/MyService?wsdl 	http://datafeed.myservices.com/data/MyService?wsdl 	fails with "Requested resource not found!" from axis and no errors in the 	logs.
643||JAX-WS 2.2 spec has a new requirement where we need to use Wrapper Beans if customer packages them or Generate the wrapper Wrapper Beans if customer does not use this Bean a chooses to package them. This function is already present in axis2 JAX-WS runtime which makes use of DocLitWrappedMinimum however its is less robust and less performant. I am adding function where if Generated Beans are packaged in a cache we will use them, so we use DocLitWrappedMarshaller which is more performant and robust, if these beans are not in the cache we will use the DocLitWrappedMinimum marshaller.
644||History: 	The JAX-WS client runtime must build a JAXBContext to marshal the JAX-WS Web service data.  The context ClassLoader on the thread is used to find the classes and build the JAXBContext. 		Problem: 	If the customer or other code changes the context ClassLoader, then the JAX-WS marshaling on the client may fail with a MarshalException. 			Solution: 	The JAXProxyHandler (which is the code that controls the client proxy construction) is changed to inspect the context ClassLoader and the ClassLoader of the SEI. 	If the class loaders are different, the runtime determines which one to use (prefering the one that loaded the SEI).
645||Tested with Linux and Windows, 32 and 64 bit, with Java 6 sun. Using soapUi, java client or c# wse3.0 client. 		Hello  	I tested a simple axis2 1.5.1 service using axiom 1.2.9 libs downloaded from here: http://repository.apache.org/snapshots/org/apache/ws/commons/axiom/ 	with a simple method like this: 	Document getDocument(String id) 		The class Document contains two fields: 	  String uuid   	  DataHandler fileContent  		Mtom optimization doesn't work calling the service method, the file content is printed inline and not as an attachment/xop included 		Same service AAR work with axiom 1.2.8 		Result: 	<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"> 	   <soapenv:Body> 	      <ns:getDocumentResponse xmlns:ns="http://www.wso2.org/types"> 	         <return xsi:type="ax2282:Document" xmlns:ax2282="http://dao.dlsvc.webscience.it/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	            <UUID>uuidprova</UUID> 	            <fileContent>/9j/4A..........................</fileContent> 	         </return> 	      </ns:getDocumentResponse> 	   </soapenv:Body> 	</soapenv:Envelope> 		I think this is a regression. 		thanks 	regards
646||The build of the jaxws module fails if the machine is not connected to the Internet or if the local network requires special proxy settings. 		Failed tests: 	  testExtenisbilityElementAtBinding(org.apache.axis2.jaxws.respectbinding.WSDLBindingsTest) 		Tests in error: 	  testMetadata(org.apache.axis2.jaxws.endpoint.BasicEndpointTests)
647||Background: 		The JAX-WS runtime uses the information in the metadata *Description classes to determine a list of referenced packages and classes. 	This information is built and stored in the MarshalServiceRuntimeDescription getPackages method. 	And the package information is used to build a complete JAXBContext for marshaling and unmarshaling data. 			Problem: 	The *Description classes do not handle generics.  Thus the OperationDescription for the return type only captures (List) and not (Foo) from  	web methods like the following: 		      public List<Foo> myMethod(); 		The missing reference and subsequent missing package reference results in an incomplete JAXBContext. 	The incomplete JAXBContext may result in UnmarshalException or MarshalException errors. 			Proposal: 		I am working on a code change to the MarshalServiceRuntimeDesc builder logic to find the generic parameter arguments (like Foo in the sample above). 	I am also designing two validation tests.
648||JAX-WS 2.2 specification adds new properties to @RequestWrapper, @ResponseWrapper & @WebFault annotations. I am adding a change in metadata module that will consume these new property changes in JAX-WS runtime. 	The new properties are "PartName" in @RequestWrapper, @ResponseWrapper annotation and "MessageName" in @WebFault annotation.
649||Background: 	To reduce the incore memory footprint, the Axis2 kernel has a class (org.apache.axis2.wsdl.util.WSDLDefinitionWrapper) that delegates to one of several objects that provided access to the actual wsdl definition (i.e. WSDLWrapperReloadImpl).   		Problem: 	The WSDLWrapperReloadImpl object may be used in cases where the WSDL cannot be reloaded.  I am making a small change that will detect this situation and use the standard implementation.
650||In the IDL below there is a union within a struct. This breaks the deployer 		module unions  	{ 		struct A 		{ 			union AA switch (boolean)	 			{ 				case TRUE: short value;  			} theaa; 		}; 		}; 		module functiontest 	{ 		        interface FunctionTestService  	        { 	        		unions::A testUnions(); 		}; 	};	 			org.apache.axis2.deployment.DeploymentException 	        at org.apache.axis2.corba.deployer.CorbaDeployer.populateService(CorbaDeployer.java:329) 	        at org.apache.axis2.corba.deployer.CorbaDeployer.processService(CorbaDeployer.java:128) 	.... 	Caused by: java.lang.NullPointerException 	        at org.apache.axis2.corba.deployer.SchemaGenerator.isNillable(SchemaGenerator.java:484) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchemaforFieldsandProperties(Sc 	maGenerator.java:453) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchema(SchemaGenerator.java:401 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchemaForType(SchemaGenerator.j 	a:517) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchema(SchemaGenerator.java:250 	        at org.apache.axis2.corba.deployer.CorbaDeployer.processOperations(CorbaDeployer.java:464) 	        at org.apache.axis2.corba.deployer.CorbaDeployer.populateService(CorbaDeployer.java:300)
651||It looks like datatype fixed (Corba spec 3.11.3.4 Fixed Type) is not supported. 	If you create a service with an IDL containing type fixed, there is a NPE 		[ERROR] Error while deploying null 	org.apache.axis2.deployment.DeploymentException 	        at org.apache.axis2.corba.deployer.CorbaDeployer.populateService(CorbaDeployer.java:329) 	        at org.apache.axis2.corba.deployer.CorbaDeployer.processService(CorbaDeployer.java:128) 	        at org.apache.axis2.corba.deployer.CorbaDeployer.deploy(CorbaDeployer.java:97) 	        at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData. 	java:136) 	        at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:659) 	        at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:144) 	        at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListener.java:337) 	        at org.apache.axis2.deployment.RepositoryListener.checkServices(RepositoryListener.java:241) 		        at org.apache.axis2.deployment.DeploymentEngine.loadServices(DeploymentEngine.java:131) 	        at org.apache.axis2.deployment.WarBasedAxisConfigurator.loadServices(WarBasedAxisConfigurato 	r.java:284) 	        at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(Configura 	tionContextFactory.java:95) 	        at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:525) 	        at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:443) 	        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173) 	        at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:993) 	        at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4187) 	        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4496) 	        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) 	        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) 	        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:526) 	        at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1041) 	        at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:964) 	        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:502) 	        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1277) 	        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:321) 	        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) 	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) 	        at org.apache.catalina.core.StandardHost.start(StandardHost.java:722) 	        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) 	        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) 	        at org.apache.catalina.core.StandardService.start(StandardService.java:516) 	        at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) 	        at org.apache.catalina.startup.Catalina.start(Catalina.java:593) 	        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) 	        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	        at java.lang.reflect.Method.invoke(Method.java:615) 	        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) 	        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) 	Caused by: java.lang.NullPointerException 	        at org.apache.axis2.corba.deployer.SchemaGenerator.isNillable(SchemaGenerator.java:484) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchemaforFieldsandProperties(Sche 	maGenerator.java:453) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchema(SchemaGenerator.java:391) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchemaForType(SchemaGenerator.jav 	a:517) 	        at org.apache.axis2.corba.deployer.SchemaGenerator.generateSchema(SchemaGenerator.java:233) 	        at org.apache.axis2.corba.deployer.CorbaDeployer.processOperations(CorbaDeployer.java:464) 	        at org.apache.axis2.corba.deployer.CorbaDeployer.populateService(CorbaDeployer.java:300) 	        ... 38 more
652||Background: 	The JAX-WS engine uses JAXB data objects. 	The JAXB data objects are marshaled to xml using a JAXB provided Marshaler.   	The Marshaler writes information to an XMLStreamWriter (which will be the axiom provided MTOMXMLStreamWriter). 		Problem: 	If a customer populates the JAXB bean with non-xml characters (0x15), the JAXB Marshaler will write the illegal characters without errors. 	However the SOAP node receiving the message will fail. 		Solution: 	Provide a JAX-WS property that a customer can set (using the @WebServiceContext) to recognize and remove illegal characters. 		This solution will have an axiom and axis2 contribution.
653||JAX-WS 2.2 specification restricts exposure of static and Final method on Implicit SEI as a webservice. I am making a change that will allow us to be compliant with this requirement, I am also adding new test cases to prove restriction on Static and Final operations.
654||I am providing a fix for NPE that's occuring when attempt is made to stop Modules.  The fix is in ConfigurationContext code where I have put a null check for AxisConfigurator object.
655||Background: 	JAX-WS supports Document/Literal Wrapped style operations.  The JAX-WS runtime uses the generated wrapper beans to marshal and unmarshal the parameters for the web method. 	If the wrapper beans cannot be found, the JAX-WS uses an alternative marshaling algorithm called "Document/Literal Wrapped Minimal". 		Problem: 	If a scenario requires the Document/Literal Wrapped Minimal scneario and the user's web method passes a null object for a parameter that requires a java.util.List object, the marshaling will fail. 		Solution: 	A change is made to the existing Document/Literal Wrapped Minimal List/Array testing to recreate the failing scenario. 	A small change is made to the Document/Literal Wrapped Minimal algorithm to tolerate this usage. 	I am currently running tests on the solution.
656||I am adding warning message to indicate that public methods along with the one annotated with @Webmethod will be exposed as webservice with new JAX-WS2.2, the warning message only implies to migrating application and can be suppressed by setting LegacyWebmethod=true property. 		I will provide a patch for this change.
657||Background: 		The JAX-WS @RequestWrapper and @ResponseWrapper annotations identify JAXB beans to marshal and unmarshal the data. 	The JAXB wrapper bean normally contains an @XmlRootElement annotation, which defines the xsd:element rendering of the data. 	However the @XmlRootElement is not required.   	Prior changes to the JAX-WS runtime have enabled support for wrappers with just the @XmlType annotation. 		The JAX-WS engine constructs a JAXBContext using the packages referenced by the web service when all of the referenced packages contain a JAXB ObjectFactory. 	This strategy assumes that each ObjectFactory will reference all of the beans representing root types and that all other necessary beans have an @XmlRootElement annotation. 		Problem: 		We encountered the following scenario:   	   * The @RequestWrapper references a JAXB bean. 	   * The wrapper bean does not have an @XmlRootElement, but it does have an @XmlType. 	   * The ObjectFactory does not reference the wrapper bean. 		The current runtime fails to include the JAXB bean in its JAXBContext.  This causes marshaling and unmarshaling failures. 		Solution: 	   The JAXBUtils code constructs the JAXBContext.  JAXBUtils has a list of all of the classes referenced by the web service. 	   Code will be added to inspect the new JAXBContext to ensure that it contains all of the referenced classes. 	   If it does not, the code will fall back to the pre-existing "construct JAXBContext using individual classes" algorithm. 		This is a small change.
658||I believe that the main if/else statement in these methods is incorrect.  When passing in a SOAPEnvelope object set for SOAP1.2, the method still uses the DOOMAbstractFactory.getSOAP11Factory() method.  I believe that it should use the DOOMAbstractFactory.getSOAP12Factory() instead.
659||Observable behaviour: 		Sometimes WSDL request returns wrong WSDL. This occurs when multiple WSDL requests are made at the same time. 		The cause: 		org.apache.axis2.dataretrieval.WSDLDataLocator is created only once and reused in a multiple requests (see DataLocatorFactory, static method createDataLocator. The problem is that DataLocator contains a state that is changed during the request, most importantly the field "theService". It is possible that two concurrent WSDL request are processed at the same time and one request overrides theService field set by other request. Consider the following scenario: 		1. Both requests arrive (at the same time) at the line 129 (I assume version 1.4.1), which read: 	<pre> 	axisService2WOM = new AxisService2WSDL11(theService); 	</pre> 	2. Both requests start executing the line (reading theService field). 	3. Since WSDLDataLocator is shared between those two requests and theService is field of that class, both requests will use same AxisService to generate WSDL. As a result, both requests will output the same WSDL, which is obviously wrong. 		I don't understand, why theService is made field after all? I think, it should be a local variable instead.
660||I have a test web service with following methods & classes, 		Method 	------------ 	public String addPerson(Person p) { 	if(p instanceof Employee) { 	return "Employee";  	} 	return "Person"; 	} 	Note: Method is annotated with @WebMethod, @WebParam annotations, so is web service with @WebService. 		Classes 	------------- 		Class Person { 	private String name; 		// getters and setters 	} 		Class Employee extends Person{ 	private int employeeNo; 		// getters and setters 	} 		Observations 	------------------- 	In spite of client sending the serialized Employee object the web service is always taking it as a Person object. I have checked the soap packet on client with firebug tool, employee number is present in the payload. I also checked soap MESSAGE on server & there I dont see employee number attribute.
661||Summary: 	Customers use a JAX-WS application handler to query or modify the incoming or outgoing message.   Here is  one common use cases:  	   1) A handler is used to log the incoming or outgoing  	message. 		Customers migrating an application from JAX-RPC will often use a JAX-WS SOAPHandler (jaxws.xml.ws.handler.soap.SOAPHandler) because it supports the same SAAJ data model as JAX-RPC. 		The SAAJ data model is the only SOAP-aware data model supported by the JAX-WS specification.  However there are some drawbacks to the SAAJ model: 		   A) Accessing the message as an SAAJ SOAPMessage causes the entire XML message to be rendered as an SAAJ SOAPElement graph.  This transformation increases the memory footprint and processing time. 		   B) After the handlers have completed, the message must be transformed back into the data rendering required for the target method.  For example, the SAAJ SOAPElement graph is  	converted into a JAXB bean.  This transformation also increases the memory footprint and processing time. 		Solution: 		A new property will be added to the JAX-WS runtime which can be queried by a customer's hander to access the message as a String. 		The property is associated with the  	javax.xml.ws.handler.MessageContext object. 	   Property Name: "jaxws.message.accessor" 	   Property Value: null or Object 		The customer can call the toString() method on the returned object to access the message as a String. 		Here is an example usage: 		 public myHandler implements SOAPHandler { 	 ...  	  public boolean handleMessage(MessageContext mc) { 	    Object accessor = mc.getProperty(jaxws.message.accessor"); 	    if (accessor != null) { 	      msgText = accessor.toString(); 	      myLogger(msgText); 	    } 	    .. 	  } 	 }
662||When the JAX-WS runtime sends a SOAP message using the "UTF-16" character encoding, a byte order mark (BOM) precedes  	the xml portion of the message. 		In some cases, a second, stray BOM may appear in the message within the Body contents.  The BOM characters are: 	   0xFF 0xFE or  	   0xFE 0xFF 		These extra characters are usually ignored by the receiver of the message; however, in some cases, the receiver may fail with an error or silently continue with the bad data. 		The extra BOM characters are located after the Body start tag or are present within the contents of the Body's children. 		-------------------- 	Proposed Solution: 	I have written some code in the JAX-WS marshaller to detect this situation. 	A ouput stream filter is inserted to remove the BOM as it is written.
663||Revisions 631988 and 829832 added support for support for disabling the WS-Addressing outbound handler using a parameter in module.xml. 		This impacts performance in org.apache.axis2.handlers.addressing.AddressingOutHandler#invoke because the code changed from: 		        //determine whether outbound addressing has been disabled or not. 	        boolean disableAddressing = 	            msgContext.isPropertyTrue(DISABLE_ADDRESSING_FOR_OUT_MESSAGES, this.disableAddressing); 		to: 		    	//determine whether outbound addressing has been disabled or not. 	        // Get default value from module.xml or axis2.xml files 	        Parameter param = msgContext.getModuleParameter( 	                DISABLE_ADDRESSING_FOR_OUT_MESSAGES, MODULE_NAME, handlerDesc); 	        boolean disableAddressing = 	            msgContext.isPropertyTrue(DISABLE_ADDRESSING_FOR_OUT_MESSAGES, 	                    JavaUtils.isTrueExplicitly(Utils.getParameterValue(param))); 		The call to MessageContext#getModuleParameter is quite expensive but this is only used to find a default value in case it is not set in the MessageContext.  When there is a value in the MessageContext, the extra work is unnecessary. 		This jira should be used to reverse the logic in AddressingOutHandler so we only call getModuleParameter if the value is not set in the MessageContext.
664||We generate a proxy client using wsdl2Java. We do not have any proxy server enabled in our system. However, after the system is in use for some time (a few hours), something sets the system variable http.proxyHost to "" (blank) instead of null. That is, the call to System.getProperty(HTTP_PROXY_HOST) returns "" instead of null. We have yet to figure out why this happens.  		That causes the following if block in org.apache.axis2.transport.http.AbstractHTTPSender to evaluate to true and execute,  		        // proxy configuration 		        if (ProxyConfiguration.isProxyEnabled(msgCtx,targetURL)) { 	            log.debug("ProxyConfiguration"); 	            ProxyConfiguration proxyConfiguration = new ProxyConfiguration(); 	            proxyConfiguration.configure(msgCtx,client,config); 	        } 		Because of this, the program thinks a proxy connection with proxy host = "" is enabled and it tries to use it. See below (org.apache.commons.httpclient.HttpConnection) 		    public void open() throws IOException { 	        LOG.trace("enter HttpConnection.open()"); 		        final String host = (proxyHostName == null) ? hostName : proxyHostName; 	        final int port = (proxyHostName == null) ? portNumber : proxyPortNumber; 	        assertNotOpen(); 		And because the host is "', we get the error "Address is invalid on local machine, or port is not valid on remote machine".  	This prevents all transactions from being sent to the server, and requires a restart of our services.  		Question: 	What is setting the http.proxyHost to blank?  	Should blank http.proxyHost be treated the same way as null? (If blanks were treated like nulls in this case, we wouldn't have this issue.)
665||'equals ' and 'hashCode ' method is missing in org.apache.axis2.jaxws.description.impl.FaultDescriptionImpl.class  		The class org.apache.axis2.jaxws.description.impl. OperationDescriptionImpl.class has an attribute 'faultDescriptions'. This attribute is an ArrayList of org.apache.axis2.jaxws.description.impl.FaultDescriptionImpl- objects. 			The class  	org.apache.axis2.jaxws.runtime.description.marshal.impl.MarshalServiceRuntimeDescriptionImpl  has an attribute 'faultBeanDescMap'. This attribute is a HashMap  contended: 		key value a org.apache.axis2.jaxws.description.impl.FaultDescriptionImpl 	value object an instance of org.apache.axis2.jaxws.runtime.description.marshal.impl.FaultBeanDescImpl.class 		We have a productive runtime NullPointerEception in  org.apache.axis2.jaxws.marshaller.impl.alt MethodMarshallerUtils in the method demarshalFaultResponse on line  		QName tryName = new (faultBeansDesc.getFaultBeanNameSpase ... 		because faultBeansDesc is null:  			Caused by: javax.xml.ws.WebServiceException: java.lang.NullPointerException 		at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:180) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:79) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:134) 		at org.apache.axis2.jaxws.marshaller.impl.alt.DocLitBareMethodMarshaller.demarshalFaultResponse(DocLitBareMethodMarshaller.java:372) 		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.getFaultResponse(JAXWSProxyHandler.java:400) 		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.createResponse(JAXWSProxyHandler.java:373) 		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.invokeSEIMethod(JAXWSProxyHandler.java:294) 		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.invoke(JAXWSProxyHandler.java:147) 		at $Proxy30.ermittelnHilfsmittelVertraege(Unknown Source) 		at sun.reflect.GeneratedMethodAccessor938.invoke(Unknown Source) 		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 		at java.lang.reflect.Method.invoke(Method.java:585) 		at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.doInvoke(JaxWsPortClientInterceptor.java:416) 		at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.doInvoke(JaxWsPortClientInterceptor.java:392) 		... 40 more 	Caused by: java.lang.NullPointerException 		at org.apache.axis2.jaxws.marshaller.impl.alt.MethodMarshallerUtils.demarshalFaultResponse(MethodMarshallerUtils.java:887) 		at org.apache.axis2.jaxws.marshaller.impl.alt.DocLitBareMethodMarshaller.demarshalFaultResponse(DocLitBareMethodMarshaller.java:366) 		... 50 more 		I switched the log level on axis2.jaxws and see: 		[14.09.10 08:18:51:002 CEST] 0000001e DescriptionFa 1 org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl createServiceDescription Cache Map = {org.apache.axis2.jaxws.description.DescriptionKey@b1873327=org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl@14881488 	ServiceQName: {http://de/}HelloImplService 	isWSDLSpecified: true; WSDL Location: file:./WEB-INF/wsdl/HelloImplService.wsdl 	WSDL Definition available: true; Generated WSDL Definition available: false 	Number of ports: 1 	Port QNames: {http://de/}HelloImplPort;  	Number of EndpointDescrptions: 1 	org.apache.axis2.jaxws.description.impl.EndpointDescriptionImpl@203c203c 	Name: HelloImpl; Endpoint Address: http://127.0.0.1:9080/FaultTest/HelloImplService 	ServiceQName: {http://de/}HelloImplService; PortQName: {http://de/}HelloImplPort; TargetNamespace: http://de/ 	Service Mode: null; Binding Type: http://schemas.xmlsoap.org/wsdl/soap/http; Client Binding Type: http://schemas.xmlsoap.org/wsdl/soap/http 	Is provider-based: false; Is proxy-based: true; Is WSDL fully specified: true 	AxisService: org.apache.axis2.description.AxisService@5480548 	EndpointInterfaceDescription: org.apache.axis2.jaxws.description.impl.EndpointInterfaceDescriptionImpl@26a026a 	Name: HelloImpl; PortType: {http://de/}HelloImpl 	SOAP Style: DOCUMENT; SOAP Use: LITERAL; SOAP Paramater Style: WRAPPED 	Number of operations: 1 	Operation: org.apache.axis2.jaxws.description.impl.OperationDescriptionImpl@2d802d8 	Name: sayHelloWorld; Operation Name: sayHelloWorld; Action:  	Operation excluded: false; Is oneway: false; Is returning result: true; Is result header: false; Is JAXWS Client Async method: false 	SOAP Style: DOCUMENT; SOAP Use: LITERAL; SOAP Paramater Style: WRAPPED 	Result name: return; Result part name: return; Result type: class java.lang.String; Result actual type: class java.lang.String 	Request Wrapper class: de.SayHelloWorld; Response Wrapper class: de.SayHelloWorldResponse 	Java declaring class name: de.HelloImpl 	Java method name: sayHelloWorld 	Java paramaters: [Ljava.lang.String;@44e844e8 	Service Implementation method: null 	Axis Operation: org.apache.axis2.description.OutInAxisOperation@3ece3ece 	Number of Parameter Descriptions: 1 	Parameter Description: org.apache.axis2.jaxws.description.impl.ParameterDescriptionImpl@13b813b8 	Name: arg0 	Is header: false; Is holder: false 	Mode: IN 	Type: class java.lang.String; Actual type: class java.lang.String 	Number of Fault Descriptions: 1 	Fault Description: org.apache.axis2.jaxws.description.impl.FaultDescriptionImpl@5f345f34 	Exception class: de.WebServiceFaultException_Exception 	Name: WebServiceFault 	Namespace: WebServiceFault 	FaultBean: de.WebServiceFaultException 	FaultInfo Type Name  : de.WebServiceFaultException 	No Attachment Descriptions 	RuntimeDescriptions:0 		RuntimeDescriptions:1 		  MarshalServiceRuntime:JAXWS-MARSHAL 	    Packages = [de] 	    AnnotationDesc cached for:de.SayHelloWorld 	      @XMLRootElement exists = false 	    AnnotationDesc cached for:de.WebServiceFaultException 	      @XMLRootElement exists = false 	    AnnotationDesc cached for:java.lang.String 	      @XMLRootElement exists = false 	    AnnotationDesc cached for:de.SayHelloWorldResponse 	      @XMLRootElement exists = false 	    PropertyDescriptorPlus Map cached for:de.SayHelloWorldResponse 	      propertyName   =return 	        xmlName      =return 	        propertyType =java.lang.String 		    PropertyDescriptorPlus Map cached for:de.SayHelloWorld 	      propertyName   =arg0 	        xmlName      =arg0 	        propertyType =java.lang.String 	    RequestWrappers 	    Operation:sayHelloWorld RequestWrapper:de.SayHelloWorld    ResponseWrappers 	    Operation:sayHelloWorld ResponseWrapper:de.SayHelloWorldResponse    FaultBeanDesc 	    FaultException:de.WebServiceFaultException_Exception 		      FaultBean Class Name :de.WebServiceFaultException 	      FaultBean Namespace  :http://de/ 	      FaultBean Local Name :WebServiceFault 		} 		The out- and in- messages are correct. If no  		RuntimeDescriptions:1 		  MarshalServiceRuntime:JAXWS-MARSHAL 	.... 		in log file is available, the program runs correct. So the failure is only on runtime description fragment. 	Actually code in MethodMarshallerUtils  musts fail, because: 		        FaultDescription fd = operationDesc.getFaultDescriptions()[i]; 	// gives an instance of FaultDescriptionImpl from ArrayList 	        FaultBeanDesc faultBeanDesc = marshalDesc.getFaultBeanDesc(fd); 	// search for instance in another HashMap and a key value for search hasn't equals method, 	// the next code trays to operate with NULL object: 	        QName tryQName = new QName(faultBeanDesc.getFaultBeanNamespace(), ...  		Please, consider to correct this bug. 	Our solution for production environment is to redefine the interface. There are only request and response messages and no fault any more. It is not pretty.
666||For an InOutAxisOperation, HTTPConstants.AUTO_RELEASE_CONNECTION property is always true. 	But I need to release the connection manually. Therefore, there should be a mechanism to configure this property.
667||Background: 	JAX-WS uses JAXB as its data/parameter model.  A JAXB bean can support SWA and MTOM attachments.  (MTOM attachments are more common). 		Problem: 	In some cases an SWA attachment is not marshaled by the JAX-WS runtime.  It appears that this occurs when a writer other than an MTOMXMLStreamWriter is used to write the message. 		Solution: 	I discovered a coding error in the JAX-WS JAXBAttachmentMarshaller. I till provide a fix
668||The JAX-WS runtime uses the JAXB framework to marshal and unmarshal the classes specified in @RequestWrapper and @ResponseWrapper. 		In the latest version of Axis2, the JAX-WS 2.1 or 2.2 tooling is used.  A @RequestWrapper or @ResponseWrapper class will contain appropriate @XmlSeeAlso 	annotations to locate the derived classes of the parameters (if any). 		If the wrapper classes were constructed using a prior version of JAX-WS (i.e. 2.0), then the @XmlSeeAlso annotations are not available.  This may cause the xml to be marshaled with the base element name. 		I am making a small change to the runtime to tolerate a subset 2.0 generated wrapper classes that don't have @XmlSeeAlso annotations.  		Thanks,  	Rich Scheuerle
669||I am committing a patch contributed by Doug Larson of IBM.  The change addresses a performance problem in AddressingInHandler. 	Currently, we first check to see if there is a parameter to disable inbound addressing which is normally false but then we find out there are no soap headers anyway. The change moves the check for soap headers before we check to see if there is a parameter to disable inbound addressing. 		Attached is the patch for this change contributed by Doug Larson.
670||I am scrubbing the JAX-WS code looking for minor performance improvements related to property access.
671||In TempFileManager, in the static initialization block, if tmpFiles is set to NULL because tmpDir.listFiles() returns NULL (eg. tmpDir does not exist), then a NPE occurs in the following for loop on line 191.
672||In some scenarios it is better if we can control the HTTPClient caching using a parameter in the transport description. This is useful if we are using the transport sender using the generic Axis2 transport descriptions without going to the specifics of the transport.
673||The WS-Addressing action that is being generated is not correct in some scenarios where faults are generated. The particular failure to be addressed by this jira was discovered during CTS testing for jax-ws 2.2. Patch to be supplied shortly.
674||History: 	The JAX-WS outbound and endpoint dispatch code capture exceptions in a "caused by exception" property.  This information can then be accessed later for debugging or failure analysis. 		Problem: 	This JAX-WS inbound handler processing is not catching or setting the "caused by exception" property.  As a result we lack sufficient trace information if an error occurs during inbound JAX-WS handler processing. 		Solution: 	I am adding this small change, and I am adding a validation test. 		I am currently in the final stages of testing.  I will likely commit these changes later today. 		Rich
675||The W3C SOAP/JMS binding specification (located here: http://www.w3.org/2002/ws/soapjms/) is nearing its first approved version, and has defined a more up to date binding ID for use in the @BindingType annotation (for JAX-WS endpoint impl classes) and within the soap:binding transport attribute within a WSDL document.    Previously, the SOAP/JMS spec defined this binding ID: 	   http://www.example.org/2006/06/soap/bindings/JMS/ 	but that was just a placeholder, and the spec has amended that to this new binding ID: 	   http://www.w3.org/2010/soapjms/ 		I've made some minor changes to the jax-ws and axis2 code to reflect this new binding ID, and I've also run some tests and found a few problems and fixed those as well.    I'm attaching a patch file with the changes. 		The purpose of the JIRA is to request that someone apply the changes since I'm not a committer.
676||Background: 		The JAX-WS handler chain is run within the JAX-WS module of Axis2.   The JAX-WS module has its own MessageContext (org.apache.axis2.jaxws.core.MessageContext) and 	this MessageContext has its own "blob" object (Message) that holds the xml message. 	When flow logically enters and leaves the JAX-WS module, information (like the Message) is propogated to/from the Axis2 MessageContext. 		For example, when a JAX-WS client handler edits the xml message (via SAAJ apis), it is actually editing the Message object on the jaxws core MessageContext. 	After the handler chain completes, the flow of control moves from the JAX-WS module into the Axis2 outbound transport layer. 	At that time, the Message object is propogated to the Axis2 MessageContext as an OM SOAPEnvelope. 		Problem: 	A user's JAX-WS client outbound handler's handleMessage method will return false if the the user wants the handler chain to stop processing the message. 	In such cases, the chain is reversed and the outbound message becomes the inbound message. 	The handlers are called and processing returns to the client application which invoked the BindingProvider (dispatch or proxy). 		The problem is that the Message that was edited by the outbound handler(s) is lost when the chain is reversed.   	Thus the client application receives the wrong Message and fails. 		Solution: 	The JAX-WS runtime was failing to propogate its Message object to the Axis2 MessageContext's OM SOAPEnvelope in this scenario. 	The code will be changed to add this copy when the handler chain processing reverses the handler chain. 	I am testing this solution now.
677||This issue was originally reported in [1]. 		Original problem description: 		[quote] 	i have a problem using saaj implementation of AXIS2 (1.5.2) with xmlsec: after encrypt a node it delete it's original content with this algorithm: 		while (node.hasChildNodes()) { 	   node.removeChild(node.getFirstChild()); 	} 		that fail with TextNodes.  	[/quote] 		This code indeed triggers a DOM NOT_FOUND_ERR exception with Axis2's SAAJ implementation. 		[1] http://markmail.org/thread/lcma3lp3jnfmp476
678||I discovered two problems in the JAXBUtils code (which creates and pools the JAXBContext objects for JAX-WS). 		The first problem is that the JAXBContext cache is searched in the createJAXBContext method with the original key even if "context/package loading" is disabled. 		The second problem is that the JAXBContext is created using the Context ClassLoader even if a specific ClassLoader was passed into the method.  (This normally will only cause a duplicate construction call, but this flow should be removed). 		I am currently testing these two small changes.
679||When a method can throw multiple faults, but only some of those faults have custom actions that are set using the @Action and @FaultAction annotations, the other faults have incorrect default fault actions because the Exception class name is the empty string. 		E.g. 	@Action( 	        fault={ 	            @FaultAction(className=TooBigNumbersException.class, value="http://fault5/toobignumbers") 	        }) 	    public int addNumbersFault5(int number1, int number2) throws AddNumbersException, TooBigNumbersException { 	        // throw AddNumbersException 	    } 		Expected:<tns>/<class>/addNumbersFault5/Fault/AddNumbersException,  	Actual:<tns>/<class>/addNumbersFault5/Fault/ 		This is similar to the issue in AXIS2-4839, which was using the wrong faultAction when the value="" in the @FaultAction annotation.  This issue was also found during CTS testing for jaxws22.
680||As per the JSR 250 specification the @PostConstruct annotation can be used on methods encapsulated with private, public, default or protected. Currently in JAX-WS code we are only able to invoke methods with @PostConstruct annotations that are public, the invocation on method with any other encapsulation fails with following exception: 		Caused by: javax.xml.ws.WebServiceException: org.apache.axis2.jaxws.lifecycle.LifecycleException: java.lang.IllegalAccessException: Class org.apache.axis2.jaxws.lifecycle.BaseLifecycleManager$1 can not access a member of class jcdi.server2.InjCheck with modifiers "" 		at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:175) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:128) 		at org.apache.axis2.jaxws.server.EndpointController.handleRequest(EndpointController.java:312) 		at org.apache.axis2.jaxws.server.EndpointController.invoke(EndpointController.java:103) 		at org.apache.axis2.jaxws.server.JAXWSMessageReceiver.receive(JAXWSMessageReceiver.java:161) 		I am providing a fix for this issue.
681||Background: 	The AbstractHandler class exposes an invoke() method that Handlers override to provide the specific invoke code. 		Problem: 	Many Handlers actually have 2 stages of logic.  The first stage simply does some quick processing to determine if the handler should be called.  The second stage does the actual work. 	Because there is only one invoke method, these separate stages of processing get lumped together. 		Solution: 	Provide an alternative (optional) invoke semantic. 	A Handler can choose to override the new invoke_stage1 and invoke_stage2 methods. 	All current Handlers will continue to work.  The existing invoke() method is retained.
682||When a class implements an interface (or extends a class) which is a parameterized type, compiler creates a synthetic method which behaves as a bridge method in order to support sub classing. Axis2 detects this bridge method as an overloaded method and hence does not properly support service classes having parameterized super types. For example, axis2 does not support EchoClass below as a service class. 		public interface Echo<T> { 	    public T echo(T value); 	} 		public class EchoClass implements Echo<String> { 	    public String echo(String value) { 	        return value; 	    } 	}
683||SOAPConnectionTest#testGet connects to http://java.sun.com/index.html (!!!) to test sending GET requests with SOAPConnection. java.sun.com now redirects to oracle.com, but for several days, this redirection has been extremely slow or even times out. This considerably increases the time it takes to execute the SAAJ tests. Anyway, there is no need to notify Oracle every time somebody somewhere in the world is building Axis2... Therefore, this test should be refactored to start its own embedded Jetty container so that GET requests can be tested properly.
684||When omitting the targetNamespace attribute from an xsd, or providing it with an empty value, code generation with the XSD2Java class fails with a NullPointerException. 		The reason is that the SchemaCompiler class calls URLProcessor.makePackageName() with the value returned by the call to schema.getTargetNamespace(), which is null in this case. 		The URLProcessor.makePackageName() method then generates the exception, because it tries to call methods from the null object. 		To me, this is a bug, because AFAIK, the targetNamespace attribute isn't required.
685||The problem: 		* In Axis2 1.5.2, we upgraded Axiom to 1.2.9, and Axis2 1.5.3 uses Axiom 1.2.10. 	* In r741656, David Illsley changed the way Axiom is OSGi-ified. In particular the axiom-impl bundle now has Private-Package: org.apache.axiom.*. This is of course entirely correct because other bundles should only depend on the Axiom API, not on classes of a particular implementation. 	* The Axis2 OSGi bundle has Import-Package: org.apache.axiom.om.impl.llom. The reason is that there is indeed code in Axis2 that depends directly on the LLOM implementation classes. This should of course not be the case, but that's the way it is for the moment. 	* There are no unit tests for the Axis2 OSGi bundle. 		Result: In Axis2 1.5.2, the OSGi bundle is broken because of the upgrade to Axiom 1.2.9. It is expected that this issue also affects the current trunk. 		Steps to reproduce (with Axis2 1.5.3): 		1. Download, extract and start the Felix Framework Distribution. 		2. Install the following bundles: 		install http://repo1.maven.org/maven2/org/apache/ws/commons/axiom/axiom-api/1.2.10/axiom-api-1.2.10.jar 	install http://repo1.maven.org/maven2/org/apache/ws/commons/axiom/axiom-impl/1.2.10/axiom-impl-1.2.10.jar 	install http://apache.megamobile.be//felix/org.apache.felix.scr-1.6.0.jar     	install http://repo1.maven.org/maven2/org/apache/axis2/org.apache.axis2.osgi/1.5.3/org.apache.axis2.osgi-1.5.3.jar 	install http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.wsdl4j/1.6.2_3/org.apache.servicemix.bundles.wsdl4j-1.6.2_3.jar 	install http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-activation_1.1_spec/1.1/geronimo-activation_1.1_spec-1.1.jar 	install http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar 	install http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-ws-metadata_2.0_spec/1.1.3/geronimo-ws-metadata_2.0_spec-1.1.3.jar 	install http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-javamail_1.4_spec/1.7.1/geronimo-javamail_1.4_spec-1.7.1.jar 	install http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-servlet_2.5_spec/1.2/geronimo-servlet_2.5_spec-1.2.jar 	install http://repo2.maven.org/maven2/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1.jar 	install http://repository.springsource.com/maven/bundles/external/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar 		3. Attempt to start the Axis2 bundle. 		This results in the following error: 		org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.axis2.osgi [8]: Unable to resolve 8.0: missing requirement [8.0] package; (package=org.apache.axiom.om.impl.llom)
686||Shutting down Tomcat 6.0.29 gives the following error: 		Nov 23, 2010 4:42:18 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads 	SEVERE: A web application appears to have started a thread named [MultiThreadedHttpConnectionManager cleanup] but has failed to stop it. This is very likely to create a memory leak. 		This error only happens when one of our Axis2 web services is called through a generated ADB client stub.  It appears to never close this thread. 		Our current configuration on the web application: 		   /** 	    * The configureServiceStub method sets the web service client settings and 	    *  for the web service call.  	    *  	    * @param params WebServiceParameters 	    *  	    * @throws Exception 	    */ 	   private void configureServiceStub(WebServiceParameters params) throws Exception 	   { 	      // check if connection manager already established 	      if(connectionManager == null) 	      { 	         connectionManager = new MultiThreadedHttpConnectionManager(); 	         connectionManagerParams = new HttpConnectionManagerParams(); 	         connectionManagerParams.setDefaultMaxConnectionsPerHost(2); 	         connectionManagerParams.setTcpNoDelay(true); 	         connectionManagerParams.setStaleCheckingEnabled(true); 	         connectionManagerParams.setLinger(0); 	         connectionManager.setParams(connectionManagerParams); 		         httpClient = new HttpClient(connectionManager); 		         configcontext = ConfigurationContextFactory.createDefaultConfigurationContext(); 		         configcontext.setThreadPool(new ThreadPool(1, 3)); 	         configcontext.setProperty(HTTPConstants.REUSE_HTTP_CLIENT, 	                                   Boolean.TRUE); 	         configcontext.setProperty(HTTPConstants.CACHED_HTTP_CLIENT, httpClient); 	         configcontext.setProperty(HTTPConstants.AUTO_RELEASE_CONNECTION, httpClient); 	      }            		      if(employeeStub == null) 	      { 	         employeeStub = new EmployeeServiceSMARTStub(configcontext, 	                                                     params.getLocalServiceUrl() 	                                                     + "EmployeeServiceSMART.EmployeeServiceSMARTHttpSoap12Endpoint/"); 		         employeeStub._getServiceClient().getOptions().setTimeOutInMilliSeconds(2 * 60 * 1000); 	         employeeStub._getServiceClient().getOptions().setProperty(HTTPConstants.SO_TIMEOUT, 	                                                           30000); 	         employeeStub._getServiceClient().getOptions().setProperty(HTTPConstants.CONNECTION_TIMEOUT, 	                                                           30000); 	         employeeStub._getServiceClient().getOptions().setProperty(HTTPConstants.REUSE_HTTP_CLIENT, 	                                                           Boolean.TRUE); 		         employeeStub._getServiceClient().getOptions().setProperty(HTTPConstants.AUTO_RELEASE_CONNECTION, 	                                                           Boolean.TRUE); 	         employeeStub._getServiceClient().getOptions().setProperty(HTTPConstants.CHUNKED, 	                                                           Boolean.TRUE); 	         employeeStub._getServiceClient().getOptions().setCallTransportCleanup(true); 	         employeeStub._getServiceClient().getOptions().setProperty(HTTPConstants.HTTP_PROTOCOL_VERSION, 	                                 HTTPConstants.HEADER_PROTOCOL_10); 	      } 	   } 		After each call we call the following code: 		      finally 	      { 	         // clean up all hanging threads and stop connection manager         	         if(employeeStub._getServiceClient() != null) 	         { 	            try 	            { 	               employeeStub._getServiceClient().cleanupTransport(); 	            } 	            catch(Exception e) 	            { 	               e.printStackTrace(); 	            } 		            try 	            { 	               employeeStub._getServiceClient().cleanup(); 	               employeeStub.cleanup(); 	            } 	            catch(Exception e) 	            { 	               e.printStackTrace(); 	            } 	         } 		         connectionManager.closeIdleConnections(0); 	         connectionManager.shutdown(); 	         connectionManager = null; 	         employeeStub = null; 	      }
687||Background: 	The Axixs2 engine is based on a "Context" programming model.  Thus the code highly depends on hierarchical getProperty and setProperty calls.   		Problem: 	Doug Larson (IBM) has identify several minor issues in the JAX-WS and kernel code where unnecessary getProperty calls are being performed.  This causes 	unnecessary map calls.  Removing the calls provides small boosts in performance.
688||1) Use wsdl2java to generate service stubs from a simple wsdl (A), modify axis2.xml to turn MTOM on "<parameter name="enableMTOM">true</parameter>". 	2) In generated WebServiceSkeleton change getBinaryData to return some data (B). 	3) Use maven/pom file (C) to build a war, deploy war to tomcat. 	4) Generate a simple client to call the service (D). 		You will get the following exception on the client 	java.io.IOException: End of Stream, but boundary not found 		at org.apache.axiom.attachments.BoundaryPushbackInputStream.read(BoundaryPushbackInputStream.java:258) 		at org.apache.axiom.attachments.BoundaryPushbackInputStream.read(BoundaryPushbackInputStream.java:141) 		at org.apache.axiom.attachments.MIMEBodyPartInputStream.read(MIMEBodyPartInputStream.java:101) 		at org.apache.axiom.attachments.impl.PartFactory.readHeaders(PartFactory.java:192) 		at org.apache.axiom.attachments.impl.PartFactory.createPart(PartFactory.java:95) 		... 15 more 		Because there is no closing MIME boundary in the server generated SOAP (E).  This does not occur with axis2 version 1.5.1. 		(A) 	<?xml version="1.0" encoding="UTF-8"?> 		<wsdl:definitions xmlns:tns="http://webservice.mtom" 		xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" 		xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" 		xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" 		xmlns:xmime="http://www.w3.org/2005/05/xmlmime" 		xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" 		xmlns:xsd="http://www.w3.org/2001/XMLSchema" 		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 		xmlns="http://schemas.xmlsoap.org/wsdl/" 		targetNamespace="http://webservice.mtom"> 		<wsdl:types> 			<xsd:schema xmlns="http://schemas.xmlsoap.org/wsdl/" 				attributeFormDefault="qualified" 				elementFormDefault="qualified" 				targetNamespace="http://webservice.mtom"> 				<xsd:element name="BinaryData"> 					<xsd:complexType> 						<xsd:sequence> 							<xsd:element minOccurs="0" name="return" type="xsd:base64Binary" /> 						</xsd:sequence> 					</xsd:complexType> 				</xsd:element> 			</xsd:schema> 		</wsdl:types> 		<wsdl:message name="getBinaryDataResponse"> 			<wsdl:part name="parameters" element="tns:BinaryData"> 			</wsdl:part> 		</wsdl:message> 		<wsdl:message name="getBinaryDataRequest"> 		</wsdl:message>	 		<wsdl:portType name="WebServicePortType"> 			<wsdl:operation name="getBinaryData"> 				<wsdl:input message="tns:getBinaryDataRequest" 					wsaw:Action="tns:getBinaryData"> 				</wsdl:input> 				<wsdl:output message="tns:getBinaryDataResponse" 					wsaw:Action="tns:getBinaryDataResponse"> 				</wsdl:output> 			</wsdl:operation> 		</wsdl:portType> 		<wsdl:binding name="WebServiceSoap12Binding" 			type="tns:WebServicePortType"> 			<soap12:binding style="document" 				transport="http://schemas.xmlsoap.org/soap/http" /> 			<wsdl:operation name="getBinaryData"> 				<soap12:operation soapAction="tns:getBinaryData" 					style="document" /> 				<wsdl:input> 					<soap12:body use="literal" /> 				</wsdl:input> 				<wsdl:output> 					<soap12:body use="literal" /> 				</wsdl:output> 			</wsdl:operation> 		</wsdl:binding> 		<wsdl:service name="WebService"> 			<wsdl:port name="WebServiceHttpSoap12Endpoint" 				binding="tns:WebServiceSoap12Binding"> 				<soap12:address 					location="http://localhost:8080/WebService/services/WebService.WebServiceHttpSoap12Endpoint/" /> 			</wsdl:port> 		</wsdl:service> 	</wsdl:definitions> 		(B) 		public mtom.webservice.BinaryData getBinaryData( 			) { 			BinaryData param = new BinaryData(); 			DataHandler dh = new DataHandler(new DataSource() { 				private byte[] bytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; 					@Override 				public String getContentType() { 					return "application/binary"; 				} 					@Override 				public InputStream getInputStream() throws IOException { 					return new ByteArrayInputStream(bytes); 				} 					@Override 				public String getName() { 					return "application/binary"; 				} 					@Override 				public OutputStream getOutputStream() throws IOException { 					return null; 				} 			}); 			param.set_return(dh); 			return param; 		} 		(C) 	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"> 		<modelVersion>4.0.0</modelVersion> 		<groupId>org.stern</groupId> 		<artifactId>WebService</artifactId> 		<packaging>war</packaging> 		<version>0.1-SNAPSHOT</version> 		<build> 			<plugins> 				<plugin> 					<groupId>org.apache.maven.plugins</groupId> 					<artifactId>maven-compiler-plugin</artifactId> 					<configuration> 						<source>1.6</source> 						<target>1.6</target> 					</configuration> 				</plugin> 				<plugin> 					<groupId>org.apache.maven.plugins</groupId> 					<artifactId>maven-war-plugin</artifactId> 					<version>2.0.2</version> 					<configuration> 						<warName>WebService</warName> 						<warSourceDirectory>src/main/webapp</warSourceDirectory> 						<warSourceExcludes>**/*.log</warSourceExcludes> 					</configuration> 				</plugin> 				<plugin> 					<groupId>org.apache.maven.plugins</groupId> 					<artifactId>maven-dependency-plugin</artifactId> 					<executions> 						<execution> 							<id>copy-dependencies</id> 							<phase>package</phase> 							<goals> 								<goal>copy-dependencies</goal> 							</goals> 							<configuration> 								<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory> 							</configuration> 						</execution> 					</executions> 				</plugin> 				<plugin> 					<groupId>org.apache.maven.plugins</groupId> 					<artifactId>maven-resources-plugin</artifactId> 					<configuration> 						<outputDirectory>src/main/webapp/WEB-INF/classes</outputDirectory> 					</configuration> 				</plugin> 			</plugins> 		</build> 		<dependencies> 			<dependency> 				<groupId>junit</groupId> 				<artifactId>junit</artifactId> 				<version>4.7</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>javax.activation</groupId> 				<artifactId>activation</artifactId> 				<version>1.1</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.ws.commons.axiom</groupId> 				<artifactId>axiom-api</artifactId> 				<version>1.2.10</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.ws.commons.axiom</groupId> 				<artifactId>axiom-dom</artifactId> 				<version>1.2.10</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.ws.commons.axiom</groupId> 				<artifactId>axiom-impl</artifactId> 				<version>1.2.10</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-adb</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-adb-codegen</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-ant-plugin</artifactId> 				<version>1.5.3</version> 				<type>maven-plugin</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-clustering</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-codegen</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-corba</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-fastinfoset</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-java2wsdl</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-jaxbri</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-jibx</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-json</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-kernel</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-metadata</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-mtompolicy</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-saaj</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-soapmonitor-servlet</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-spring</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-transport-http</artifactId> 				<version>1.5.3</version> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-transport-local</artifactId> 				<version>1.5.3</version> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.axis2</groupId> 				<artifactId>axis2-xmlbeans</artifactId> 				<version>1.5.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.httpcomponents</groupId> 				<artifactId>httpcore</artifactId> 				<version>4.0</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>log4j</groupId> 				<artifactId>log4j</artifactId> 				<version>1.2.15</version> 				<type>jar</type> 				<scope>compile</scope> 				<exclusions> 					<exclusion> 						<groupId>com.sun.jdmk</groupId> 						<artifactId>jmxtools</artifactId> 					</exclusion> 					<exclusion> 						<groupId>com.sun.jmx</groupId> 						<artifactId>jmxri</artifactId> 					</exclusion> 					<exclusion> 						<groupId>javax.jms</groupId> 						<artifactId>jms</artifactId> 					</exclusion> 				</exclusions> 			</dependency> 			<dependency> 				<groupId>wsdl4j</groupId> 				<artifactId>wsdl4j</artifactId> 				<version>1.6.2</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 			<dependency> 				<groupId>org.apache.ws.commons.schema</groupId> 				<artifactId>XmlSchema</artifactId> 				<version>1.4.3</version> 				<type>jar</type> 				<scope>compile</scope> 			</dependency> 		</dependencies> 	</project> 		(D) 	package webservice.client; 		import java.io.InputStream; 		import mtom.webservice.BinaryData; 	import mtom.webservice.WebServiceStub; 		public class Main { 		public static void main(String[] args) throws Exception { 			WebServiceStub stub = new WebServiceStub("http://localhost:8080/WebService/services/WebService.WebServiceHttpSoap12Endpoint/"); 			BinaryData result = stub.getBinaryData(); 			InputStream is = result.get_return().getInputStream(); 			int next; 			while ((next = is.read()) != -1) { 				System.out.println(next); 			} 		} 	} 		(E) 	HTTP/1.1 200 OK 	Server: Apache-Coyote/1.1 	Content-Type: multipart/related; boundary="MIMEBoundary_c2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5"; type="application/xop+xml"; start="<0.d2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5@apache.org>"; start-info="application/soap+xml"; action="tns:getBinaryDataResponse" 	Transfer-Encoding: chunked 	Date: Fri, 10 Dec 2010 15:53:52 GMT 		289 	--MIMEBoundary_c2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5 	Content-Type: application/xop+xml; charset=UTF-8; type="application/soap+xml" 	Content-Transfer-Encoding: binary 	Content-ID: <0.d2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5@apache.org> 		<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"><soapenv:Body><ns1:BinaryData xmlns:ns1="http://webservice.mtom"><ns1:return><xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:1.e2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5@apache.org" /></ns1:return></ns1:BinaryData></soapenv:Body></soapenv:Envelope> 	e1 		--MIMEBoundary_c2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5 	Content-Type: application/binary 	Content-Transfer-Encoding: binary 	Content-ID: <1.e2fc5fe8cdf5bf17020e924dc81747527cb3fcbb77f7dec5@apache.org> 				0
689||Currently in axis2 WSDL2JAVA code generation, generation of java doc is incomplete. This issue is raised to monitor and fix those. Here is the improvement scenario,  	1) add the '@return' parameter to the java doc  	2) add user specific comments for each '@param', '@return', '@throws' parameters, using the given documentation in the wsdl.
690||There are number of improvement  recommendations provided by FindBugs. So fixing these recommendations will improve the quality of the code.
691||Hi,  		I am testing[1] the Axis2 local transport against Synapse's NHttp transport. I came across the following issue, when the debug log level was enabled.  		2011-01-18 12:16:40,883 [-] [HttpServerWorker-1] DEBUG TransportUtils createSOAPEnvelope using Builder (class org.apache.axis2.builder.SOAPBuilder) selected from type (text/xml) 	2011-01-18 12:16:40,940 [-] [HttpServerWorker-1]  INFO LogMediator To: http://localhost:8280/services/TestProxy, WSAction: urn:getQuote, SOAPAction: urn:getQuote, ReplyTo: http://www.w3.org/2005/08/addressing/anonymous, MessageID: urn:uuid:11d86a0a-a943-44aa-b0a3-db91d81f73e7, Direction: request, Envelope: <?xml version='1.0' encoding='utf-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header xmlns:wsa="http://www.w3.org/2005/08/addressing"><wsa:To>http://localhost:8280/services/TestProxy</wsa:To><wsa:MessageID>urn:uuid:11d86a0a-a943-44aa-b0a3-db91d81f73e7</wsa:MessageID><wsa:Action>urn:getQuote</wsa:Action></soapenv:Header><soapenv:Body><m0:getQuote xmlns:m0="http://services.samples"><m0:request><m0:symbol>IBM</m0:symbol></m0:request></m0:getQuote></soapenv:Body></soapenv:Envelope> 	2011-01-18 12:16:40,954 [-] [HttpServerWorker-1]  INFO TimeoutHandler This engine will expire all callbacks after : 86400 seconds, irrespective of the timeout action, after the specified or optional timeout 	2011-01-18 12:16:59,474 [-] [HttpServerWorker-1] DEBUG LocalTransportSender Sending - <?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header xmlns:wsa="http://www.w3.org/2005/08/addressing" /><soapenv:Body><m0:getQuote xmlns:m0="http://services.samples"><m0:request><m0:symbol>IBM</m0:symbol></m0:request></m0:getQuote></soapenv:Body></soapenv:Envelope> 	2011-01-18 12:17:15,539 [-] [HttpServerWorker-1] ERROR Axis2Sender Unexpected error during sending message out 	org.apache.axis2.AxisFault: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 		at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 		at org.apache.axis2.transport.TransportUtils.writeMessage(TransportUtils.java:296) 		at org.apache.axis2.transport.local.LocalTransportSender.invoke(LocalTransportSender.java:78) 		at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:443) 		at org.apache.synapse.core.axis2.DynamicAxisOperation$DynamicOperationClient.send(DynamicAxisOperation.java:191) 		at org.apache.synapse.core.axis2.DynamicAxisOperation$DynamicOperationClient.executeImpl(DynamicAxisOperation.java:174) 		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:165) 		at org.apache.synapse.core.axis2.Axis2FlexibleMEPClient.send(Axis2FlexibleMEPClient.java:403) 		at org.apache.synapse.core.axis2.Axis2Sender.sendOn(Axis2Sender.java:57) 		at org.apache.synapse.core.axis2.Axis2SynapseEnvironment.send(Axis2SynapseEnvironment.java:232) 		at org.apache.synapse.endpoints.AbstractEndpoint.send(AbstractEndpoint.java:256) 		at org.apache.synapse.endpoints.AddressEndpoint.send(AddressEndpoint.java:59) 		at org.apache.synapse.core.axis2.ProxyServiceMessageReceiver.receive(ProxyServiceMessageReceiver.java:173) 		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181) 		at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172) 		at org.apache.synapse.transport.nhttp.ServerWorker.processEntityEnclosingMethod(ServerWorker.java:413) 		at org.apache.synapse.transport.nhttp.ServerWorker.run(ServerWorker.java:264) 		at org.apache.axis2.transport.base.threads.NativeWorkerPool$1.run(NativeWorkerPool.java:58) 		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 		at java.lang.Thread.run(Thread.java:662) 	Caused by: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 		at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473) 		at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502) 		at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663) 		at com.ctc.wstx.sw.BaseStreamWriter.close(BaseStreamWriter.java:288) 		at org.apache.axiom.util.stax.wrapper.XMLStreamWriterWrapper.close(XMLStreamWriterWrapper.java:46) 		at org.apache.axiom.om.impl.MTOMXMLStreamWriter.close(MTOMXMLStreamWriter.java:188) 		at org.apache.axiom.om.impl.llom.OMSerializableImpl.serializeAndConsume(OMSerializableImpl.java:197) 		at org.apache.axis2.transport.TransportUtils.writeMessage(TransportUtils.java:293) 		... 19 more 	2011-01-18 12:17:15,545 [-] [HttpServerWorker-1]  WARN EndpointContext Endpoint : ep1 will be marked SUSPENDED as it failed 	2011-01-18 12:17:15,546 [-] [HttpServerWorker-1]  WARN EndpointContext Suspending endpoint : ep1 - current suspend duration is : 30000ms - Next retry after : Tue Jan 18 12:17:45 IST 2011 		[1] - https://issues.apache.org/jira/browse/SYNAPSE-719
692||When I used @HandlerChain in jaxws with handler class define in the handlerchain.xml, It throws an exception by saying handler class can't find. AFAIU the issue comes because of classloader doesn't add the service jar to the class path. 		This is the exception. 		[ERROR] java.lang.ClassNotFoundException: HandlerResolverImpl cannot load the following class Throwable Exception Occured:com.javacoda.jaxws.order.InfoHandler 	org.apache.axis2.AxisFault: java.lang.ClassNotFoundException: HandlerResolverImpl cannot load the following class Throwable Exception Occured:com.javacoda.jaxws.order.InfoHandler 		at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 		at org.apache.axis2.jaxws.server.JAXWSMessageReceiver.receive(JAXWSMessageReceiver.java:242) 		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181) 		at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172) 		at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:296) 		at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:281) 		at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:187) 		at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:82) 		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 		at java.lang.Thread.run(Thread.java:619) 	Caused by: javax.xml.ws.WebServiceException: java.lang.ClassNotFoundException: HandlerResolverImpl cannot load the following class Throwable Exception Occured:com.javacoda.jaxws.order.InfoHandler 		at org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:175) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70) 		at org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:128) 		at org.apache.axis2.jaxws.handler.HandlerResolverImpl.resolveHandlers(HandlerResolverImpl.java:359) 		at org.apache.axis2.jaxws.handler.HandlerResolverImpl.getHandlerClasses(HandlerResolverImpl.java:143) 		at org.apache.axis2.jaxws.handler.HandlerResolverImpl.getHandlerChain(HandlerResolverImpl.java:167) 		at org.apache.axis2.jaxws.server.EndpointController.handleRequest(EndpointController.java:240) 		at org.apache.axis2.jaxws.server.EndpointController.invoke(EndpointController.java:103) 		at org.apache.axis2.jaxws.server.JAXWSMessageReceiver.receive(JAXWSMessageReceiver.java:161) 		... 9 more 	Caused by: java.lang.ClassNotFoundException: HandlerResolverImpl cannot load the following class Throwable Exception Occured:com.javacoda.jaxws.order.InfoHandler 		at org.apache.axis2.jaxws.spi.handler.BaseHandlerResolver$1.run(BaseHandlerResolver.java:313) 		at org.apache.axis2.java.security.AccessController.doPrivileged(AccessController.java:132) 		at org.apache.axis2.jaxws.spi.handler.BaseHandlerResolver.forName(BaseHandlerResolver.java:300) 		at org.apache.axis2.jaxws.spi.handler.BaseHandlerResolver.loadClass(BaseHandlerResolver.java:113) 		at org.apache.axis2.jaxws.handler.HandlerResolverImpl.resolveHandlers(HandlerResolverImpl.java:356) 		... 14 more
693||When trying to view the WSDL of attached services, it gives an error.  		This is the exception. 		Retrieving schema at 'UDDIPublicationService_schema8.xsd', relative to '/tmp/_axis2org.apache.juddi.api.impl.UDDIPublicationImpl'. 	Retrieving schema at 'UDDIPublicationService_schema9.xsd', relative to '/tmp/_axis2org.apache.juddi.api.impl.UDDIPublicationImpl'. 	Retrieving schema at 'UDDIPublicationService_schema10.xsd', relative to '/tmp/_axis2org.apache.juddi.api.impl.UDDIPublicationImpl'. 	Retrieving schema at 'UDDIPublicationService_schema11.xsd', relative to '/tmp/_axis2org.apache.juddi.api.impl.UDDIPublicationImpl'. 	[ERROR] Error occurred while attempting to read generated schema file {org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: http://www.w3.org/2000/09/xmldsig#} 	[ERROR] Error occurred generating WSDL file for Web service implementation class {org.apache.juddi.api.impl.UDDIPublicationImpl}: {java.lang.Exception: Error occurred while attempting to read generated schema file {org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: http://www.w3.org/2000/09/xmldsig#}} 	java.lang.Exception: Error occurred while attempting to read generated schema file {org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: http://www.w3.org/2000/09/xmldsig#} 		at org.apache.axis2.jaxws.description.builder.JAXWSRIWSDLGenerator.readInSchema(JAXWSRIWSDLGenerator.java:338) 		at org.apache.axis2.jaxws.description.builder.JAXWSRIWSDLGenerator.generateWsdl(JAXWSRIWSDLGenerator.java:188) 		at org.apache.axis2.jaxws.description.builder.JAXWSRIWSDLGenerator.initialize(JAXWSRIWSDLGenerator.java:379) 		at org.apache.axis2.jaxws.description.builder.JAXWSRIWSDLGenerator.getWSDL(JAXWSRIWSDLGenerator.java:372) 		at org.apache.axis2.description.AxisService.printWSDL(AxisService.java:1394) 		at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:149) 		at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:281) 		at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:187) 		at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:82) 		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 		at java.lang.Thread.run(Thread.java:619)
694||When @WebFault and @RequestWrapper annotations are used, JAX-WS service doesn't get deployed properly. Following is the stack trace on the console. 		java.lang.NoSuchMethodError: javax.xml.ws.WebFault.messageName()Ljava/lang/String; 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.attachWebFaultAnnotation(JavaClassToDBCConverter.java:384) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.setTypeTargettedAnnotations(JavaClassToDBCConverter.java:247) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.introspectClass(JavaClassToDBCConverter.java:159) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.buildDBC(JavaClassToDBCConverter.java:141) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.produceDBC(JavaClassToDBCConverter.java:97) 		at org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.createServiceDescription(DescriptionFactoryImpl.java:215) 		at org.apache.axis2.jaxws.description.DescriptionFactory.createAxisService(DescriptionFactory.java:564) 		at org.apache.axis2.jaxws.framework.JAXWSDeployer.createAxisService(JAXWSDeployer.java:253) 		at org.apache.axis2.jaxws.framework.JAXWSDeployer.deployClasses(JAXWSDeployer.java:208) 		at org.apache.axis2.jaxws.framework.JAXWSDeployer.deploy(JAXWSDeployer.java:162) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) 		at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:813) 		at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:144) 		at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListener.java:370) 		at org.apache.axis2.deployment.RepositoryListener.checkServices(RepositoryListener.java:254) 		at org.apache.axis2.deployment.DeploymentEngine.loadServices(DeploymentEngine.java:142) 		at org.apache.axis2.deployment.FileSystemConfigurator.loadServices(FileSystemConfigurator.java:147) 		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:95) 		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContextFromFileSystem(ConfigurationContextFactory.java:210) 		at org.apache.axis2.transport.SimpleAxis2Server.<init>(SimpleAxis2Server.java:47) 		at org.apache.axis2.transport.SimpleAxis2Server.main(SimpleAxis2Server.java:98) 	[INFO] Exception creating Axis Service : null 	java.lang.NoSuchMethodError: javax.xml.ws.RequestWrapper.partName()Ljava/lang/String; 		at org.apache.axis2.jaxws.description.builder.converter.JavaMethodsToMDCConverter.attachRequestWrapperAnnotation(JavaMethodsToMDCConverter.java:202) 		at org.apache.axis2.jaxws.description.builder.converter.JavaMethodsToMDCConverter.convertMethods(JavaMethodsToMDCConverter.java:84) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.introspectClass(JavaClassToDBCConverter.java:193) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.buildDBC(JavaClassToDBCConverter.java:141) 		at org.apache.axis2.jaxws.description.builder.converter.JavaClassToDBCConverter.produceDBC(JavaClassToDBCConverter.java:120) 		at org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.createServiceDescription(DescriptionFactoryImpl.java:215) 		at org.apache.axis2.jaxws.description.DescriptionFactory.createAxisService(DescriptionFactory.java:564) 		at org.apache.axis2.jaxws.framework.JAXWSDeployer.createAxisService(JAXWSDeployer.java:253) 		at org.apache.axis2.jaxws.framework.JAXWSDeployer.deployClasses(JAXWSDeployer.java:208) 		at org.apache.axis2.jaxws.framework.JAXWSDeployer.deploy(JAXWSDeployer.java:162) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) 		at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:813) 		at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:144) 		at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListener.java:370) 		at org.apache.axis2.deployment.RepositoryListener.checkServices(RepositoryListener.java:254) 		at org.apache.axis2.deployment.DeploymentEngine.loadServices(DeploymentEngine.java:142) 		at org.apache.axis2.deployment.FileSystemConfigurator.loadServices(FileSystemConfigurator.java:147) 		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:95) 		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContextFromFileSystem(ConfigurationContextFactory.java:210) 		at org.apache.axis2.transport.SimpleAxis2Server.<init>(SimpleAxis2Server.java:47) 		at org.apache.axis2.transport.SimpleAxis2Server.main(SimpleAxis2Server.java:98) 			Thanks, 	~Isuru
695||One of the CTS tests for JAX-WS 2.2 calls BindingProvider.getEndpointReference when the associated WSDL has reference parameters in the EPR for the port.  The test replaces the values of the reference parameters with different values, calls Service.getPort with that EPR, and then checks the values of the reference parameters in the request message to make sure the new values are used. 		The test is currently failing because BindingProvider.getEndpointReference does not use the reference parameters in the WSDL, and the test code to replace the values doesn't work because the reference parameters don't already exist. There is code in AddressingOutHandler that uses the reference parameters from the WSDL though, so they are sent in the request with the values from the WSDL instead of the new values from the test code.
696||When a JAX-WS dynamic port is added via addPort(...), it should be scoped to the instance of the service that created it.  Currently dynamic ports are scoped in the runtime by (PortQName, Binding ID, Endpoint Address) across all services on a given configuration context.  That means that different services will share the same dynamic ports based only on (PortQName, Binding ID, Endpoint Address), even if those services are entirely different (i.e. different service QNames). 		A flag needs to be provided to revert the behavior to share the dynamic ports across services.
697||The JAX-WS 2.2 CTS tests that call BindingProvider.getEndpointReference and check the wsdlLocation in the returned EPR are currently failing.  This is because the wsdlLocation URL contains the local file system path instead of the endpoint URL.
698||In Axis2 WSDL 1.1 generation, it generates a fault messages for in-only operations. This should only happen for in-only situations in WSDL 2.0 generation with Robust-in-only MEP. The in-only operation definition for WSDL11 can be found here [1]. 		[1] http://www.w3.org/TR/wsdl#_one-way
699||In the file  		./axis2-1.5.4/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/WizardFrame.java line:323 		The buffer size is fixed at 1024 bytes. 		To copy 10M data with 1024-byte buffer it takes 338,591,180 nano-second, while it takes 105,384,689 nano-second with a 10240-byte buffer. 			Similar code can be found at: 		 ./axis2-1.5.4/modules/kernel/src/org/apache/axis2/util/IOUtils.java 	./axis2-1.5.4/modules/kernel/src/org/apache/axis2/classloader/IoUtil.java 	./axis2-1.5.4/modules/kernel/src/org/apache/axis2/classloader/JarResourceLocation.java 	./axis2-1.5.4/modules/tool/axis2-idea-plugin/src/main/java/org/apache/axis2/tools/wizardframe/WizardFrame.java 			This is similar to the Apache Bug https://issues.apache.org/bugzilla/show_bug.cgi?id=32546
700||In the latest Axis2 1.6 branch, a new PostRI216MethodRetrieverImpl is provided to keep compatibility with the new specification. Currently, it checks the wsgen version to determine whether to use it or the legacy one. It is a good solution way. But it might be a little difficult in Geronimo (And think that should be same for other servers), to support the new EE spec, they always shipped the new tools, but for applications contains web service, they have no need to access wsgen class, and actually server would pre-generate all the related WSDL and stub classes.
701||BuilderUtil.getBuilder(bs) in LocalResponder.getEnvelope uses StAXOMBuilder instead of StAXSOAPModelBuilder which causes TransportUtils.createSOAPEnvelope to wrap envelope with envelope wrapper again.
702||On the line 691 of class org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler, there is a typo error, the variable name should be classCL, not contextCL.
703||As mentioned by Tobias Zafke, the + character is not properly handled when parsing the content of a HTTP POST REST request, thus the content passed to a service is incorrect. The fault is at URIEncoderDecoder class, where it does not consider the '+' character. For example, the java.util.URLEncoder encodes the spaces in a string with '+' character, so applications using URLEncoder to encode strings will result in sending invalid data to an Axis2 service.
704||The CORBA module does not fully support the 'any' data type. 		Example: 		struct mystruct  	{  	any	 any1;  	any	 any2;  	};
705||The corba module does not support the use of constants as the discriminators in union data types. For example, the following IDL is not supported. 		typedef short SimpleValueType; 	const SimpleValueType RESOURCE_TYPE = 1; 	const SimpleValueType URI_TYPE = 2; 		union SimpleValue switch( SimpleValueType ) 	{ 	case RESOURCE_TYPE	: string resource_value; 	case URI_TYPE	 : string uri_value; 	};
706||The ADBBeanTemplate contains the following piece of code (in registerPrefix): 		while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) { 	    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix(); 	} 		According to the Javadoc of NamespaceContext, the getNamespaceURI method never returns null. The fact that Woodstox returns null for unbound prefixes is a known issue (WSTX-231) that has been fixed on the 4.0 branch. 		The ADB code needs to be updated to support both null and the empty string as return value of NamespaceContext#getNamespaceURI for unbound prefixes.
707||When adding elements using appendChild, I lose elements 		It seems to boil down to 		== org.apache.axis2.saaj.SOAPElementImpl lines 936 - 940 	NodeList children = child.getChildNodes();         	        for (int i = 0; i < children.getLength(); i++) { 	            Node node = children.item(i); 	            childEle.appendChild(node); 	        } 	==  		The appended child seems to be removed from the original, causing children.getLength() to be smaller every iteration, causing elements to be missed. 		I did not experience this problem in 1.5
708||When deploying jaxws services, user should be able copy third party libraries into repository/servicejars/lib folder (like repository/services/lib for AAR services). But it doesn't work. 		Thanks, 	~Isuru
709||After introducing hierarchical services for Axis2, deployers can deploy services from sub folders of the deployment folder as well.  		Ex : From repository/services/foo/echo.aar 		But the "lib" directory of the deployment folder should not be searched for services because it contains external libraries. This works fine for AAR services. But for other service types, lib folder is also searched. Ex: JAX-WS. 		Thanks, 	~Isuru
710||Child first class loading can be enabled by setting the following parameter in axis2.xml. 		<parameter name="EnableChildFirstClassLoading">true</parameter> 		After enabling it, I deployed a service for which there is a dependency. I put two different versions of this dependency into the following locations. 		1. AXIS2_HOME/lib 	2. AXIS2_HOME/repository/lib 		As child first class loading is enabled, I expected Axis2 to pick up the dependency at location 2 above. But when I invoked my service, Axis2 picked up the dependency from location 1. 		Note : When I test the same service with AXIS2_HOME/repository/lib and AXIS2_HOME/repository/services/lib, it worked as expected.. 		Thanks, 	~Isuru
711||Transport headers are not properly set in the Axis2 local transport. Therefore, already set transport headers are not propagated correctly.
712||Per the JAX-WS, the wsdl address for should be web service endpoint access with ?wsdl suffix.
713||When Mapped convention is used, JSONMessageFormatter creates an XMLStreamWriter from Jettison library of type MappedXMLStreamWriter 	and executes the following code 		  XMLStreamWriter jsonWriter = getJSONWriter(bytesOut); 	  element.serializeAndConsume(jsonWriter); 	  jsonWriter.writeEndDocument(); 		at 3 places in the class (in getBytes(), getTargetAddress() and writeTo() ). 	In the above code, there is no call to jsonWriter.writeStartDocument(). 		This works for Jettison library v1.1 and below because of a refactoring of XMLStreamWriter in Jettison v1.2 ( [invalid description of cause removed] ).  		Actually, the axis-json lib 1.5.4 specifies a Maven version dependency on Jettison 1.0 so it works, but with Jettison v1.2+ 	a simple client trying to serialize a OMElement to send a soap message triggers a NPE in Jettison when the last endElement() event is triggered 	because the call to startDocument has never been made. 		Simple solution is to add jsonWriter.writeStartDocument() before calling element.serializeAndConsume().
714||Plugin adds hardcoded folder ${outputDirectory}/src to Maven compile source roots. If targetSourceFolderLocation is specified, then wrong folder is added which can break later compile phase.
715||Per the JAX-WS spec 2.5 	Conformance (Exception naming): In the absence of customizations, the name of a mapped exception 	MUST be the value of the name attribute of the wsdl:message referred to by the wsdl:fault element 	mapped according to the rules in sections 2.8 and 2.8.1.
716||The source code of axis2 1.5.x has a problem in AxisFault.java (located in org.apache.axis2.AxisFault.java): the Detail element of the SOAP Fault can only have one child. It can cause a problem when, for example, a MessageNumberRollover fault is generated in a Web Service, because as stated in WS Reliable Messaging profile, the Detail element must include two childs, a "wsrm:Identifier" and a "wsrn:MaxMsgNumber" element. 		The code where it is considered, marked as "TODO" issue, is the following: 		private void initializeValues(SOAPFaultCode soapFaultCode, 	                                       SOAPFaultReason soapFaultReason, 	                                       SOAPFaultNode soapFaultNode, 	                                       SOAPFaultRole soapFaultRole, 	                                       SOAPFaultDetail soapFaultDetail) { 	             this.soapFaultCode = soapFaultCode; 	             this.soapFaultReason = soapFaultReason; 	             this.soapFaultNode = soapFaultNode; 	             this.soapFaultRole = soapFaultRole; 	             this.soapFaultDetail = soapFaultDetail; 		             if (soapFaultDetail != null) { 	     //            OMElement exceptionElement = soapFaultDetail.getFirstChildWithName( 	     //                    new QName(SOAPConstants.SOAP_FAULT_DETAIL_EXCEPTION_ENTRY)); 	     //            if (exceptionElement != null && exceptionElement.getText() != null) { 	     //                cause = new Exception(exceptionElement.getText()); 	     //            } 		                 // TODO - Wha? Details can have multiple elements, why take the first child here? 	                 // TODO - Review the API for details 	                 // setting the first child element of the fault detail as this.detail 	                 this.detail = soapFaultDetail.getFirstElement(); 		             }
717||I'm using axis2 1.5.4, but I also tried this with the last snapshot of version 1.5.5. 		I think there' s a missing typeof in class org.apache.axis2.databinding.types.Union 		I'm trying to use this type in my webservice: 		<simpleType name="relativeOrAbsoluteDateType"> 	                <annotation> 	                    <documentation>Absolute and relative time</documentation> 	                </annotation> 	                <union memberTypes="dateTime duration"/> 	            </simpleType> 		When I try to send a message from  my  ws client using dateTime it works smooth. But when i try to use duration i get this exception: 		org.apache.axis2.AxisFault: org.apache.axis2.databinding.ADBException: Error in parsing value 	    at org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(Utils.java:446) 	    at org.apache.axis2.description.OutInAxisOperationClient.handleResponse(OutInAxisOperation.java:371) 	    at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:417) 	    at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:229) 	    at org.apache.axis2.client.OperationClient.execute(OperationClient.java:165) 	    at com.naevatec.www.testws.definitions.NaevatecTestStub.testSubmit(NaevatecTestStub.java:181) 	    at com.naevatec.Test.main(Test.java:59) 		I have attached the wsdl prepared to show you the maybe "possible bug". 		To patch this issue I would include this lines in the Union class: 		else if ("duration".equals(type)) { 	            setObject(ConverterUtil.convertToDuration(value)); 	} 				More info: 		This is the way I'm using this type in the object  I create in the ws client: 		 It causes the excepction i've posted a few lines up; 		import org.apache.axis2.databinding.types.Duration; 			      RelativeOrAbsoluteDateType date= new RelativeOrAbsoluteDateType(); 	      Duration dur= new Duration(false, 0, 0, 0, 1, 0, 0); 	      date.setObject(dur); 				If i create the object RelativeOrAbsoluteType  using Calendar It works: 		import java.util.Calendar; 		  RelativeOrAbsoluteDateType date1= new RelativeOrAbsoluteDateType(); 	  Calendar cal= Calendar.getInstance(); 	  cal.set(2011, Calendar.MAY, 18, 10, 0, 0); 	  date1.setObject(cal); 		It should work both ways. 		Thanks for your help.
718||1. Using Dispatch API 	A bit more description for my case, the server side is a simple web service, for the client side, the codes are something like : 	---> 	Service service = new HelloService(); 	Dispatch dispatchJaxb = service.createDispatch(PORT_QNAME, JAXBContext.newInstance(org.test.ObjectFactory.class), 	javax.xml.ws.Service.Mode.PAYLOAD); 	dispatchJaxb.invokeOneWay(new HelloRequest()); 	<--- 		After adding some code fragments in the finally block of BaseDispatch.invokeOneWay method, it looks to me work fine. 	---> 	try { 	                if (requestMsgCtx != null && requestMsgCtx.getAxisMessageContext() != null) { 	                    org.apache.axis2.context.MessageContext axisMsgCtx = requestMsgCtx.getAxisMessageContext(); 	                    if (axisMsgCtx.getTransportOut() != null && axisMsgCtx.getTransportOut().getSender() != null) { 	                        axisMsgCtx.getTransportOut().getSender().cleanup(axisMsgCtx); 	                    } 	                } 	            } catch (Exception ignore) { 	            } 	<--- 		I also googled this issue, and do found a lot of information for the same timeout exception, also read some related codes 	a. In the HttpSender, there is a method named cleanup, which is used to release the connection, but it has the precondition to configure the AUTO_RELEASE_CONNECTION. And actually I did not see other setting configurations in the Axis2 codes, and think that it should be configured by the users in the Options ?  	b. Some posts in the mail list recommended to call the getTransport().cleanup() in the Axis2 specific client codes. And in the testing scenario above, since the standard JAX-WS API is used, suppose that Axis2 should do this ? 	And very appreciated with any comment ? Thanks. 		2. I might find another connection leak while using JAXWS API on client side. In the scenario below : 	For the server side, it requires basic authentication. 		The client codes are something like : 	HelloPort helloPort = (HelloPort)service.getPort(HelloPort.class); 	helloPort.echo("hello"); 		The client codes did not set the user name and password by the BindingProvider interface, so the server return a 404 to the client side, then the method HttpSender.handleResponse will enter the fourth block : 	private void handleResponse(MessageContext msgContext, 	                                HttpMethodBase method) throws IOException { 	        int statusCode = method.getStatusCode(); 	        log.trace("Handling response - " + statusCode); 	        if (statusCode == HttpStatus.SC_OK) { 	            // Save the HttpMethod so that we can release the connection when cleaning up 	            msgContext.setProperty(HTTPConstants.HTTP_METHOD, method); 	            processResponse(method, msgContext); 	        } else if (statusCode == HttpStatus.SC_ACCEPTED) { 	        	/* When an HTTP 202 Accepted code has been received, this will be the case of an execution 	        	 * of an in-only operation. In such a scenario, the HTTP response headers should be returned, 	        	 * i.e. session cookies. */ 	        	obtainHTTPHeaderInformation(method, msgContext); 	        	// Since we don't expect any content with a 202 response, we must release the connection 	        	method.releaseConnection(); 	        } else if (statusCode == HttpStatus.SC_INTERNAL_SERVER_ERROR || 	                statusCode == HttpStatus.SC_BAD_REQUEST) { 	            // Save the HttpMethod so that we can release the connection when cleaning up 	            msgContext.setProperty(HTTPConstants.HTTP_METHOD, method); 	            Header contenttypeHeader = 	                    method.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE); 	            String value = null; 	            if (contenttypeHeader != null) { 	                value = contenttypeHeader.getValue(); 	            } 	             OperationContext opContext = msgContext.getOperationContext(); 	            if(opContext!=null){ 	                MessageContext inMessageContext = 	                        opContext.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE); 	                if(inMessageContext!=null){ 	                    inMessageContext.setProcessingFault(true); 	                } 	            } 	            if (value != null) { 		                processResponse(method, msgContext); 	            } 		            if (org.apache.axis2.util.Utils.isClientThreadNonBlockingPropertySet(msgContext)) { 	            	 throw new AxisFault(Messages.getMessage("transportError", 	                         String.valueOf(statusCode), 	                         method.getStatusText())); 	            } 	        } else { 	            throw new AxisFault(Messages.getMessage("transportError",   <--- Running here 	                                                    String.valueOf(statusCode), 	                                                    method.getStatusText())); 	        } 	    } 		The stack trace is : 		org.apache.axis2.AxisFault: Transport error: 403 Error: Forbidden 		at org.apache.axis2.transport.http.HTTPSender.handleResponse(HTTPSender.java:309) 		at org.apache.axis2.transport.http.HTTPSender.sendViaPost(HTTPSender.java:194) 		at org.apache.axis2.transport.http.HTTPSender.send(HTTPSender.java:75) 		at org.apache.axis2.transport.http.CommonsHTTPTransportSender.writeMessageWithCommons(CommonsHTTPTransportSender.java:404) 		at org.apache.axis2.transport.http.CommonsHTTPTransportSender.invoke(CommonsHTTPTransportSender.java:231) 		at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:443) 		at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:406) 		at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:229) 		at org.apache.axis2.client.OperationClient.execute(OperationClient.java:165) 		at org.apache.axis2.jaxws.core.controller.impl.AxisInvocationController.execute(AxisInvocationController.java:578) 		at org.apache.axis2.jaxws.core.controller.impl.AxisInvocationController.doInvoke(AxisInvocationController.java:127) 		at org.apache.axis2.jaxws.core.controller.impl.InvocationControllerImpl.invoke(InvocationControllerImpl.java:93) 		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.invokeSEIMethod(JAXWSProxyHandler.java:377) 		at org.apache.axis2.jaxws.client.proxy.JAXWSProxyHandler.invoke(JAXWSProxyHandler.java:174) 		at $Proxy89.helloPort(Unknown Source) 		at org.test.HelloServlet.doPost(HelloServlet.java:113) 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:595) 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) 		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306) 		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240) 		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161) 		at org.apache.geronimo.tomcat.security.SecurityValve.invoke(SecurityValve.java:87) 		at org.apache.geronimo.tomcat.security.jacc.JACCSecurityValve.invoke(JACCSecurityValve.java:54) 		at org.apache.geronimo.tomcat.GeronimoStandardContext$SystemMethodValve.invoke(GeronimoStandardContext.java:700) 		at org.apache.geronimo.tomcat.valve.GeronimoBeforeAfterValve.invoke(GeronimoBeforeAfterValve.java:48) 		at org.apache.geronimo.tomcat.valve.ProtectedTargetValve.invoke(ProtectedTargetValve.java:53) 		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164) 		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) 		at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:550) 		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:380) 		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243) 		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188) 		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:166) 		at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:288) 		at org.apache.geronimo.pool.ThreadPool$1.run(ThreadPool.java:243) 		at org.apache.geronimo.pool.ThreadPool$ContextClassLoaderRunnable.run(ThreadPool.java:373) 		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 		at java.lang.Thread.run(Thread.java:662) 		Thanks.
719||Hi, 		my problem happens while using wsdl2java on WSDL (pasted below) generated from example WebService project created using Tibco BusinessWorks. When I use this command "wsdl2java.bat  -o output -uri ZipInfo.wsdl", I get an error with stacktrace. WSDL seems to be valid. 		[ERROR] No element type is defined for messagecityInfoRequest 	org.apache.axis2.description.WSDL11ToAxisServiceBuilder$WSDLProcessingException: No element type is defined for messagecityInfoRequest 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.addQNameReference(WSDL11ToAxisServiceBuilder.java:1192) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.addQNameReference(WSDL11ToAxisServiceBuilder.java:1091) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateBinding(WSDL11ToAxisServiceBuilder.java:688) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateEndpoint(WSDL11ToAxisServiceBuilder.java:537) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateEndpoints(WSDL11ToAxisServiceBuilder.java:488) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateService(WSDL11ToAxisServiceBuilder.java:362) 	        at org.apache.axis2.description.WSDL11ToAllAxisServicesBuilder.populateAllServices(WSDL11ToAllAxisServicesBuilder.java:107) 	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:147) 	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35) 	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24) 	Exception in thread "main" org.apache.axis2.wsdl.codegen.CodeGenerationException: Error parsing WSDL 	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:153) 	        at org.apache.axis2.wsdl.WSDL2Code.main(WSDL2Code.java:35) 	        at org.apache.axis2.wsdl.WSDL2Java.main(WSDL2Java.java:24) 	Caused by: org.apache.axis2.AxisFault: No element type is defined for messagecityInfoRequest 	        at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateService(WSDL11ToAxisServiceBuilder.java:396) 	        at org.apache.axis2.description.WSDL11ToAllAxisServicesBuilder.populateAllServices(WSDL11ToAllAxisServicesBuilder.java:107) 	        at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:147) 	        ... 2 more 	Caused by: org.apache.axis2.description.WSDL11ToAxisServiceBuilder$WSDLProcessingException: No element type is defined for messagecityInfoRe 	quest 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.addQNameReference(WSDL11ToAxisServiceBuilder.java:1192) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.addQNameReference(WSDL11ToAxisServiceBuilder.java:1091) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateBinding(WSDL11ToAxisServiceBuilder.java:688) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateEndpoint(WSDL11ToAxisServiceBuilder.java:537) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateEndpoints(WSDL11ToAxisServiceBuilder.java:488) 	        at org.apache.axis2.description.WSDL11ToAxisServiceBuilder.populateService(WSDL11ToAxisServiceBuilder.java:362) 	        ... 4 more 			WSDL: 	<?xml version="1.0" encoding="UTF-8"?> 	<!--Created by TIBCO WSDL--> 	<wsdl:definitions xmlns:tns="http://xmlns.example.com/1134523930893" xmlns:ns0="http://xmlns.example.com/unique/default/namespace/1134438639123" xmlns:jndi="http://www.tibco.com/namespaces/ws/2004/soap/apis/jndi" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:jms="http://www.tibco.com/namespaces/ws/2004/soap/binding/JMS" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" name="Untitled" targetNamespace="http://xmlns.example.com/1134523930893"> 	    <wsdl:types> 	        <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://xmlns.example.com/unique/default/namespace/1134438639123" targetNamespace="http://xmlns.example.com/unique/default/namespace/1134438639123" elementFormDefault="qualified" attributeFormDefault="unqualified"> 	            <xsd:element name="cityDistances"> 	                <xsd:complexType> 	                    <xsd:sequence> 	                        <xsd:element name="fromCity"> 	                            <xsd:complexType> 	                                <xsd:sequence> 	                                    <xsd:element ref="ns0:cityInfo"/> 	                                </xsd:sequence> 	                            </xsd:complexType> 	                        </xsd:element> 	                        <xsd:element name="toCity"> 	                            <xsd:complexType> 	                                <xsd:sequence> 	                                    <xsd:element ref="ns0:cityInfo"/> 	                                </xsd:sequence> 	                            </xsd:complexType> 	                        </xsd:element> 	                        <xsd:element name="distance" type="xsd:decimal"/> 	                    </xsd:sequence> 	                </xsd:complexType> 	            </xsd:element> 	            <xsd:element name="cityInfo"> 	                <xsd:complexType> 	                    <xsd:sequence> 	                        <xsd:element name="city" type="xsd:string"/> 	                        <xsd:element name="state" type="xsd:string"/> 	                        <xsd:element name="location" type="xsd:string"/> 	                        <xsd:element name="latitude" type="xsd:decimal"/> 	                        <xsd:element name="longitude" type="xsd:decimal"/> 	                        <xsd:element name="zip" type="xsd:string"/> 	                    </xsd:sequence> 	                </xsd:complexType> 	            </xsd:element> 	            <xsd:element name="fromToZips"> 	                <xsd:complexType> 	                    <xsd:sequence> 	                        <xsd:element ref="ns0:fromZip"/> 	                        <xsd:element ref="ns0:toZip"/> 	                    </xsd:sequence> 	                </xsd:complexType> 	            </xsd:element> 	            <xsd:element name="fromZip" type="xsd:string"/> 	            <xsd:element name="toZip" type="xsd:string"/> 	        </xsd:schema> 	    </wsdl:types> 	    <wsdl:service name="ZipInfo-service1"> 	        <wsdl:port name="ZipPortEndpoint1" binding="tns:ZipPortEndpoint1Binding"> 	            <soap:address location=""/> 	            <jms:connectionFactory>QueueConnectionFactory</jms:connectionFactory> 	            <jms:targetAddress destination="queue">queue.sample</jms:targetAddress> 	        </wsdl:port> 	    </wsdl:service> 	    <wsdl:portType name="ZipPort"> 	        <wsdl:operation name="getCityInfo"> 	            <wsdl:input message="tns:cityInfoRequest"/> 	            <wsdl:output message="tns:cityInfoResponse"/> 	        </wsdl:operation> 	        <wsdl:operation name="getCityDistance"> 	            <wsdl:input message="tns:cityDistanceRequest"/> 	            <wsdl:output message="tns:cityDistanceResponse"/> 	        </wsdl:operation> 	    </wsdl:portType> 	    <wsdl:binding name="ZipPortEndpoint1Binding" type="tns:ZipPort"> 	        <soap:binding style="document" transport="http://www.tibco.com/namespaces/ws/2004/soap/binding/JMS"/> 	        <jms:binding messageFormat="Text"/> 	        <wsdl:operation name="getCityInfo"> 	            <soap:operation style="document" soapAction="/Service/ZipInfo-service1.serviceagent/ZipPortEndpoint1/getCityInfo"/> 	            <wsdl:input> 	                <soap:body use="literal" parts="zip"/> 	            </wsdl:input> 	            <wsdl:output> 	                <soap:body use="literal" parts="zipCode"/> 	            </wsdl:output> 	        </wsdl:operation> 	        <wsdl:operation name="getCityDistance"> 	            <soap:operation style="document" soapAction="/Service/ZipInfo-service1.serviceagent/ZipPortEndpoint1/getCityDistance"/> 	            <wsdl:input> 	                <soap:body use="literal" parts="zips"/> 	            </wsdl:input> 	            <wsdl:output> 	                <soap:body use="literal" parts="part1"/> 	            </wsdl:output> 	        </wsdl:operation> 	    </wsdl:binding> 	    <wsdl:message name="cityInfoRequest"> 	        <wsdl:part name="zip" type="xs:string"/> 	    </wsdl:message> 	    <wsdl:message name="cityInfoResponse"> 	        <wsdl:part name="zipCode" element="ns0:cityInfo"/> 	    </wsdl:message> 	    <wsdl:message name="cityDistanceRequest"> 	        <wsdl:part name="zips" element="ns0:fromToZips"/> 	    </wsdl:message> 	    <wsdl:message name="cityDistanceResponse"> 	        <wsdl:part name="part1" element="ns0:cityDistances"/> 	    </wsdl:message> 	</wsdl:definitions>
720||First off, thanks for all your work on axis. 		I am currently upgrading from Axis2 1.3 to version 1.6  and I've run into an issue.  BeanUtil bombs out on a missing setter property that is not in my WSDL when building response objects on my server side code (see stack trace below).  This "modifiedAttribute" property has a signature of isModifiedAttribute(int index) and is not included in any wsdl yet this section still throws an error.  Is there a reason elsewhere in the code where it makes sense to throw an exception if a property does not have a getter and a setter?  To me the appropriate decision would seem to be to ignore anything that did not have both.  This seems to be the decision that my 1.3 version of the code went with since I wasn't seeing this issue before.  Any thoughts would be appreciated.  		Thanks, 	Jason Tholstrup 		14:24:32.129 ERROR [http-8080-8]  o.a.a.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic line:210 - org.apache.axis2.AxisFault: Property 'modifiedAttribute' in bean class 'com.nicusa.db.tables.Item'is not readable. 	java.lang.RuntimeException: org.apache.axis2.AxisFault: Property 'modifiedAttribute' in bean class 'com.nicusa.db.tables.Item'is not readable. 		at org.apache.axis2.databinding.utils.BeanUtil.getPropertyQnameList(BeanUtil.java:276) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.databinding.utils.BeanUtil.getPropertyQnameList(BeanUtil.java:129) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.databinding.utils.BeanUtil.getPullParser(BeanUtil.java:72) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl.processProperties(ADBXMLStreamReaderImpl.java:994) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl.next(ADBXMLStreamReaderImpl.java:850) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.util.StreamWrapper.next(StreamWrapper.java:71) ~[axis2-kernel-1.6.0.jar:1.6.0] 		at org.apache.axiom.om.impl.builder.StAXOMBuilder.parserNext(StAXOMBuilder.java:681) ~[axiom-api-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.builder.StAXOMBuilder.next(StAXOMBuilder.java:214) ~[axiom-api-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.llom.OMSerializableImpl.build(OMSerializableImpl.java:78) ~[axiom-impl-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.llom.OMElementImpl.build(OMElementImpl.java:722) ~[axiom-impl-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.llom.OMElementImpl.detach(OMElementImpl.java:700) ~[axiom-impl-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.llom.OMNodeImpl.setParent(OMNodeImpl.java:105) ~[axiom-impl-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.llom.OMElementImpl.addChild(OMElementImpl.java:296) ~[axiom-impl-1.2.11.jar:1.2.11] 		at org.apache.axiom.om.impl.llom.OMElementImpl.addChild(OMElementImpl.java:212) ~[axiom-impl-1.2.11.jar:1.2.11] 		at org.apache.axis2.rpc.receivers.RPCUtil.processResponse(RPCUtil.java:105) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.rpc.receivers.RPCUtil.processResponseAsDocLitWrapped(RPCUtil.java:456) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:153) ~[axis2-adb-1.6.0.jar:1.6.0] 		at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) [axis2-kernel-1.6.0.jar:1.6.0] 		at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:110) [axis2-kernel-1.6.0.jar:1.6.0] 		at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181) [axis2-kernel-1.6.0.jar:1.6.0] 		at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172) [axis2-transport-http-1.6.0.jar:na] 		at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:146) [axis2-transport-http-1.6.0.jar:na] 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) [servlet-api.jar:na] 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) [servlet-api.jar:na] 		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29] 		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29] 		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29] 		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29] 		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29] 		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29] 		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29] 		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29] 		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29] 		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29] 		at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29] 		at java.lang.Thread.run(Thread.java:680) [na:1.6.0_24] 	Caused by: org.apache.axis2.AxisFault: Property 'modifiedAttribute' in bean class 'com.nicusa.db.tables.Item'is not readable. 		at org.apache.axis2.databinding.utils.BeanUtil.getPropertyQnameList(BeanUtil.java:189) ~[axis2-adb-1.6.0.jar:1.6.0] 		... 35 common frames omitted
721||There is a soap header declared in the wsdl that points to an element: 		      <xs:element name="authentication"> 	        <xs:complexType> 	          <xs:sequence> 	            <xs:element name="username" type="xs:string"/> 	            <xs:element name="password" type="xs:string"/> 	          </xs:sequence> 	          <xs:anyAttribute namespace="##other"/> 	        </xs:complexType> 	      </xs:element> 		After running "sh wsdl2java.sh -uri <uri>" to create stubs, and I populate that element with: 		    MyTestServiceStub stub = new MyTestServiceStub(); 	    MyTestServiceStub.Authentication auth = new MyTestServiceStub.Authentication(); 	    auth.setUsername( "username" ); 	    auth.setPassword( "password" ); 	    stub.operation( new MyTestServiceStub.Operation(), auth, null ); 		The following SOAP envelope is sent: 		<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"><soapenv:Header><ns1:authentication xmlns:ns1="urn:mytest" soapenv:mustUnderstand="false"><ns1:username>username</ns1:username></ns1:authentication></soapenv:Header><soapenv:Body><ns1:operation xmlns:ns1="urn:mytest" /></soapenv:Body></soapenv:Envelope> 		Notice the supplied password element is missing. 		Screenshot attached.
722||In the scenario below : 	SOAPMessage msg = MessageFactory.newInstance().createMessage(); 	        SOAPPart sp = msg.getSOAPPart(); 	        SOAPEnvelope envelope = sp.getEnvelope();         	        SOAPBody bdy = envelope.getBody(); 	        SOAPBodyElement sbe = bdy.addBodyElement(envelope.createName("Body1", "ns1", "http://www.helloworld.org")); 	        sbe.addChildElement(envelope.createName("c1", "ns1", "http://www.helloworld.org")).addTextNode("HelloWorld"); 		        URL url = new File("D:\opensource\axis2\axis2\axis2-1.5\modules\saaj\pom.xml").toURI().toURL(); 	        AttachmentPart attachmentPart = msg.createAttachmentPart(new DataHandler(url)); 	        attachmentPart.setContentType("text/xml"); 	        msg.addAttachmentPart(attachmentPart); 	        msg.saveChanges(); 		If we use SOAPMessage.writeTo method to write to the message to an servlet outputstream, those boundary, content-id values are generated on the fly. And for the client applications, there is no way to get the corresponding content-type header.
723||It is not possible to use the following Options in the Webfrontend "Engage Modules"->"For a Service Group" and "Engage Modules"->"For a Service", i am getting a "invocationTargetException" on the server. This happens with Axis2 1.4 too.
724||Dropped 1.5.5 WAR file in tomcat webapp directory. 		Everything looks good. Then I deleted the version aar file shipped, and it gets undeployed.  I ended the tomcat server and restarted the server.  Then I exploaded the version aar file, and then moved the directory to the axis2 services directory.  I click on the list webservices link and I get: 		Available services 	Faulty Services 	C:Program FilesApache Software FoundationTomcat 7.0webappsaxis2-1.5.5WEB-INFservicesversion 		In the tomcat stdout log file, I see the following: 		INFO] Deploying module: jaxws-1.5.5 - file:/C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/axis2-1.5.5/WEB-INF/modules/axis2-jaxws-mar-1.5.5.mar 	[INFO] Deploying module: metadataExchange-1.5.5 - file:/C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/axis2-1.5.5/WEB-INF/modules/mex-1.5.5.mar 	[INFO] Deploying module: mtompolicy-1.5.5 - file:/C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/axis2-1.5.5/WEB-INF/modules/mtompolicy-1.5.5.mar 	[INFO] Deploying module: ping-1.5.5 - file:/C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/axis2-1.5.5/WEB-INF/modules/ping-1.5.5.mar 	[INFO] Deploying module: script-1.5.5 - file:/C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/axis2-1.5.5/WEB-INF/modules/scripting-1.5.5.mar 	[INFO] Deploying module: soapmonitor-1.5.5 - file:/C:/Program Files/Apache Software Foundation/Tomcat 7.0/webapps/axis2-1.5.5/WEB-INF/modules/soapmonitor-1.5.5.mar 	[INFO] The version service, which is not valid, caused java.lang.ClassCastException: org.apache.axis2.classloader.JarFileClassLoader incompatible with org.apache.axis2.deployment.DeploymentClassLoader 		at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:131) 		at org.apache.axis2.deployment.repository.util.ArchiveReader.buildServiceGroup(ArchiveReader.java:101) 		at org.apache.axis2.deployment.repository.util.ArchiveReader.processServiceGroup(ArchiveReader.java:178) 		at org.apache.axis2.deployment.ServiceDeployer.deploy(ServiceDeployer.java:82) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) 		at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:661) 		at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:144) 		at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListener.java:337) 		at org.apache.axis2.deployment.RepositoryListener.checkServices(RepositoryListener.java:241) 		at org.apache.axis2.deployment.RepositoryListener.startListener(RepositoryListener.java:331) 		at org.apache.axis2.deployment.scheduler.SchedulerTask.checkRepository(SchedulerTask.java:64) 		at org.apache.axis2.deployment.scheduler.SchedulerTask.run(SchedulerTask.java:71) 		at org.apache.axis2.deployment.scheduler.Scheduler$SchedulerTimerTask.run(Scheduler.java:90) 		at java.util.Timer$TimerImpl.run(Timer.java:291) 		[INFO] org.apache.axis2.deployment.DeploymentException: org.apache.axis2.classloader.JarFileClassLoader incompatible with org.apache.axis2.deployment.DeploymentClassLoader 		This works using Axis 1.5.4.  The only major differences between the 1.5.4 source and the 1.5.5 source is the addition of code relating to: 		    <parameter name="EnableChildFirstClassLoading">false</parameter> 		which seems to affect lots of the files relating to deployment.
725||Hi,  		My problem is basically https://issues.apache.org/jira/browse/AXIS2-4736, but since it was closed without the step to reproduce, I've open a new issue, and will give you the code I made to test it. 		Yes it's a malformed URL, but I think it's still an issue. 		    public static void main( String[] args ) { 	        QueryStringParser parser = new QueryStringParser("&gsdfgfds"); 	        parser.search( new ArrayList<String>() ); 	        System.out.println("done"); 	    } 		That being said, what I did is change the next() method by adding a check on the idx: 		    public boolean next() { 	        int len = queryString.length(); 	        if (paramEnd == len) { 	            return false; 	        } 	        paramBegin = paramEnd == 0 ? 0 : paramEnd+1; 	        int idx = queryString.indexOf('&', paramBegin); 		        if(idx == 0) { 	        	return false; 	        } 		        paramEnd = idx == -1 ? len : idx; 	        idx = queryString.indexOf('=', paramBegin); 	        paramNameEnd = idx == -1 || idx > paramEnd ? paramEnd : idx; 	        paramName = null; 	        paramValue = null; 	        return true; 	    } 		For our current needs it work, might not be the best solution, but for what we had to do it worked pretty well. This also pass the QueryStringParserTest that axis has.
726||This has fixed by Deepal in trunk  (r1139484) but  need to fix in 1.5/1.6 branches too.
727||Axis2 generate schema for java.util.List correctly and it's identical to Array schema but run time expect additional wrapping element for lists. The impact is client generated from above WSDL file is not usable with the service hence this need to be changed. It is possible to use same Schema for both Lists and Arrays and  return list/array instances depend on actual service method signature.
728||While constructing the EndpointInterfaceDescriptionImpl instance from WSDL on the line 1222 of EndpointDescriptionImpl, if the log level is configured with debug, some internal variable like soapParameterStyle is initialized, and even after updating the SEI in the following codes, they will not be re-initialized again. 	{code} 	endpointInterfaceDescription = new EndpointInterfaceDescriptionImpl(this); 		                        // Update the EndpointInterfaceDescription created with WSDL with information from the 	                        // annotations in the SEI 	                        ((EndpointInterfaceDescriptionImpl)endpointInterfaceDescription) 	                                .updateWithSEI(composite.getCorrespondingClass()); 	{code} 	{code} 	EndpointInterfaceDescriptionImpl(EndpointDescriptionImpl parent) { 	        parentEndpointDescription = parent; 	        dbc = new DescriptionBuilderComposite(); 	        AxisService axisService = parentEndpointDescription.getAxisService(); 	        if (axisService != null) { 	            ArrayList publishedOperations = axisService.getPublishedOperations(); 	            Iterator operationsIterator = publishedOperations.iterator(); 	            while (operationsIterator.hasNext()) { 	                AxisOperation axisOperation = (AxisOperation)operationsIterator.next(); 	                addOperation(new OperationDescriptionImpl(axisOperation, this)); 	            } 	        } 	    } 	{code}
729||Service function returns which contain (long) arrays of custom objects degrade performance. 		Example (POJO): 	SomeCustomType[] myFunc() is a lot slower than String[] myFunc() 		Reason: 	BeanUtil.getBeanInfo() (modules/adb/src/org/apache/axis2/databinding/utils/BeanUtil.java) is called for each element in the output array, even though they are all the same. (According to http://download.oracle.com/javase/6/docs/api/java/beans/BeanInfo.html the result should be cached but this does not seem to be happening.)
730||In the Eclipse plugins, when we select the option of copy jars to code generated project option in the options wizard page, it tries to copy required jars included in the plugin using the following code. 			                 String eclipseHome = System.getProperty("user.dir"); 	                	 String pluginLibLocation = eclipseHome+File.separator+UIConstants.PLUGINS+ 												File.separator+UIConstants.AXIS_CODEGEN_PLUGIN_FOLDER+ 												File.separator+UIConstants.LIB; 		This means we assume the directory which the currently user is an Eclipse distribution. Therefore the users who are trying the plugin in self hosting mode via codebase will get a IO exception since the path refer by the above code is different from what they currently use. So proper fix would be to use Eclipse infrastructure to get the path.
731||processDocument method in JSONOMBuilder has the following loop: 		char temp = inputStream.read(); 	while (temp != ':') { 	...              	} 		This will lead to an indefinite loop in case a non-json or empty json {} payload is posted to the servlet. Actually any payload without colon character ':' should reproduce the same problem. 		I fixed it by changing the variable type temp into int and checking if the stream has more elements as a guard condition. 		int temp = inputStream.read(); 	            while (temp > -1 && temp != ':') { 	                if (temp != ' ' && temp != '{') { 	                    localName += (char)temp; 	                } 	                temp = inputStream.read(); 	            }
732||If the wsdl contains a child complex types having an overridden attribute with the return type "Foo" then the parent complex type should also have the return type of that attribute as "Foo". Orelse java compilation errors will occur complaining that the child class is trying to override the parent class method with different return type.
733||This error was first found by Sagara. Following is the note from AXIS2-4170. 		----------------------------------------------------------------------------------------------------------------- 		As a miner issue I found it's not possible to deploy SendSmsService.aar in Axis2 Simple sever but possible to deploy SendSmsService as a explode AAR service. In SendSmsService.aar case I'm getting following exception. 		[ERROR] Woden[Error],0:0,WSDL521,Could not parse an inline schema in the WSDL at URL "jar:file://file:/home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar!/META-INF/SendSmsService.wsdl".,java.lang.RuntimeException:org.apache.ws.commons.schema.XmlSchemaException: JAR entry jar:file:///home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar!/jar:file://file:/home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar!/META-INF/parlayx_sms_types_2_2.xsd not found in /home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar 	[ERROR] Woden[Error],0:0,WSDL521,Could not parse an inline schema in the WSDL at URL "jar:file://file:/home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar!/META-INF/SendSmsService.wsdl".,java.lang.RuntimeException:org.apache.ws.commons.schema.XmlSchemaException: JAR entry jar:file:///home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar!/jar:file://file:/home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar!/META-INF/parlayx_common_types_2_1.xsd not found in /home/sagara/dev/code/apache/axis2/devs/patch/modules/distribution/target/axis2-1.7.0-SNAPSHOT/repository/services/SendSmsService.aar
734||This is my service class  	--------------------------------------------------------------------------------------- 	public class MultiArgsTestService { 	    public String some(String arg1, Map arg2, Double arg3, Object[] arg4) { 	        System.out.println(arg3); 	        return "Passed"; 	    } 	} 		This is my client side code 	------------------------------------ 	public class MultiArgClient { 	    public static void main(String[] args) throws Exception { 	        MultiArgsTestServiceStub stub = new MultiArgsTestServiceStub(); 	        MultiArgsTestServiceStub.Some some = new MultiArgsTestServiceStub.Some(); 	        MultiArgsTestServiceStub.Map1 map1 = new MultiArgsTestServiceStub.Map1(); 	        some.setArg1("Test"); 	        some.setArg2(null); 	        some.setArg3(33.0); 	        some.setArg4(new Object[]{}); 	        System.out.println(stub.some(some).get_return()); 	    } 	} 			when i run this code, it should be print 33.0" but it print null in server side  		i changed some.setArg2(null); to some.setArg2(map1); and run it, then it works and print the "33.0" in server side
735||When pass null as parameter to the method which requires Enum as the method parameter it throws following Exception  		[ERROR] No enum const class org.apache.axis2.axis2userguide.EnumService$Status. 	java.lang.IllegalArgumentException: No enum const class org.apache.axis2.axis2userguide.EnumService$Status. 		at java.lang.Enum.valueOf(Enum.java:196) 		at org.apache.axis2.databinding.utils.BeanUtil.processEnumObject(BeanUtil.java:1088) 		at org.apache.axis2.databinding.utils.BeanUtil.processElement(BeanUtil.java:945) 		at org.apache.axis2.databinding.utils.BeanUtil.deserialize(BeanUtil.java:818) 		at org.apache.axis2.rpc.receivers.RPCUtil.processRequest(RPCUtil.java:182) 		at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:235)
736||Following command generates TransactionProcessorMessageReceiverInOut which is incompatible with client. 		wsdl2java.bat -u -d jaxbri -sp -ss -p com.example.jaxb.soap -ns2p urn:schemas-example-com:transaction-data-1.33=com.example. 	jaxb.soap.mo -o src-generated -uri Transaction_1.33.wsdl 		Client code generated with command 		wsdl2java.bat -u -d adb -sp -o src-generated -uri Transaction_1.33.wsdl 		Now when calling generated service through TransactionProcessorStub.runTransaction reply body has top level element name runTransaction and not replyMessage. 		root cause is this line in the generated invokeBusinessLogic method 		                                        envelope = toEnvelope(getSOAPFactory(msgContext), replyMessage1, false, new javax.xml.namespace.QName("urn:schemas-example-com:transaction-data:TransactionProcessor", 	                                                    "runTransaction")); 		Generated code works ok when I changed it to use same names as generated toOM(ReplyMessage, boolean). This old toOM is generated the same way both in 1.5 and 1.6 but in 1.6 it is dead code (private method which is not called at all). 		                                        envelope = toEnvelope(getSOAPFactory(msgContext), replyMessage1, false, new javax.xml.namespace.QName("urn:schemas-example-com:transaction-data-1.33", 	                                                    "replyMessage"));
737||Steps to reproduce: 	1. In axis2.xml, change the parameter contextRoot to something other than axis2. For example, 	    <parameter name="contextRoot">foo</parameter> 	2. Start the server and point the browser to localhost:8080 		You will be redirected to http://localhost:8080/foo/services/ 	But will get: <faultstring>The service cannot be found for the endpoint reference (EPR) /foo/services/</faultstring>
738||Considering the wsdl attached to this JIRA issue, for the following snippet: 		<element name="withdraw"> 					<simpleType name="TNDataType"> 						<xsd:restriction base="string"> 							<xsd:minLength value="0" /> 							<xsd:maxLength value="12" /> 							<xsd:pattern value="[0-9]*" /> 						</xsd:restriction> 					</simpleType> 				</element> 				this is the output generated in the BankServiceStub class: 		/** 	                               * Auto generated setter method 	                               * @param param TNDataType 	                               */ 	                               public void setTNDataType(java.lang.String param){ 		                                            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches("[0-9]*")) { 	                                                this.localTNDataType=param; 	                                            } 	                                            else { 	                                                throw new java.lang.RuntimeException(); 	                                            } 			                               } 			I've tested this further and the test cases don't, also, cover any combination of two restrictions used together for the same element. If I take out the pattern then the two restrictions for length are checked ok in the resulting code. 		There were previous reports related to the same issue (https://issues.apache.org/jira/browse/AXIS2-4555, https://issues.apache.org/jira/browse/AXIS2-4205, https://issues.apache.org/jira/browse/AXIS2-3237) but none seem to have fixed the issue reported above. Especially, https://issues.apache.org/jira/browse/AXIS2-4205, which is identical but there seems to be no commit associated with it.
739||RawXMLInOutMessageReceiver can be only used in JSON services now [1]. 	However, JSON/badgerfish builder can be improved by handling RPCMessageReceiver correctly. I can't attach the patch because i have copy pasted and created my own formatters and builders(please find the source attached): 		1) It is possible to solve the namespace problem described at [1] by explicitly converting JSON/badgerfish to SOAP in JSONbadgerfish builder : 	public OMElement processDocument(InputStream inputStream, String contentType, 	MessageContext messageContext) throws AxisFault { 	.... 	AbstractXMLInputFactory inputFactory = new BadgerFishXMLInputFactory(); 	XMLStreamReader xmlReader = inputFactory.createXMLStreamReader( 	new JSONTokener(IOUtils.toString(reader))); 	OMNodeEx document = (OMNodeEx) new StAXOMBuilder(xmlReader).getDocumentElement(); 	//removing parent 	document.setParent(null); 	//wrapping document with envelope 	SOAPFactory soapFactory = OMAbstractFactory.getSOAP11Factory(); 	SOAPEnvelope soapEnvelope = soapFactory.getDefaultEnvelope(); 	SOAPBody body = soapEnvelope.getBody(); 	body.addChild(document); 		soapEnvelope.build(); 	 //converting xml structure to soap xml structure, 	//this operation will construct SoapEnvelope,SoapBody,SoapFault instead of 	//regular OmElement 	StAXSOAPModelBuilder stAXSOAPModelBuilder = new StAXSOAPModelBuilder(soapEnvelope.getXMLStreamReader(), null); 	return stAXSOAPModelBuilder.getSOAPEnvelope(); 		... 	} 		2) jettison 1.2 has cool feature called setIgnoreNamespaces which allows to use json formatter with any xml. 		We use the these builders and formatters successfully with JSON/badgerfish request and JSON response. 			[1] http://isurues.wordpress.com/2009/10/06/how-to-use-axis2-json/
740||In Axis 1, we could access a WSDL even if the "WSDL" is in uppercase. But in Axis 2, we cannot access WSDL with upper case, It gives the following response in the browser.  		<soapenv:Reason><soapenv:Text xml:lang="en-US">The endpoint reference (EPR) for the Operation not found is /axis2/services/<service_name>?WSDL and the WSA Action = null. If this EPR was previously reachable, please contact the server administrator.</soapenv:Text></soapenv:Reason>
741||Currently Axis2 cluster member properties support a limited number of predefined identifiers: 		${httpPort} 	${httpsPort} 	${hostName} 		It would be useful to support generic system properties as identifiers when defining cluster member properties. For an example when there are system properties by the names 'foo' and 'bar' we should be able to define a member property as follows: 		<property name="my.property.${foo}" value="${bar}"/>
742||org.apache.axis2.databinding.utils.ConverterUtil#getStringFromDatahandler takes InputStream from DataHandler and opens but doesn't close it properly.
743||Deploy following POJO method in 1.7.0 SNAPSHOT version 		public String echo(String testStr) throws IllegalArgumentException { 		        throw new IllegalArgumentException( 	                "Exception thrown from echo for the input " + testStr);      	    } 			In Axis2 1.5.x and 1.6.0 invoking above method return following message and get excepted exception in client side. 		<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"> 	      <soapenv:Body> 	         <soapenv:Fault> 	            <soapenv:Code> 	               <soapenv:Value>soapenv:Receiver</soapenv:Value> 	            </soapenv:Code> 	            <soapenv:Reason> 	               <soapenv:Text xml:lang="en-US">Exception thrown from echo for the input Ok</soapenv:Text> 	            </soapenv:Reason> 	            <soapenv:Detail /> 	         </soapenv:Fault> 	      </soapenv:Body> 	   </soapenv:Envelope> 		Exception in thread "main" org.apache.axis2.AxisFault: Exception thrown from echo for the input Ok 	    at org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(Utils.java:531) 	    at org.apache.axis2.description.OutInAxisOperationClient.handleResponse(OutInAxisOperation.java:375) 	    at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:421) 	    at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:229) 	    at org.apache.axis2.client.OperationClient.execute(OperationClient.java:165) 	    at sample.SimpleServiceStub.echo(SimpleServiceStub.java:191) 	    at sample.Run.main(Run.java:489) 			In Axis2 1.6.1 and 1.7.0- SNAPSHOT invoking same method return different response message as follows and return a ADB exception instead of expected exception. 			<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"> 	      <soapenv:Body> 	         <soapenv:Fault> 	            <soapenv:Code> 	               <soapenv:Value>soapenv:Receiver</soapenv:Value> 	            </soapenv:Code> 	            <soapenv:Reason> 	               <soapenv:Text xml:lang="en-US">Exception thrown from echo for the input Ok</soapenv:Text> 	            </soapenv:Reason> 	            <soapenv:Detail> 	               <ns:SimpleServiceIllegalArgumentException xmlns:ns="http://sample"> 	                  <IllegalArgumentException xmlns="http://sample" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="axis2ns3:anyType" /> 	               </ns:SimpleServiceIllegalArgumentException> 	            </soapenv:Detail> 	         </soapenv:Fault> 	      </soapenv:Body> 		Exception in thread "main" org.apache.axis2.AxisFault: org.apache.axis2.databinding.ADBException: Can not invoke the getTypeObject method in the extension mapper class 	    at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 	    at sample.SimpleServiceStub.fromOM(SimpleServiceStub.java:1896) 	    at sample.SimpleServiceStub.echo(SimpleServiceStub.java:220) 	    at sample.Run.main(Run.java:489) 	Caused by: java.lang.Exception: org.apache.axis2.databinding.ADBException: Can not invoke the getTypeObject method in the extension mapper class 	    at sample.SimpleServiceStub$SimpleServiceIllegalArgumentException$Factory.parse(SimpleServiceStub.java:1781) 	    at sample.SimpleServiceStub.fromOM(SimpleServiceStub.java:1890) 	    ... 2 more 	Caused by: org.apache.axis2.databinding.ADBException: Can not invoke the getTypeObject method in the extension mapper class 	    at org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(ConverterUtil.java:1659) 	    at sample.SimpleServiceStub$SimpleServiceIllegalArgumentException$Factory.parse(SimpleServiceStub.java:1759) 	    ... 3 more
744||This is supported in Axis2 1.6.x version. Provide the same for Axis 2 1.5.x. 	Example wsdl2code-maven-plugin configuration: 		<plugin>  	                <groupId>org.apache.axis2</groupId>  	                <artifactId>axis2-wsdl2code-maven-plugin</artifactId>  	                <version>1.5.6</version>  	                <executions>  	                    <execution>  	                        <id>generate service skeleton</id>  	                        <phase>generate-sources</phase>  	                        <inherited>false</inherited>  	                        <goals>  	                            <goal>wsdl2code</goal>  	                        </goals>  	                        <configuration>  	                            <packageName>...</packageName>  	                            <generateAllClasses>false</generateAllClasses>  	                            <generateServerSide>true</generateServerSide>  	                            <databindingName>jaxbri</databindingName>  	                            <generateServerSideInterface>true</generateServerSideInterface>  	                            <generateServicesXml>true</generateServicesXml>  	                            <wsdlFile>SomeService.wsdl</wsdlFile>  	                            <namespaceURIs>  	                                <namespaceURI>  	                                    <uri>...</uri>  	                                    <packageName>...</packageName>  	                                </namespaceURI>  	                            </namespaceURIs>  	                            <options>  	                                <property>  	                                    <name>bindingFileName</name>  	                                    <value>binding.jxb</value>  	                                </property>  	                                <!-- generate toString methods -->  	                                <property>  	                                    <name>XtoString</name>  	                                    <value>someString</value>  	                                </property>  	                                <!-- generate equals methods -->  	                                <property>  	                                    <name>Xequals</name>  	                                    <value>someString</value>  	                                </property>  	                                <!-- generate hashCode methods -->  	                                <property>  	                                    <name>XhashCode</name>  	                                    <value>someString</value>  	                                </property>  	                            </options>  	                        </configuration>  	                    </execution>  	                </executions>  	                <dependencies>  	                    <dependency>  	                        <groupId>org.apache.axis2</groupId>  	                        <artifactId>axis2-jaxbri</artifactId>  	                        <version>1.5.6</version>  	                    </dependency>  	                    <dependency>  	                         <groupId>org.apache.axis2</groupId>  	                         <artifactId>axis2-codegen</artifactId>  	                         <version>1.5.6</version>  	                    </dependency>  	                    <dependency>  	                        <groupId>org.jvnet.jaxb2_commons</groupId>  	                        <artifactId>jaxb2-basics</artifactId>  	                        <version>${jaxb2.basics.version}</version>  	                    </dependency>  	                    <dependency>  	                        <groupId>org.jvnet.jaxb2_commons</groupId>  	                        <artifactId>jaxb2-basics-annotate</artifactId>  	                        <version>${jaxb2.basics.annotate.version}</version>  	                    </dependency>  	                    <dependency>  	                        <groupId>com.sun.xml.bind</groupId>  	                        <artifactId>jaxb-impl</artifactId>  	                        <version>${jaxb.version}</version>  	                    </dependency>  	                    <dependency>  	                        <groupId>com.sun.xml.bind</groupId>  	                        <artifactId>jaxb-xjc</artifactId>  	                        <version>${jaxb.version}</version>  	                    </dependency>  	                </dependencies>  	</plugin>  		Properties with "X" prefix are not recognized. 	Please find the patch attached (the code from 1.6 version).
745||The object, which is created by axis2 parsing an empty xs:normalizedString tag, cannot be serialized as serialize(...) always throws "normalizedString cannot be null!!" exception. 		Details: 		When org.apache.axis2.databinding.types.xsd.NormalizedString$Factory.parse() method parses an empty xs:normalizedString tag, the following code runs: 		NormalizedString object = new NormalizedString(); 	[...] 	object.setNormalizedString(org.apache.axis2.databinding.utils.ConverterUtil.convertToNormalizedString(content)); 		Method convertToNormalizedString() returns null for null/empty string values. 		Afterwards, if NormalizedString.serialize(...) is called, it will throw "normalizedString cannot be null!!" exception. 		For the full relevant code see for example http://www.docjar.com/html/api/org/apache/axis2/databinding/utils/ConverterUtil.java.html
746||Procedure: 	1) Create service function (e.g. POJO) which has an array parameter, e.g.: 	public static boolean testFunc(Integer[] integers) { 	  System.out.println((integers != null) ? integers.length : "null"); 	} 		2) Send request with null as first element, e.g.: 	<ns1:testFunc><ns1:integers/><ns1:integers>1</ns1:integers><ns1:integers>2</ns1:integers></ns1:testFunc> 		3) Send request with null as non-first element, e.g.: 	<ns1:testFunc><ns1:integers>1</ns1:integers><ns1:integers/><ns1:integers>2</ns1:integers></ns1:testFunc> 		Result: 	2) Array of length 0 (i.e. null) received - WRONG 	3) Array of length 3 received (1, null, 2, as expected) 		Reason: 	BeanUtil.java ignores non-null elements of an array in ProcessElement() if the first element is null even if there is more than one element.
747||SimpleHTTPServer, line 176 		   if (startAllTransports) { 	    Iterator iter = configctx.getAxisConfiguration(). 	      getTransportsIn().keySet().iterator(); 	    while (iter.hasNext()) { 	     QName trp = (QName) iter.next(); // String -> QName 	     if (!new QName(Constants.TRANSPORT_HTTP).equals(trp)) { 	      trsIn = (TransportInDescription) 	        configctx.getAxisConfiguration().getTransportsIn().get(trp); 	      listenerManager.addListener(trsIn, false); 	     } 	    } 	   } 		Axis2 should probably enforce the use of generics throughout the project to avoid such problems.
748||Axis2 runtime ignore "useOriginalwsdl" property for WSDL 2.0 but it should support for this.  		<parameter name="useOriginalwsdl">true</parameter> 	<parameter name="modifyUserWSDLPortAddress">true</parameter> 		Also it is required to formalize use of this property.  		e.g - Specify "useOriginalwsdl" property in services.xml but don't put any WSDL file there : 		  In this case ?wsdl generate correct error message but ?wsdl2 generate incorrect and partial WSDL 2.0 content. Here error message should be generated for both cases.
749||BeanUtil class use following code to load classes. 		beanClass = Loader.loadClass(beanClass.getClassLoader(), className); 		Usually beanClass.getClassLoader() will return null and hence thread context ClassLoader is to used to load classes. In some cases this will result into ClassNotFoundException. Following service demonstrate such a exception.
750||java.lang.NullPointerException 	    at org.apache.axis2.databinding.utils.BeanUtil.getPropertyQnameList(BeanUtil.java:375) 	    at org.apache.axis2.databinding.utils.BeanUtil.getPullParser(BeanUtil.java:97) 	    at org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl.processProperties(ADBXMLStreamReaderImpl.java:993) 	    at org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl.next(ADBXMLStreamReaderImpl.java:831) 	    at org.apache.axis2.util.StreamWrapper.next(StreamWrapper.java:71) 	    at org.apache.axiom.om.impl.builder.StAXOMBuilder.parserNext(StAXOMBuilder.java:668) 	    at org.apache.axiom.om.impl.builder.StAXOMBuilder.next(StAXOMBuilder.java:214) 	    at org.apache.axiom.om.impl.llom.OMElementImpl.buildNext(OMElementImpl.java:704) 	    at org.apache.axiom.om.impl.llom.OMElementImpl.getFirstOMChild(OMElementImpl.java:719) 	    at org.apache.axiom.om.impl.llom.OMElementImpl.getChildren(OMElementImpl.java:368) 	    at org.apache.axis2.databinding.utils.BeanUtil.getPropertyQnameList(BeanUtil.java:309) 	    at org.apache.axis2.databinding.utils.BeanUtil.getPullParser(BeanUtil.java:97) 	    at org.apache.axis2.rpc.receivers.RPCUtil.processObjectAsDocLitBare(RPCUtil.java:169) 	    at org.apache.axis2.rpc.receivers.RPCUtil.processResonseAsDocLitBare(RPCUtil.java:373) 	    at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:151) 	    at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) 	    at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114) 	    at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181) 	    at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:176) 	    at org.apache.axis2.transport.http.HTTPWorker.service(HTTPWorker.java:296) 	    at org.apache.axis2.transport.http.server.AxisHttpService.doService(AxisHttpService.java:281) 	    at org.apache.axis2.transport.http.server.AxisHttpService.handleRequest(AxisHttpService.java:187) 	    at org.apache.axis2.transport.http.server.HttpServiceProcessor.run(HttpServiceProcessor.java:82) 	    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 	    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 	    at java.lang.Thread.run(Thread.java:662)
751||Above limitation due to fact that  RPCUtil.processObjectAsDocLitBare method receive null instead of TypeTable.
752||When deserializing an Array it passes parent OMElement recursively to the deserialize method in order to process all array elements. But when xsi:type attribute present on  the parent element deserialize method locally override array type using xsi:type value, this result into a infinite loop.  		<?xml version='1.0' encoding='UTF-8'?> 	   <soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"> 	      <soapenv:Body> 	         <ns2:echoObject xmlns:ns2="http://sample"> 	            <ns2:argObj xmlns:ns1="http://sample/xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns1:QueryBean"> 	               <ns1:columnList>abc</ns1:columnList> 	               <ns1:columnList>gef</ns1:columnList> 	            </ns2:argObj> 	         </ns2:echoObject> 	      </soapenv:Body> 	   </soapenv:Envelope>
753||A sample JSON (having a line break at the first line) which causes the error is;  		{  	"Hi_ABC": [  	{"abc": "PPP-TEST_11"},  	{"abc": "QQQ-Test1"}  	]}  			The error log;  		[2011-11-16 16:32:00,125] ERROR - OMSourcedElementImpl Could not get parser from data source for element  	"Hi_ABC"  	javax.xml.stream.XMLStreamException  	at org.codehaus.jettison.mapped.MappedXMLInputFactory.createXMLStreamReader(MappedXMLInputFactory.java:46)  	at org.apache.axis2.json.JSONDataSource.getReader(JSONDataSource.java:56)  	at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.getDirectReader(OMSourcedElementImpl.java:225)  	at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.forceExpand(OMSourcedElementImpl.java:254)  	at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.internalSerialize(OMSourcedElementImpl.java:685)  	at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeChildren(OMSerializerUtil.java:556)  	at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:875)  	at org.apache.axiom.soap.impl.llom.SOAPEnvelopeImpl.internalSerialize(SOAPEnvelopeImpl.java:230)  	at org.apache.axiom.om.impl.llom.OMSerializableImpl.serialize(OMSerializableImpl.java:125)  	at org.apache.axiom.om.impl.llom.OMSerializableImpl.serialize(OMSerializableImpl.java:113)  	at org.apache.axiom.om.impl.llom.OMElementImpl.toString(OMElementImpl.java:988)  	at java.lang.String.valueOf(String.java:2826)  	at java.lang.StringBuffer.append(StringBuffer.java:219)  	at org.apache.synapse.mediators.builtin.LogMediator.getFullLogMessage(LogMediator.java:184)  	at org.apache.synapse.mediators.builtin.LogMediator.getLogMessage(LogMediator.java:123)  	at org.apache.synapse.mediators.builtin.LogMediator.mediate(LogMediator.java:91)  	at org.apache.synapse.mediators.AbstractListMediator.mediate(AbstractListMediator.java:60)  	at org.apache.synapse.mediators.base.SequenceMediator.mediate(SequenceMediator.java:114)  	at org.apache.synapse.core.axis2.ProxyServiceMessageReceiver.receive(ProxyServiceMessageReceiver.java:154)  	at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181)  	at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172)  	at org.apache.synapse.transport.nhttp.ServerWorker.processEntityEnclosingMethod(ServerWorker.java:408)  	at org.apache.synapse.transport.nhttp.ServerWorker.run(ServerWorker.java:259)  	at org.apache.axis2.transport.base.threads.NativeWorkerPool$1.run(NativeWorkerPool.java:173)  	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)  	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)  	at java.lang.Thread.run(Thread.java:662)  	[2011-11-16 16:32:00,127] ERROR - NativeWorkerPool Uncaught exception  	java.lang.RuntimeException: Error obtaining parser from data source:null  	at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.getDirectReader(OMSourcedElementImpl.java:230)  	at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.forceExpand(OMSourcedElementImpl.java:254)  	at org.apache.axiom.om.impl.llom.OMSourcedElementImpl.internalSerialize(OMSourcedElementImpl.java:685)  	at org.apache.axiom.om.impl.util.OMSerializerUtil.serializeChildren(OMSerializerUtil.java:556)  	at org.apache.axiom.om.impl.llom.OMElementImpl.internalSerialize(OMElementImpl.java:875)  	at org.apache.axiom.soap.impl.llom.SOAPEnvelopeImpl.internalSerialize(SOAPEnvelopeImpl.java:230)  	at org.apache.axiom.om.impl.llom.OMSerializableImpl.serialize(OMSerializableImpl.java:125)  	at org.apache.axiom.om.impl.llom.OMSerializableImpl.serialize(OMSerializableImpl.java:113)  	at org.apache.axiom.om.impl.llom.OMElementImpl.toString(OMElementImpl.java:988)  	at java.lang.String.valueOf(String.java:2826)  	at java.lang.StringBuffer.append(StringBuffer.java:219)  	at org.apache.synapse.mediators.builtin.LogMediator.getFullLogMessage(LogMediator.java:184)  	at org.apache.synapse.mediators.builtin.LogMediator.getLogMessage(LogMediator.java:123)  	at org.apache.synapse.mediators.builtin.LogMediator.mediate(LogMediator.java:91)  	at org.apache.synapse.mediators.AbstractListMediator.mediate(AbstractListMediator.java:60)  	at org.apache.synapse.mediators.base.SequenceMediator.mediate(SequenceMediator.java:114)  	at org.apache.synapse.core.axis2.ProxyServiceMessageReceiver.receive(ProxyServiceMessageReceiver.java:154)  	at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181)  	at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172)  	at org.apache.synapse.transport.nhttp.ServerWorker.processEntityEnclosingMethod(ServerWorker.java:408)  	at org.apache.synapse.transport.nhttp.ServerWorker.run(ServerWorker.java:259)  	at org.apache.axis2.transport.base.threads.NativeWorkerPool$1.run(NativeWorkerPool.java:173)  	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)  	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)  	at java.lang.Thread.run(Thread.java:662)  			With the CRLF after the first curly bracket throws following error. 	'Could not get parser from data source for element ^M"Hi_ABC"' (^M = ascii 0x0D):  		INFO | jvm 1 | 2011/11/28 09:37:43 | [2011-11-28 09:37:43,749] DEBUG - TransportUtils createSOAPEnvelope using Builder (class org.apache.synapse.commons.builders.XFormURLEncode  	dBuilder) selected from type (application/x-www-form-urlencoded)  	INFO | jvm 1 | 2011/11/28 09:37:43 | [2011-11-28 09:37:43,750] INFO - LogMediator To: /services/JSONTestProxy, MessageID:
754||First time posting an issue request. Apologies if I'm doing it wrong... 		When building in Eclipse using m2e in workspace resolution mode, the axis2-aar-maven-plugin is not prepared for a "dependency" which isn't an assembly but is instead a folder containing the compiled classes from within the local workspace. I propose that if the incoming dependency happens to be a directory that it get packaged up and copied to the destination instead of blowing up with an exception. 		(there is no place to attach a patch, so I'll include a code snippet illustrating my idea) 		Modifying this function in AbstractAarMojo.java will give the intended result: 		    private void copyFileIfModified(File source, File destination) 	            throws IOException { 	        // TO DO: Remove this method and use the method in WarFileUtils when Maven 2 changes 	        // to plexus-utils 1.2. 	        if (destination.lastModified() < source.lastModified()) { 	        	if (source.isDirectory()) { 	        		JarArchiver jarArchiver = new JarArchiver(); 	        		try { 						jarArchiver.setDestFile( destination ); 						jarArchiver.addDirectory( source.getCanonicalFile() ); 						jarArchiver.createArchive(); 					} catch (ArchiverException e) { 						// wrap ArchiverException in IOException 						throw new IOException(e); 					} 	        	} else { 		            FileUtils.copyFile(source.getCanonicalFile(), destination); 		            // preserve timestamp 		            destination.setLastModified(source.lastModified()); 	        	} 	        } 	    }
755||Currently org.apache.axis2.databinding.typemapping.SimpleTypeMapper class has getSimpleTypeObject(Class parameter, OMElement value) method. Only usage of the OMElement parameter of this method is to retrieve the text encapsulated in it by calling value.getText() method. getSimpleTypeObject(Class parameter, String text) would be a more API-wise cleaner version of this method. 		Introducing getSimpleTypeObject(Class parameter, String text) is useful since converting a String into a simple type (int, long, etc.) is a common requirement. In fact, in many places of Apache Synapse project this sort of conversions are done using newly written code. If getSimpleTypeObject(Class parameter, String text) method is introduced to SimpleTypeMapper class, then it can be reused by number of places including some code in Apache Synpase project without writing new code for the same purpose.
756||Original proposal available here http://axis.markmail.org/thread/tjd7vcd2fjred474.
757||Current issue with adding multiple spring service is that when we add a second service, the first one does not work or rather the deployment of the second service breaks the first. This is because of the static nature of spring ApplicationContext variable in ApplicationContextHolder class. Current way of initializing spring framework for a service via a service class which implements the ServiceLifeCycle interface. In this method only, the spring application context is created with the applicationContext.xml file. The beans defined in the context file will be defined in this context and the context will be set to the static ApplicationContext variable of the ApplicationContextHolder class. When a second service deployed the same operations mentioned above will happen and finally the spring ApplicationContext of the first service will get replaced by the second service's ApplicationContext. So if you invoke the second service it works, but when invoking the first service, it gives an error as no defined beans are found.
758||When you develop service, you can specify the list of transports on which you service should be exposed. 	 This class will test this functionality. 		e.g. 		<serviceGroup> 	    <!-- https transport is not available in Axis2. Therefore the deployment of the EchoService2 should fail. --> 	    <service name="EchoService3"> 	        <description> 	               This service echo the given input , and this was developed to text the axis system working 	                correctly 	        </description> 		       <transports> 	                <transport>https</transport> 	        </transports> 		        <parameter name="ServiceClass">org.apache.axis2.sample.echo.EchoImpl</parameter> 	    </service> 	</serviceGroup>
759||This involves writing some test coverage for existing xmlschema features and porting to new xmlschema2 API.
760||DefaultSchemaGenerator only process fields of a POJO but there is a possibility to present pair of accessor methods without a Field. In such cases DefaultSchemaGenerator generate invalid schema.
761||Axis2 REST functionality is not working as expected in current trunk. I tried a sample with a wsdl2 where I define whttp:location in HttpBinding to access the service operations in there. But im getting  EPR not found for operation error in the response. For the attached sample i have defined the whttp:location for "getPrice" operation as whttp:location="price/{symbol}" 		Steps to reproduce: 	1. Deploy the attached service 	2. Access http://localhost:8080/axis2/services/StockQuoteService/getPrice?symbol=IBM, it will return a value 	3. Access http://localhost:8080/axis2/services/StockQuoteService/price/IBM, it will return an EPR not found error.
762||Axis2 runtime WSDL generation define "text/xml" as the MIME content type for messages.  The default behavior of a client generated from above WSDL ( with -ap option) is send SOAP messages instead of pure XML messages and following exception when receiving the response message. 		org.apache.axis2.AxisFault: org.apache.axis2.databinding.ADBException: Unexpected subelement {http://schemas.xmlsoap.org/soap/envelope/}Body 	at org.apache.axis2.AxisFault.makeFault(AxisFault.java:430) 			Adding following line is a workaround for this issue but it's required to fix this properly.   		  Options options = stub._getServiceClient().getOptions(); 	  options.setProperty(Constants.Configuration.MESSAGE_TYPE, "application/xml");
763||I have 3 complex types defined with the same name, but they are in different namespaces. However, when the ADB code is generated it still appends a unique counter to the end of the third class name. This shouldn't be necessary since they are in different namespaces.  		With the fix of issue 3136, for the second type with the same name an "E" is appended instead of the counter. But for the third type still the counter is applied. 		The Problem seems to be that the package name is not taken in account as long as it isn't a wrapped type. 		I Fixed this by patching the method org.apache.axis2.schema.writer.JavaBeanWriter.makeFullyQualifiedClassName(QName) 		The patch is based on Revision 606099 		 public String makeFullyQualifiedClassName(QName qName) 	  { 		    String namespaceURI = qName.getNamespaceURI(); 	    String packageName = getPackage(namespaceURI); 	    String originalName = qName.getLocalPart(); 	    String packagePrefix = null; 	    if (wrapClasses) 	    { 	      packagePrefix = (this.packageName == null ? DEFAULT_PACKAGE + "." : this.packageName) 	      + WRAPPED_DATABINDING_CLASS_NAME; 	    } 	    else if (writeClasses) 	    { 	      packagePrefix = packageName; 	    } 		    String className = null; 	    if (!this.packageNameToClassNamesMap.containsKey(packagePrefix )) 	    { 	      this.packageNameToClassNamesMap.put(packagePrefix , new ArrayList()); 	    } 	    List listOfNames = (List) this.packageNameToClassNamesMap.get(packagePrefix ); 	    className = makeUniqueJavaClassName(listOfNames, originalName); 		    String fullyqualifiedClassName; 	    if (packagePrefix != null) 	    { 	      fullyqualifiedClassName = packagePrefix 	                    + (packagePrefix.endsWith(".") ? "" : ".") + className; 	    } 	    else 	    { 	      fullyqualifiedClassName = className; 	    } 	    // return the fully qualified class name 	    return fullyqualifiedClassName; 	  }
764||At present Axis2 deployers are only associated with a file extension. but if we need to call an Axis2 deployer when a directory is dropped to the deployment directory, it is not possible with the current deployment engine logic.  		I made few minor fixes to DeploymentEngine and RepositoryListener in order to achieve this. Now if the extension parameter is not present in the deployer configuration, Directories will be picked up and the registered deployer will be called. 		IMO, with this feature we can make the Axis2 Deployment engine more usable for wider deployment scenarios. 		Regards, 	/Nuwan
765||extraClass values should be trimmed before processing otherwise having white space before and after the class names can cause ClassNotFoundException when deploying.
766||I just wrote a simple service in which the service class is extending another class. Base class contains some methods and in my service class I've added some more. So I wrote a simple services.xml using the RPC MR and deployed it. But I don't see the inherited methods as operations in my WSDL. 		Thanks, 	~Isuru
767||In private EndpointReference calculateEndpoint(String protocol, String serviceName, String ip) method in  /org.apache.axis2.osgi/src/org/apache/axis2/osgi/core/web/WebApp.java 		There is if statement like this, 		        if (contextRoot.equals("/") || contextRoot == null) { 	            contextRoot = "";  	        } 		here contextroot==null is useless because contextRoot.equals("/") will throw a null pointer exception if contextRoot is null.
768||There are two ways that xml string can be converted into JSON string, Badgerfish and Mapped . Current Axis2 with JSON module completely supports Badgerfish convention[1] while partialy supports Mapped convention[1] as Mapped formatted JSON with namespaces are not supported in Axis2. Therefore if the client side java-script code needs to talk with java service which is deployed in Axis2, it should be sent as Badgerfish convention. It is cumbersome to generate Badgerfish convention of JSON string again and again to call services if there is no  xml representation string in client side. 		If java script client can send JSON object to relevant java service in Axis2, defining service and operation in request url, without doing any modifications to JSON objects, then it would be very helpful for Java-Script users at client side. 		According to the thread in the mailing list, which discussed $subject we have two approaches. i have summarized those two approaches as below.  		1. Store json inputstream in message context at the message builder while putting dummy SOAPEnvelop to the message context, and using google-gson process it inside the message receiver  		2. Preserve the requirement that a message must have a well defined SOAP infoset and use a trivial representation similar (or identical) to what we use for plain text. This has the advantage that it is more in line with the rest of the Axis2 architecture,  	    or  	   another option is to write an xmlstream reader/writer implementation to parse the json stream. And provide that xml stream implementation to Axiom.  		[1]http://wso2.org/library/768
769||This project idea consists of collection of Axis2 issues related to WSDL features and mainly focus on following two areas.  		1.) Introduce a API to customize default WSDL generation behavior of Axis2 and this need to be supported to both WSDL 1.1 and WSDL 2.0.  	2.) Stabilize WSDL 2.0 features and add missing features.  			Following are the set of issues that have been identified as compulsory tasks of this project and required to provide  detailed  technical design with proposals.  		AXIS2-3492   - WSDLSupplier configuration and/or check is not proper/obvious 	AXIS2-5278     - WSDLSupplier should support for both WSDL 1.1 and WSDL 2.0  	AXIS2-3653   - customization of dynamic WSDL creation 	AXIS2-5240   - Provide an API/mechanism for setting parameters for run-time Java2WSDL generation. 	AXIS2-3114   - Control what wsdl bindings returned via services.xml 	AXIS2-5191   - Axis2 should support to use "useOriginalWSDL" property for WSDL 2.0 			Further following are some of the optional tasks identified and it's expected to complete some of those issues as well ( Not required to fix following complete list of issues).                 		AXIS2-4976 - Axis2 wsdl2code code generation bug caused by "localName" 	AXIS2-4407 - Axis 2 does not pick up wsdl2.0 which is modified to include whttp:location and whttp:method for Restful services  	AXIS2-4193 - WSDL2JAVA no setters in ADBBean 	AXIS2-3768 - WSDL20ToAxisServiceBuilder does not read policies in WSDL 2.0 docs 	AXIS2-3108 - Broken WSDL for operations added by modules 	AXIS2-4734 - Issue with schema import in the wsdl file 	AXIS2-4985 - NullPointerException in axis2-aar-maven-plugin if no fileSet is specified 	AXIS2-4747 - Possible bug when generating code for livebookings wsdl 	AXIS2-4521 - WSDL504,Could not locate the schema document when tomcat starts up 	AXIS2-4436 - Woden attempts to load http://www.w3.org/2001/XMLSchema.xsd every time it parses a WSDL document (or if Axis2 instructs Woden to do so) 	AXIS2-4978 - Copying data from inputStream to OuputStream needs appropriate buffer size 	AXIS2-4065 - Policy attached to an input operation in a WSDL does not get copied to the Stub operation by WSDL2Java
770||at org.apache.axis2.engine.AxisConfiguration.notifyObservers(AxisConfiguration.java:650) 	at org.apache.axis2.engine.AxisConfiguration.addServiceGroup(AxisConfiguration.java:406) 	at org.apache.axis2.deployment.DeploymentEngine.addServiceGroup(DeploymentEngine.java:609) 	at org.apache.axis2.deployment.ServiceDeployer.deploy(ServiceDeployer.java:100) 	at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) 	at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:813)
771||In our environment we are behind a proxy server requesting authentication. 		I'm using the plugin axis2-wsdl2code-maven-plugin and as the wsdl file is referring to external schemas such as http://company.domain.local:13000/SM/7/Common.xsd the generation fails with the ConnectException: Connection refused. 		Is there a way to indicate which proxy and authentication to use in order to retrieve files located on external domains? 	We need to be able to indicate which proxy / authentication to use and to indicate also the domains for which proxy is not requested (for local sources). 		Below the exception stack: 		Retrieving schema at 'http://www.w3.org/2005/05/xmlmime', relative to 'http://company.domain.local:13000/SM/7/Common.xsd'. 	java.net.ConnectException: Connection refused: connect 		at java.net.PlainSocketImpl.socketConnect(Native Method) 		at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333) 		at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195) 		at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182) 		at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366) 		at java.net.Socket.connect(Socket.java:525) 		at java.net.Socket.connect(Socket.java:475) 		at sun.net.NetworkClient.doConnect(NetworkClient.java:163) 		at sun.net.www.http.HttpClient.openServer(HttpClient.java:394) 		at sun.net.www.http.HttpClient.openServer(HttpClient.java:529) 		at sun.net.www.http.HttpClient.<init>(HttpClient.java:233) 		at sun.net.www.http.HttpClient.New(HttpClient.java:306) 		at sun.net.www.http.HttpClient.New(HttpClient.java:323) 		at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:860) 		at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:801) 		at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:726) 		at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1049) 		at java.net.URL.openStream(URL.java:1010) 		at com.ibm.wsdl.util.StringUtils.getContentAsInputStream(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.parseTypes(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.parseDefinitions(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 		at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source) 		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.readInTheWSDLFile(CodeGenerationEngine.java:320) 		at org.apache.axis2.wsdl.codegen.CodeGenerationEngine.<init>(CodeGenerationEngine.java:133) 		at org.apache.axis2.maven2.wsdl2code.WSDL2CodeMojo.execute(WSDL2CodeMojo.java:567) 		at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:107) 		at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) 		at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) 		at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) 		at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) 		at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) 		at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) 		at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) 		at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319) 		at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) 		at org.apache.maven.cli.MavenCli.execute(MavenCli.java:534) 		at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) 		at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) 		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 		at java.lang.reflect.Method.invoke(Method.java:597) 		at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) 		at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) 		at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) 		at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352) 		______________________ 			Best regards, 		Cristian
772||According to SOAP specs v1.1 Section 6.2(http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383529) and v1.2 Part 2 Section 7.5.1.2(http://www.w3.org/TR/2007/REC-soap12-part2-20070427/#http-reqbindwaitstate), all 2xx HTTP status codes are successful responses.  		In the case of SOAP v1.2, the spec even goes so far as to state "The SOAP HTTP binding follows the rules of any HTTP application which means that an implementation of the SOAP HTTP binding must understand the class of any status code, as indicated by the first digit, and treat any unrecognized response as being equivalent to the x00 status code of that class, with the exception that an unrecognized response must not be cached." 		Given that, an HTTP status code of 201 (Created) in response to a SOAP request currently throws an error. The 201 is just an example, as any 2xx status code other than 200 and 202 will also throw an error. The problem is in org.apache.axis2.transport.http.HTTPSender.handleResponse(MessageContext, HttpMethodBase) where all status codes that are not explicitly handled are treated as an error. After reading the spec, it looks like those unhandled 2xx status codes should be handled the same as 200. Therefore, I am attaching a patch that treats all 2xx status codes other than 202 as a 200 response. 		Revised handling should probably be considered for other status code classes/families as well. However, since those are error conditions anyway, they will probably have a much lesser impact.
773||JAX-WS Axis2EndpointReferenceFactoryImpl#createEndpointReference()  class does not cover all possible cases when calculating wsdlDocumentLocation. This will result into failures in jaxws-calculator sample.
774||Axis2 POJO support generate minOccurs="0"  elements for java primitive parameters that will allows to omit relevant XML element from request messages. During the unmarshallings process null value is used to represent values of those omitted request elements.  Finally this will result into IllegalArgumentException when it try to pass null value for primitive parameters through Java reflection. As a solution Axis2 should not generate minOccurs="0" for primitive parameters. 		java.lang.IllegalArgumentException 	    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	    at java.lang.reflect.Method.invoke(Method.java:597) 	    at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:256) 	    at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:117) 	    at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)
775||I recently had a conflict in my project where Axis2 wanted jsr311-api version 1.0 where the other component (specifically neo4j-rest-graph 1.6) wanted jsr311-api version 1.1.1. 		Manually overriding axis2 and using the jsr311-api 1.1.1 makes the whole app work fine. 		Since axis2 works fine with 1.1.1 and it is the latest version of jsr311-api, this should be the jsr311-api version Axis2 depends on.
776||The message builders for MTOM and SwA both initialize the message context with an Attachments object that contains all MIME parts, including the root part. On the other hand, the corresponding message formatters have different expectations. The message formatter for MTOM doesn't look at the Attachments object in the message context because attachments are referenced by special OMText instances in the SOAP envelope. Finally, the message formatter for SwA assumes that the Attachments object in the message context only contains the attachment parts. 		This means that for MTOM and SwA messages, the message context is set up differently for incoming and outgoing messages. Such inconsistencies in the API are not only annoying, but they also cause subtile issues in Synapse which needs to be able to forward messages, i.e. transform incoming into outgoing messages. One such issue is described in SYNAPSE-867. 		The proposal is to change the semantics for incoming messages, such that they match the current semantics for outgoing messages. In practice this means: 		1. The Attachments object in the message context would no longer be set for MTOM messages. In fact, code that attempts to directly access the MIME parts of an MTOM message is broken by definition, because the sender is free to choose which base64Binary elements are sent as attachments and which ones are inlined. 	2. The message builder for SwA would remove the root part from the Attachments object before adding it to the message context, so that application code only sees attachments parts. In fact, there is no valid use case where application code would want to retrieve the SOAP part directly from the Attachments object.
777||We are running WebSphere cluster with multiple instances of Axis2. 	During parallel start-up all of them (together) are "trying" to do temp folders clean-up in the static initializer of TempFileManager 	But some instances are "faster", some are "slower" and as result of this time-race "slow" instances can end-up in non-functional state (see the log bellow). 		Solution: A simple check in method  "private static void recursiveDelete(File rootDir)" after "File[] files = rootDir.listFiles();" 		if (files != null) { ...} 		should fix the issue. 		--- attached log ------ 		java.lang.ExceptionInInitializerError 		at java.lang.J9VMInternals.initialize(J9VMInternals.java:222) 		at org.apache.axis2.deployment.util.Utils.createTempFile(Utils.java:227) 		at org.apache.axis2.deployment.util.Utils.getURLsForAllJars(Utils.java:168) 		at org.apache.axis2.deployment.util.Utils.createClassLoader(Utils.java:852) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.setClassLoader(DeploymentFileData.java:115) 		at org.apache.axis2.deployment.ModuleDeployer.deploy(ModuleDeployer.java:70) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) 		at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:813) 		at org.apache.axis2.deployment.RepositoryListener.init(RepositoryListener.java:264) 		at org.apache.axis2.deployment.RepositoryListener.init2(RepositoryListener.java:69) 		at org.apache.axis2.deployment.RepositoryListener.<init>(RepositoryListener.java:64) 		at org.apache.axis2.deployment.DeploymentEngine.loadRepository(DeploymentEngine.java:158) 		at org.apache.axis2.deployment.WarBasedAxisConfigurator.getAxisConfiguration(WarBasedAxisConfigurator.java:228) 		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:64) 		at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:584) 		at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:454) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:358) 		at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.init(ServletWrapperImpl.java:169) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1809) 		at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:98) 		at com.ibm.ws.webcontainer.webapp.WebApp.getServletWrapper(WebApp.java:1038) 		at com.ibm.ws.webcontainer.webapp.WebApp.getServletWrapper(WebApp.java:959) 		at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:638) 		at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinally(WebApp.java:436) 		at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:304) 		at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:100) 		at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:166) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:731) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:616) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:376) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:668) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1127) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1319) 		at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:610) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:944) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:740) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2051) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:385) 		at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:328) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$300(CompositionUnitMgrImpl.java:113) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:895) 		at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:349) 		at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1604) 	Caused by: java.lang.NullPointerException 		at org.apache.axis2.deployment.util.TempFileManager.recursiveDelete(TempFileManager.java:138) 		at org.apache.axis2.deployment.util.TempFileManager.<clinit>(TempFileManager.java:203) 		at java.lang.J9VMInternals.initializeImpl(Native Method) 		at java.lang.J9VMInternals.initialize(J9VMInternals.java:200) 		... 43 more 	.... 		The addressing-1.6.0.mar module, which is not valid, caused org.apache.axis2.deployment.util.TempFileManager (initialization failure) 	java.lang.NoClassDefFoundError: org.apache.axis2.deployment.util.TempFileManager (initialization failure) 		at java.lang.J9VMInternals.initialize(J9VMInternals.java:140) 		at org.apache.axis2.deployment.util.Utils.createTempFile(Utils.java:227) 		at org.apache.axis2.deployment.util.Utils.getURLsForAllJars(Utils.java:168) 		at org.apache.axis2.deployment.util.Utils.createClassLoader(Utils.java:852) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.setClassLoader(DeploymentFileData.java:115) 		at org.apache.axis2.deployment.ModuleDeployer.deploy(ModuleDeployer.java:70) 		at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) 		at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:813) 		at org.apache.axis2.deployment.RepositoryListener.init(RepositoryListener.java:264) 		at org.apache.axis2.deployment.RepositoryListener.init2(RepositoryListener.java:69) 		at org.apache.axis2.deployment.RepositoryListener.<init>(RepositoryListener.java:64) 		at org.apache.axis2.deployment.DeploymentEngine.loadRepository(DeploymentEngine.java:158) 		at org.apache.axis2.deployment.WarBasedAxisConfigurator.getAxisConfiguration(WarBasedAxisConfigurator.java:228) 		at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:64) 		at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:584) 		at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:454) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:358) 		at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.init(ServletWrapperImpl.java:169) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1809) 		at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:98) 		at com.ibm.ws.webcontainer.webapp.WebApp.getServletWrapper(WebApp.java:1038) 		at com.ibm.ws.webcontainer.webapp.WebApp.getServletWrapper(WebApp.java:959) 		at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:638) 		at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinally(WebApp.java:436) 		at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:304) 		at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:100) 		at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:166) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:731) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:616) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:376) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:668) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1127) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1319) 		at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:610) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:944) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:740) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2051) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:385) 		at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:328) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$300(CompositionUnitMgrImpl.java:113) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:895) 		at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:349) 		at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1604) 	Caused by: java.lang.NullPointerException 		at org.apache.axis2.deployment.util.TempFileManager.recursiveDelete(TempFileManager.java:138) 		at org.apache.axis2.deployment.util.TempFileManager.<clinit>(TempFileManager.java:203) 		at java.lang.J9VMInternals.initializeImpl(Native Method) 		at java.lang.J9VMInternals.initialize(J9VMInternals.java:200) 		... 43 more
778||loadServicesFromUrl(URL repoURL) and loadRepositoryFromURL(URL repoURL) methods on DeploymentEngine are outdated. I found following issues. 		1.) Above two methods try to deploy modules/services based on files called services.list and modules.list without depend on repository. AFAIK these concepts were used very beginning and haven't maintain for many years. 		2.) These two methods do not respect to deployment features such as hot deployment, hot update etc. 		3.) Above methods do not compatible with other deployment approaches and completely ignore Axis2 Deployer architecture. In fact, above method populate Axis2 modules and service within method body themselves instead of calling corresponding Deployer.    		4.) Above methods do not care/related to repository scheduler job. 		Also I haven't notice any hint that someone use these methods for last few years. I don't see much advantage promoting another deployment approach ( i. e based on services.list and modules.list) again that we haven't maintain for many years.  Hence I suggest to remove these methods in future releases. For next release let's keep these methods but sync method bodies with current deployment architecture.
779||Index: modules/transport/http/src/org/apache/axis2/transport/http/AbstractHTTPSender.java 	=================================================================== 	--- modules/transport/http/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(revision 1333418) 	+++ modules/transport/http/src/org/apache/axis2/transport/http/AbstractHTTPSender.java	(working copy) 	@@ -268,8 +268,10 @@ 	         } 		         // to see the host is a proxy and in the proxy list - available in axis2.xml 	-        HostConfiguration config = new HostConfiguration(); 	- 	+		HostConfiguration config = client.getHostConfiguration(); 	+		if(config == null){ 	+			config = new HostConfiguration(); 	+		} 	         // one might need to set his own socket factory. Let's allow that case as well. 	         Protocol protocolHandler = 	                 (Protocol)msgCtx.getOptions().getProperty(HTTPConstants.CUSTOM_PROTOCOL_HANDLER);
780||If input wsdl/xsd includes at least one attribute/element of type anySimpleType, e.g: 	  <xs:complexType name="MyType"> 	    <xs:sequence /> 	    <xs:attribute name="name" type="xs:string" use="required" /> 	    <xs:attribute name="another" type="xs:anySimpleType" /> 	    <xs:attribute name="another2" type="xs:string" /> 	  </xs:complexType> 		.. then wsdl2java generated MyType.java contains "name" & "another2" but not "another" variable.
781||JAX-WS CallbackFuture and PollingFuture classes should be extended from AxisCallback instead of deprecated  Callback class.
782||I'm facing the same issue https://issues.apache.org/jira/browse/AXIS2-4036 in 1.7.0-SNAPSHOT. 	To be backward compatible axis2 adb need to use toPlainString() method provided by BigDecimal API. 		I have attached a patch with a test case to solve in adb. 		But what I more concerned is, whether axis2 need to handle serialization and de-serialization of BigDecimals in a configurable manner. Suppose, a java-adb-client need to manage his input and out data in scientific notation (in that case E-3 => 0.000), but axis2-adb always send 0.000. I feel, there should be a configurable way s.t. a client can choose to BigDecimal input/outputs in scientific notation or plain text notation.
783||I receive the following exception during startup of the axis2 osgi bundle: 		ERROR: Bundle org.apache.axis2.osgi [77] EventDispatcher: Error during dispatch. (java.util.ConcurrentModificationException) 	java.util.ConcurrentModificationException 		at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372) 		at java.util.AbstractList$Itr.next(AbstractList.java:343) 		at org.apache.axis2.osgi.deployment.tracker.BundleTracker$1.bundleChanged(BundleTracker.java:68) 		at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:807) 		at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:729) 		at org.apache.felix.framework.util.EventDispatcher.run(EventDispatcher.java:949) 		at org.apache.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:54) 		at org.apache.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:106) 		at java.lang.Thread.run(Thread.java:662) 		From looking at the code, I guess that a quick fix would be to make the following method synchronized: 	OSGiConfigurationContextFactory.updated(Dictionary dictionary)
784||Axis2 ServiceDeployer implements Deployer interface like any other Axis2 deployers but it does not use axis2.xml file instead ServiceDeployer is hard coded in DeploymentEngine. This approach having some limitations.  		1.) It is not possible to disable ServiceDeployer if a user only wants to use any other deployer. ( e.g - only JAX-WS deployer) but other deployers grant such features.  		2.) It is not possible to use  newly introduced custom ServiceBuilderExtension  feature with ServiceDeployer.  		3.) Standard  axis2.xml based <deployer> element use "extension" and "directory" attributes to define deployment unit type ( file extension) and container directory. But ServiceDeployer only work with AAR or exploded AAR archives also use "ServicesDirectory" parameter to specify directory this is no longer required with proposed solution.    		4.) It's kind of bad practice to have two deployment architectures within a single framework. It would be nice to port ServiceDeployer into well designed Deployer interface + axis2.xml based approach.  		5.) With above 3. it is possible to use customized ServiceDeployers easily.  			Following entry need to be added to axis2.xml files of existing applications to keep backward comparability if the applications upgraded to Axis2 1.7.0 or later versions.  		  <deployer extension=".aar" directory="services" class="org.apache.axis2.deployment.ServiceDeployer"> 	        <serviceBuilderExtension name ="jwsbuilderExt" class="org.apache.axis2.jaxws.framework.JAXWSServiceBuilderExtension"/> 	        <serviceBuilderExtension name ="wsdlbuilderExt" class="org.apache.axis2.deployment.WSDLServiceBuilderExtension"/> 	   </deployer>
785||When a axis2 service defined as an aar package in maven is used as dependency in a war webapp project all dependencies of the service are included in the webapp. There is no way to include the dependencies only in the service (.aar). 		To achieve this, the axis2 aar maven plugin could add optional dependencies, which are currently ignored (AbstractAarMojo.java @ 180). 		This is also the case for the axis2 mar maven plugin.
786||When importing/adding a new XSD Schema from a relative path AxisService#insertIntoNameTable() method remove "./" part from the path and used as the key of internal Schema map. When retrieving Schema from same map AxisService and HTTPWorker don't do above modification on relative path available on request URI hence not possible to retrieve imported Schema if it imported from a relative path.  		e.g - Adding a imported Schema use "map" as a key but when  retrieving it use "./map" as the key.       		Further in some cases this work for HTTPWorker because it try to load requested Schema from META-INF directory when it couldn't retrieve from Schema map but this is expensive operation.
787||At the moment above plug-in assume "src/main/axis2/service.wsdl" as the default WSDL location but "src/main/resources/service.wsdl" is a better choice.
788||This test is failing in the current trunk, 		Running org.apache.axis2.schema.SchemaCompilerTest 	Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.043 sec <<< FAILURE!
789||Write XMLStreamReader implementation to provide relavent XML info set from input JSON request stream and XMLStreamWriter implementation to write expected JSON response to wire.In this scenario we don't directly convert JSON <--> XML in advance but use XMLStreamReader/Wirter implementations to do when it is called.
790||While we are running the axis2server, when we try to undeploy a service(Here SimpleService) by deleting it from the repository/service directory, following exception shows in the console. 		[INFO] org.apache.axis2.deployment.DeploymentException: The SimpleService service group name is not valid.
791||See following example schema.  		 <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://sample"> 	           <xs:complexType name="limitedString"> 			<xs:simpleContent> 				<xs:restriction base="ns:rating"> 	                                <xs:minLength value="2"/> 	                                <xs:maxLength value="4"/> 					<xs:pattern value="([a-d])*" /> 				</xs:restriction> 			</xs:simpleContent> 		    </xs:complexType> 	           <xs:complexType name="rating"> 			<xs:simpleContent> 				<xs:restriction base="ns:anyString"> 	                                <xs:minLength value="2"/> 	                                <xs:maxLength value="8"/> 					<xs:pattern value="([a-z])*" /> 				</xs:restriction> 			</xs:simpleContent> 		    </xs:complexType> 		    <xs:complexType name="anyString"> 			<xs:simpleContent> 				<xs:extension base="xs:string" /> 			</xs:simpleContent> 		    </xs:complexType>             	        </xs:schema>
792||Axis2 REST guide contains following text 		"if the content type is text/xml and if the SOAPAction Header is missing, then the message is treated as a RESTful Message, if not it is treated as a usual SOAP Message."  		In summery 		content type - text/xml + SOAPAction present          =>   SOAP 1.1  	content type - text/xml + NO SOAPAction present    =>   POX (REST) 		In contrast Axis2 never implemented above logic and always consider text/xml as SOAP 1.1.  This issue can be solved by adding a condition to TransportUtils#getMessageFormatter() so that it will check "SOAPAction" header in addition to "text/xml" content type. 		Before I implement above solution I like see any objection from users and developers.
793||CommonsHTTPTransportSender new's up Commons HTTPClient3 HTTPSenderImpl and disallows its subclass's from overriding this implementation. Therefore when we tried to used HTTPClient4 we were unable to.
794||JSON xml stream API based approach stack when request content has a null, as a value.
795||At the moment in XmlNodeGenerator class use several methods in the same class to process and generate xmlNode which is an intermediate representation of operation XmlSchemalist. But for better understanding and designing it can be wrapped to two methods like processSchemaType(XmlSchemaType xmlSchemaType , XmlNode parentNode , XmlSchema schema) which process Complex and Simpel Types and processElement(XmlSchemaElement element, XmlNode parentNode , XmlSchema schema) which handle xmlSchema elements.
796||Only AbstractMessageReceiver check "ServiceTCCL" property and modify Classloader accordingly.  Application scoped services use DependencyManager#initService() method which does not check  "ServiceTCCL" property this can cause class loading issues when the services use frameworks like Spring, Hibernate etc. As a solution DependencyManager#initService() method should check  "ServiceTCCL" property.
797||Hi devs,  		Here i would like to suggest few modifications to the package names of JSON module.  	1. org.apache.axis2.json.impl --> org.apache.axis2.json.gson  as this explain the package content best 	2. org.apache.axis2.json.impl.utils ---> org.apache.axis2.json.gson.factory  as all classes(JsonObject , JSONType, XmlNode classes are used by XmlNodeGenerator and XmlNodeGenerator class is being used by GsonXMLStreamReader/Writer, as well as JsonUtils class is being used by Json message receivers ) under the utils package are doing some works to the major classes like GsonXMLStreamReader/ Writer , JsonRPCMessageReceiver and JsonRPCInOnlyMessageReceiver.  		Most importantly this modifications won't do any major problems to the users as those are newly added packages.
798||Axis2 client always add "SOAPAction " HTTP header but this header should not add for POX/JSON messages. "SOAPAction " should not present when "doingREST" true.
799||With new JSON support improvement, Axis2 users can use pure JSON requests to call ADB generated services. Here it uses XML Stream API base approach which was introduced with this new improvement. So it would be good to add a sample which demonstrate this procedure.
800||I developed a simple service which has following service class, 		package Test; 		import java.util.*; 		public class SimpleService { 			public List<Integer> helloService(List<Integer> s){ 			return s; 		} 		} 			When I deployed this as a AAR file and send following request 		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:test="http://Test"> 	   <soapenv:Header/> 	   <soapenv:Body> 	      <test:helloService> 	         <!--1 or more repetitions:--> 	         <test:s>6</test:s> 	         <test:s>6</test:s> 	         <test:s>6</test:s> 	      </test:helloService> 	   </soapenv:Body> 	</soapenv:Envelope> 		It gives me following response which is wrong, 		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> 	   <soapenv:Body> 	      <ns:helloServiceResponse xmlns:ns="http://Test"> 	         <ns:return xsi:type="axis2ns1:int" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/> 	         <ns:return xsi:type="axis2ns2:int" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/> 	         <ns:return xsi:type="axis2ns3:int" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/> 	      </ns:helloServiceResponse> 	   </soapenv:Body> 	</soapenv:Envelope> 		But this works when type is List<String>. I attached the aar file.
801||We recently decided [1] to move the Axis2 transports into Axis2 core. The purpose of this JIRA ticket is to track the commits related to that task. 		[1] http://mail-archives.apache.org/mod_mbox/axis-java-dev/201209.mbox/ajax/%3CCADx4_uX3RddxX1wNZVOkMzb2Tc21ODab2QuHKuQbTzCqsbU%3D8w%40mail.gmail.com%3E
802||Using the wsdl2java tool to generate a Java client to access a REST web service described with a WSDL 2.0, the generated client does not encode the symbol '+' in GET parameters. 		For example, if I have an URL "/get_url", and I set the parameter "param" to "x+x", the symbol "+" is not encoded, and therefore it is interpreted as a space on the server ("x x"). If I try to send the parameter encoded, i.e., "%2B", then "%252B" is received in the server. 		Therefore, it is not possible to send the '+' symbol in a GET parameter. 		I guess that it is caused by the definition of the field LEGAL_CHARACTERS_IN_QUERY in the interface org.apache.axis2.description.WSDL2Constants, which is set to "-._~!$'()*+,;=:@/?"
803||In case when wsdl contain xsd schema import and xsd schema placed in same directory as wsdl  	 and path to that files contains space char build failed with message "Illegal character in path at index 41: file:/C:/Work/workspace-sts-3.2.0.M2/Test project/src/main/wsdl/someWSDL.wsdl"
804||The "prettify(File)" method within "org.apache.axis2.util.XMLPrettyPrinter" creates a FileInputStream but does not close it explicitly. Hence XML files are locked for a while after this feature is being used; the stream is closed implicitly when the FileInputStream instance is garbage collected, but you never now when in time this happens. 		Since this class is used when running the code-generator, which we are using frequently within our application, this results in that we cannot tidy up files after this task has completed. 	Current workaround for us was to implement a custom Emitter and avoid running the XML pretty printing.
805||A version 1.1 WSDL was created and the wsdl2java command run to generate code stubs. The WSDL has 1 operation - echo - to return the string in the request.  The service class was implemented to return the request string. 	All ReST requests to the WSDL 1.1 web service return a blank response. SOAP requests work fine.
806||As discussed in [1], this jira will address the improvement to hide services from listServices view, if the hiddenService parameter is set, but still make it active/available. The current usage of hiddenService service parameter will be used for this improvement. 		[1] http://axis2.867.x6.nabble.com/hiding-services-td4916363.html
807||Currently in HTTPSenderImpl#obtainHTTPHeaderInformation, the Session Cookie string is constructed by checking only JSEESIONID/axis_session from response headers and then adding them as cookie string. It ignores other values which are coming with Set-Cookie from response headers. This will cause issues with session stickiness, if a client application tries to call some services via a load-balancer, where the load-balancer has its own way of handling session stickiness with its own cookie header. 		For example, if the requests are going through an Amazon ELB, it expect a cookie named as "AWSELB" to identify the correct node. But this will fail, if the client did not send the that cookie with the request, as axis2 client only sends the JSESSIONID. 		As a fix, we can remove the check for specific values (eg : JSESSIONID), and set whatever the Set-Cookie values coming with response headers as the Cookie string value. This will not break any existing apps because, it does not remove any values rather it adds those missing values.
808||An IllegalStateException with invalid BundleContext occurres during the shutdown process of the Axis2 OSGi bundle. 		2014-05-05T11:02:32.621 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.felix.fileinstall[org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller] 11:02:32.620] ServiceEvent UNREGISTERING 	2014-05-05T11:02:32.623 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.felix.fileinstall[org.osgi.service.url.URLStreamHandlerService] 11:02:32.623] ServiceEvent UNREGISTERING 	2014-05-05T11:02:32.626 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.felix.fileinstall[org.osgi.service.cm.ManagedServiceFactory] 11:02:32.625] ServiceEvent UNREGISTERING 	2014-05-05T11:02:32.626 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.felix.fileinstall 11:02:32.625] BundleEvent STOPPED 	2014-05-05T11:02:32.627 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.ws.commons.schema.XmlSchema 11:02:32.627] BundleEvent STOPPED 	2014-05-05T11:02:32.628 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.woden.woden-api 11:02:32.628] BundleEvent STOPPED 	2014-05-05T11:02:32.628 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.commons.io 11:02:32.628] BundleEvent STOPPED 	2014-05-05T11:02:32.629 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.httpcomponents.httpcore 11:02:32.628] BundleEvent STOPPED 	2014-05-05T11:02:32.629 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.commons.codec 11:02:32.628] BundleEvent STOPPED 	2014-05-05T11:02:32.629 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.axis2.osgi[org.osgi.service.cm.ManagedService] 11:02:32.629] ServiceEvent UNREGISTERING 	2014-05-05T11:02:32.634 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.axis2.osgi[org.apache.axis2.context.ConfigurationContext] 11:02:32.633] ServiceEvent UNREGISTERING 	2014-05-05T11:02:32.636 UTC ERROR [Thread-3|DCSOSGi:?] [org.apache.axis2.osgi 11:02:32.635] FrameworkEvent ERROR 	java.lang.IllegalStateException: Invalid BundleContext. 		at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514) 		at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:449) 		at org.apache.axis2.osgi.deployment.OSGiConfigurationContextFactory$AxisConfigServiceListener.serviceChanged(OSGiConfigurationContextFactory.java:158) 		at org.apache.felix.framework.util.EventDispatcher$4.run(EventDispatcher.java:925) 		at java.security.AccessController.doPrivileged(Native Method) 		at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:921) 		at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793) 		at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543) 		at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260) 		at org.apache.felix.framework.Felix.access$000(Felix.java:74) 		at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390) 		at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148) 		at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127) 		at org.apache.felix.framework.ServiceRegistry.unregisterServices(ServiceRegistry.java:191) 		at org.apache.felix.framework.Felix.stopBundle(Felix.java:2386) 		at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1214) 		at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295) 		at java.lang.Thread.run(Thread.java:744) 	2014-05-05T11:02:32.636 UTC  INFO [Thread-3|DCSOSGi:?] [org.apache.axis2.osgi[org.apache.axis2.transport.TransportListener] 11:02:32.636] ServiceEvent UNREGISTERING 	2014-05-05T11:02:32.637 UTC ERROR [Thread-3|DCSOSGi:?] [org.apache.axis2.osgi 11:02:32.637] FrameworkEvent ERROR 	java.lang.IllegalStateException: Invalid BundleContext. 		at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514) 		at org.apache.felix.framework.BundleContextImpl.getService(BundleContextImpl.java:449) 		at org.apache.axis2.osgi.deployment.OSGiConfigurationContextFactory$AxisConfigServiceListener.serviceChanged(OSGiConfigurationContextFactory.java:158) 		at org.apache.felix.framework.util.EventDispatcher$4.run(EventDispatcher.java:925) 		at java.security.AccessController.doPrivileged(Native Method) 		at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:921) 		at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793) 		at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543) 		at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4260) 		at org.apache.felix.framework.Felix.access$000(Felix.java:74) 		at org.apache.felix.framework.Felix$1.serviceChanged(Felix.java:390) 		at org.apache.felix.framework.ServiceRegistry.unregisterService(ServiceRegistry.java:148) 		at org.apache.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:127) 		at org.apache.felix.framework.ServiceRegistry.unregisterServices(ServiceRegistry.java:191) 		at org.apache.felix.framework.Felix.stopBundle(Felix.java:2386) 		at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1214) 		at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295) 		at java.lang.Thread.run(Thread.java:744)
809||If the logging level is set to DEBUG, a StackOverFlowException can be triggered by running toString() on an appropriate OperationDescriptionImpl. 		    ... 	    at java.lang.String.valueOf(String.java:2854) [:1.7.0_09] 	    at java.lang.StringBuilder.append(StringBuilder.java:128) [:1.7.0_09] 	    at org.apache.axis2.jaxws.description.impl.OperationDescriptionImpl.getSyncOperation(OperationDescriptionImpl.java:1013) 	    at org.apache.axis2.jaxws.description.impl.OperationDescriptionImpl.getAxisOperation(OperationDescriptionImpl.java:704) 	    at org.apache.axis2.jaxws.description.impl.OperationDescriptionImpl.toString(OperationDescriptionImpl.java:2300) 	    at java.lang.String.valueOf(String.java:2854) [:1.7.0_09] 	    ... 		1) toString() includes the code 'string.append("Axis Operation: " + getAxisOperation());' 	2) The first time getAxisOperation() is called, it calls getSyncOperation() 	3) The first time getSyncOperation() is called, the description is set to `this` if isJAXWSAsyncClientMethod() is false. 	4) Further on, if the logging is set to DEBUG level, toString() is called on the description, looping to (1)
810||DependencyManager#initService(ServiceGroupContext serviceGroupContext) method still use following code segment to create service objects. 		Object serviceImpl = implClass.newInstance(); 			This results into ignore defined ServiceObjectSuppliers. The main use case is "application" scoped Spring services get fail during the Axis2 server start up. During the start up ConfigurationContextFactory calls it's ConfigurationContextFactory#initApplicationScopeServices(ConfigurationContext configCtx) method which in turn calls DependencyManager#initService(ServiceGroupContext serviceGroupContext) method.
811||When creating a web service out of a WSDL which contains WS-Addressing Action attributes with format <prefix>:<value>, Axis2 will strip the "<prefix>:" part if the WSDL document contains a namespace declaration for <prefix> on some of the parent elements. For example, if the definition element contains the following namespace declaration: 		xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" 		And operation's input contains a wsaw:Action that starts with "http:": 		<wsdl:input message="ns:getVersionRequest" wsam:Action="http://axisversion.sample/VersionPortType/getVersionWSAMRequest"/> 		Then the result would be that the input AxisMessage is configured with an incorrect Action value of "//axisversion.sample/VersionPortType/getVersionWSAMRequest". 		I'm attaching a patch that contains a test case to verify this behavior - please see WSDL11ToAxisServiceBuilderTest.testGetVersionActions() method. 		I investigated the issue and I think this is caused by WSDL4J assuming wsaw:Action attribute's value is of QName type and thus tries to parse it as such, expecting that it might have a namespace prefix. I think this is wrong and WSDL4J has to be configured to process wsaw:Action values as simple literals rather than QNames. I have added a utility method for that, see: 		WSDLUtil.registerDefaultExtensionAttributeTypes 		This will register all WS-Addressing Action attribute flavors (for each known namespace) in WSDL ExtensionRegistry to be of String type. For this to work, the so configured ExtensionRegistry must be used whenever a WSDLReader is created, therefore I added an additional utility method to be used for creating WSDLReader instances: 		WSDLUtil.newWSDLReaderWithPopulatedExtensionRegistry 		I have replaced the regular WSDLFactory.newWSDLReader calls throughout Axis2 codebase with this new factory method. 	While doing this, I noticed that in the past this issue might have been identified and fixed in Axis2 CodeGenerationEngine alone: 		https://svn.apache.org/viewvc?view=revision&revision=1003032 		The attached patch is basically similar, but it would fix all other places in Axis2 code where WSDLReader instance is created.
812||We are currently using "Axis2-transport-base 1.0.0 " and the veracode analysis found a bug in this class "BaseUtils.java" line 246: 		Type:  Improper Resource Shutdown or Release 		Description: 		The application fails to release (or incorrectly releases) a system resource before it is made available for re-use. This 	condition often occurs with resources such as database connections or file handles. Most unreleased resource issues 	result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be 	possible to launch a denial of service attack by depleting the resource pool. 		Recommendations: 		When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as 	accounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources
813||I use MTOM to send files back and forward. I use the DataHandler. On one side:  		                    File serverFile = new File(finalPath.toString()); 	                    DataSource serverDs = new FileDataSource(serverFile);; 	                    dh = new DataHandler(serverDs); 		                    return new.RetrFileResponse().setRetrFileResponse(dh); 					... on the other side: 		    		OutputStream os = new FileOutputStream(new File("C:/TEMP/" + finalFileName)); 	    		OMAbstractFactory.getOMFactory()); 	        	DataSource ds = rfr.getRetrFileResponse().getDataSource(); 	        	rfr.getRetrFileResponse().writeTo(os); 	       		os.flush(); 	       		os.close(); 		It works perfectly well in the upload service (client to server).  	But the download version (server to client) makes the above mentioned exception (on the call '.getDataSource()'). 		Maybe it is related to jira issues:  	https://issues.apache.org/jira/browse/AXIS2-5487 	https://issues.apache.org/jira/browse/AXIS2-5469 	? If yes, where can I get Axis 1.7? Seems not to be downloadable yet? 	If not, how can I keep the stream open? And anyway, the datas should be in the soap message! So I don't see why it can't retrieve the datas though the stream is closed on the server! 		Can anybody help me please? I'd love to give further information! 		Here is the whole exception stack: 		ERROR [JHttp-38] 2015-04-09 20:39:24.317 ERROR 	org.apache.axiom.om.OMException: java.io.IOException: Attempted read on closed stream. 		at org.apache.axiom.attachments.PartContentFactory.createPartContent(PartContentFactory.java:153) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.PartImpl.fetch(PartImpl.java:176) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.PartImpl.getContent(PartImpl.java:149) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.PartImpl.getDataSource(PartImpl.java:234) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.PartDataHandler.getDataSource(PartDataHandler.java:50) ~[axiom-api-1.2.13.jar:1.2.13] 		at com.iflow.ws.server.octipus.WsOctiHello.testServiceRetrFile(WsOctiHello.java:571) ~[octipus.jar:na] 		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_75] 		at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:1.7.0_75] 		at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.7.0_75] 		at java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.7.0_75] 		at com.groiss.servlet.Dispatcher.service(Dispatcher.java:394) ~[ep.jar:9.0.18382] 		at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [javax.servlet-api.jar:3.1.0] 		at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at com.planetj.servlet.filter.compression.CompressingFilter.doFilter(CompressingFilter.java:293) [pjl-comp-filter-1.8.1.jar:na] 		at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:198) [javamelody-1.53.0.jar:na] 		at net.bull.javamelody.MonitoringFilter.doFilter(MonitoringFilter.java:176) [javamelody-1.53.0.jar:na] 		at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:224) [websocket-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.Server.handle(Server.java:497) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-io-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] 		at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] 		at java.lang.Thread.run(Unknown Source) [na:1.7.0_75] 	Caused by: java.io.IOException: Attempted read on closed stream. 		at org.apache.commons.httpclient.AutoCloseInputStream.isReadAllowed(AutoCloseInputStream.java:183) ~[commons-httpclient-3.1.jar:na] 		at org.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java:107) ~[commons-httpclient-3.1.jar:na] 		at java.io.FilterInputStream.read(Unknown Source) ~[na:1.7.0_75] 		at org.apache.axiom.om.util.DetachableInputStream.read(DetachableInputStream.java:147) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.james.mime4j.io.BufferedLineReaderInputStream.fillBuffer(BufferedLineReaderInputStream.java:111) ~[apache-mime4j-core-0.7.2.jar:0.7.2] 		at org.apache.james.mime4j.io.MimeBoundaryInputStream.fillBuffer(MimeBoundaryInputStream.java:223) ~[apache-mime4j-core-0.7.2.jar:0.7.2] 		at org.apache.james.mime4j.io.MimeBoundaryInputStream.read(MimeBoundaryInputStream.java:157) ~[apache-mime4j-core-0.7.2.jar:0.7.2] 		at org.apache.james.mime4j.io.BufferedLineReaderInputStream.fillBuffer(BufferedLineReaderInputStream.java:111) ~[apache-mime4j-core-0.7.2.jar:0.7.2] 		at org.apache.james.mime4j.io.BufferedLineReaderInputStream.read(BufferedLineReaderInputStream.java:158) ~[apache-mime4j-core-0.7.2.jar:0.7.2] 		at org.apache.james.mime4j.io.LineReaderInputStreamAdaptor.read(LineReaderInputStreamAdaptor.java:67) ~[apache-mime4j-core-0.7.2.jar:0.7.2] 		at java.io.FilterInputStream.read(Unknown Source) ~[na:1.7.0_75] 		at org.apache.axiom.attachments.impl.BufferUtils.inputStream2FileOutputStream(BufferUtils.java:183) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.impl.BufferUtils.inputStream2OutputStream(BufferUtils.java:69) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.PartContentOnFile.<init>(PartContentOnFile.java:62) ~[axiom-api-1.2.13.jar:1.2.13] 		at org.apache.axiom.attachments.PartContentFactory.createPartContent(PartContentFactory.java:134) ~[axiom-api-1.2.13.jar:1.2.13] 		... 38 common frames omitted 			... and here is the wsdl; upladFile is working perfectly. retrFile is not! 		<?xml version="1.0" encoding="UTF-8" standalone="no"?> 	<wsdl:definitions 		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 		xmlns:tns="http://.../" 		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 		xmlns:xsd="http://www.w3.org/2001/XMLSchema" 		targetNamespace="http://.../"> 		  <wsdl:types> 	    <xsd:schema targetNamespace="http://.../" 	    xmlns:xmime="http://www.w3.org/2005/05/xmlmime"> 		      <xsd:element name="SayHelloRequest"> 	        <xsd:complexType> 	          <xsd:sequence> 	            <xsd:element name="firstname"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	            <xsd:element name="lastname"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 	      <xsd:element name="SayHelloResponse"> 	        <xsd:complexType> 	          <xsd:sequence> 	            <xsd:element name="responseMsg" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 		   	  <xsd:element name="MoveFileRequest"> 	        <xsd:complexType> 	          <xsd:sequence> 	            <xsd:element name="fileName"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	            <xsd:element name="filePath"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 	      <xsd:element name="MoveFileResponse"> 	        <xsd:complexType> 	          <xsd:sequence> 				<xsd:element name="responseFile"  minOccurs="0" maxOccurs="1" type="xsd:base64Binary"/> 				<xsd:element name="responseCode"  type="xsd:int"/> 				<xsd:element name="errorMsg" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 			   	  <xsd:element name="RetrFileRequest"> 	        <xsd:complexType> 	          <xsd:sequence> 	            <xsd:element name="fileName"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	            <xsd:element name="filePath"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 	      <xsd:element name="RetrFileResponse" type="xsd:base64Binary"/> 		   	  <xsd:element name="UploadFileRequest"> 	        <xsd:complexType> 	          <xsd:sequence> 	          	<xsd:element name="payload"  minOccurs="0" maxOccurs="1" type="xsd:base64Binary"/> 	            <xsd:element name="fileName"  minOccurs="0" maxOccurs="1" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 	      <xsd:element name="UploadFileResponse"> 	        <xsd:complexType> 	          <xsd:sequence> 				<xsd:element name="responseCode"  type="xsd:int"/> 				<xsd:element name="errorMsg" type="xsd:string"/> 	          </xsd:sequence> 	        </xsd:complexType> 	      </xsd:element> 		    </xsd:schema> 	  </wsdl:types> 					  <wsdl:message name="SayHelloInput"> 	    <wsdl:part element="tns:SayHelloRequest" name="parameters"/> 	  </wsdl:message> 	  <wsdl:message name="SayHelloOutput"> 	    <wsdl:part element="tns:SayHelloResponse" name="parameters"/> 	  </wsdl:message> 		  <wsdl:message name="MoveFileInput"> 	    <wsdl:part element="tns:MoveFileRequest" name="parameters"/> 	  </wsdl:message> 	  <wsdl:message name="MoveFileOutput"> 	    <wsdl:part element="tns:MoveFileResponse" name="parameters"/> 	  </wsdl:message> 		  <wsdl:message name="RetrFileInput"> 	    <wsdl:part element="tns:RetrFileRequest" name="parameters"/> 	  </wsdl:message> 	  <wsdl:message name="RetrFileOutput"> 	    <wsdl:part element="tns:RetrFileResponse" name="parameters"/> 	  </wsdl:message> 		    <wsdl:message name="UploadFileInput"> 	    <wsdl:part element="tns:UploadFileRequest" name="parameters"/> 	  </wsdl:message> 	  <wsdl:message name="UploadFileOutput"> 	    <wsdl:part element="tns:UploadFileResponse" name="parameters"/> 	  </wsdl:message> 		  <wsdl:portType name="OctiHelloPort"> 	    <wsdl:operation name="sayHello"> 	      <wsdl:input message="tns:SayHelloInput"/> 	      <wsdl:output message="tns:SayHelloOutput"/> 	    </wsdl:operation> 	    <wsdl:operation name="moveFile"> 	    	<wsdl:input message="tns:MoveFileInput"/> 	    	<wsdl:output message="tns:MoveFileOutput"/> 	    </wsdl:operation> 		    <wsdl:operation name="retrFile"> 	    	<wsdl:input message="tns:RetrFileInput"/> 	    	<wsdl:output message="tns:RetrFileOutput"/> 	    </wsdl:operation> 		    <wsdl:operation name="uploadFile"> 	    	<wsdl:input message="tns:UploadFileInput"/> 	    	<wsdl:output message="tns:UploadFileOutput"/> 	    </wsdl:operation> 	  </wsdl:portType> 		  <wsdl:binding name="OctiHelloSOAPBinding" type="tns:OctiHelloPort"> 	    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/> 		    <wsdl:operation name="sayHello"> 	      <soap:operation soapAction="http://.../sayHello"/> 	      <wsdl:input> 	        <soap:body use="literal"/> 	      </wsdl:input> 	      <wsdl:output> 	        <soap:body use="literal"/> 	      </wsdl:output> 	    </wsdl:operation> 		    <wsdl:operation name="moveFile"> 	      <soap:operation soapAction="http://.../moveFile"/> 	      <wsdl:input> 	        <soap:body use="literal"/> 	      </wsdl:input> 	      <wsdl:output> 	        <soap:body use="literal"/> 	      </wsdl:output> 	    </wsdl:operation> 		    <wsdl:operation name="uploadFile"> 	      <soap:operation soapAction="http://.../uploadFile"/> 	      <wsdl:input> 	        <soap:body use="literal"/> 	      </wsdl:input> 	      <wsdl:output> 	        <soap:body use="literal"/> 	      </wsdl:output> 	    </wsdl:operation> 		    <wsdl:operation name="retrFile"> 	      <soap:operation soapAction="http://.../retrFile"/> 	      <wsdl:input> 	        <soap:body use="literal"/> 	      </wsdl:input> 	      <wsdl:output> 	        <soap:body use="literal"/> 	      </wsdl:output> 	    </wsdl:operation> 					  </wsdl:binding> 		  <wsdl:service name="OctiHelloService"> 	      <wsdl:port binding="tns:OctiHelloSOAPBinding" name="OctiHelloSOAP"> 	      <soap:address location="http://localhost:8180/wf/services.axis2/OctiHelloService"/> 	    </wsdl:port> 	  </wsdl:service> 	</wsdl:definitions>
814||Build fails almost all code generation parts due to the new XML security properties in JAXB 1.5, introduced in Java 8. This can be resolve by setting javax.xml.accessExternalSchema=all .
815||AXIS2 webservice with HTTPS is not working on websphere 8.5.5.3 		Followed  		http://axis.apache.org/axis2/java/core/docs/app_server.html#WebSphere 		but getting following error 			[9/11/15 17:23:42:062 IST] 0000003d SystemOut     O ERROR WarBasedAxisConfigurator - org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 	org.apache.axis2.deployment.DeploymentException: org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 		at org.apache.axis2.deployment.util.Utils.loadHandler(Utils.java:151) 		at org.apache.axis2.deployment.AxisConfigBuilder.processPhaseList(AxisConfigBuilder.java:546) 		at org.apache.axis2.deployment.AxisConfigBuilder.processPhaseOrders(AxisConfigBuilder.java:577) 		at org.apache.axis2.deployment.AxisConfigBuilder.populateConfig(AxisConfigBuilder.java:149) 		at org.apache.axis2.deployment.DeploymentEngine.populateAxisConfiguration(DeploymentEngine.java:857) 		at org.apache.axis2.deployment.WarBasedAxisConfigurator.<init>(WarBasedAxisConfigurator.java:156) 		at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:584) 		at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:454) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:342) 		at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.init(ServletWrapperImpl.java:168) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.loadOnStartupCheck(ServletWrapper.java:1366) 		at com.ibm.ws.webcontainer.webapp.WebApp.doLoadOnStartupActions(WebApp.java:617) 		at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinally(WebApp.java:587) 		at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:425) 		at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88) 		at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:169) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:749) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:634) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:426) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:718) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1177) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1370) 		at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:639) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:968) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:776) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl$5.run(ApplicationMgrImpl.java:2195) 		at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5384) 		at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5600) 		at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2200) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389) 		at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:119) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:938) 		at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:502) 		at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1864) 	Caused by: java.lang.ClassCastException: org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 		at org.apache.axis2.deployment.util.Utils.loadHandler(Utils.java:135) 		... 36 more 	[9/11/15 17:23:42:116 IST] 0000003d FfdcProvider  W com.ibm.ws.ffdc.impl.FfdcProvider logIncident FFDC1003I: FFDC Incident emitted on /opt/IBM/WebSphere/AppServer/profiles/AppSrv06/logs/ffdc/server1_ac6020a2_15.09.11_17.23.42.0688373851323172329765.txt com.ibm.ws.webcontainer.servlet.ServletInstance.init 172 	[9/11/15 17:23:42:117 IST] 0000003d ServletWrappe E com.ibm.ws.webcontainer.servlet.ServletWrapper init Uncaught.init.exception.thrown.by.servlet 	[9/11/15 17:23:42:120 IST] 0000003d webapp        E com.ibm.ws.webcontainer.webapp.WebApp commonInitializationFinally SRVE0266E: Error occured while initializing servlets: {0} 	                                 javax.servlet.ServletException: javax.servlet.ServletException: org.apache.axis2.deployment.DeploymentException: org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 		at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:462) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:342) 		at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.init(ServletWrapperImpl.java:168) 		at com.ibm.ws.webcontainer.servlet.ServletWrapper.loadOnStartupCheck(ServletWrapper.java:1366) 		at com.ibm.ws.webcontainer.webapp.WebApp.doLoadOnStartupActions(WebApp.java:617) 		at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinally(WebApp.java:587) 		at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:425) 		at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88) 		at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:169) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:749) 		at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:634) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:426) 		at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:718) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1177) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1370) 		at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:639) 		at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:968) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:776) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl$5.run(ApplicationMgrImpl.java:2195) 		at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5384) 		at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5600) 		at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255) 		at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2200) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389) 		at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:119) 		at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:938) 		at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:502) 		at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1864) 	Caused by: javax.servlet.ServletException: org.apache.axis2.deployment.DeploymentException: org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 		at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:591) 		at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:454) 		... 29 more 	Caused by: org.apache.axis2.deployment.DeploymentException: org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 		at org.apache.axis2.deployment.util.Utils.loadHandler(Utils.java:151) 		at org.apache.axis2.deployment.AxisConfigBuilder.processPhaseList(AxisConfigBuilder.java:546) 		at org.apache.axis2.deployment.AxisConfigBuilder.processPhaseOrders(AxisConfigBuilder.java:577) 		at org.apache.axis2.deployment.AxisConfigBuilder.populateConfig(AxisConfigBuilder.java:149) 		at org.apache.axis2.deployment.DeploymentEngine.populateAxisConfiguration(DeploymentEngine.java:857) 		at org.apache.axis2.deployment.WarBasedAxisConfigurator.<init>(WarBasedAxisConfigurator.java:156) 		at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:584) 		... 30 more 	Caused by: java.lang.ClassCastException: org.apache.axis2.jaxws.dispatchers.GenericProviderDispatcher incompatible with org.apache.axis2.engine.Handler 		at org.apache.axis2.deployment.util.Utils.loadHandler(Utils.java:135) 		... 36 more 		[9/11/15 17:23:42:125 IST] 0000003d webcontainer  I com.ibm.ws.webcontainer.VirtualHostImpl addWebApplication SRVE0250I: Web Module MDM has been bound to default_host[*:80,*:80,*:9445,*:5065,*:5064,*:443]. 	[9/11/15 17:23:42:138 IST] 0000003e webapp        I com.ibm.ws.webcontainer.webapp.WebGroupImpl WebGroup SRVE0169I: Loading Web Module: adminconsole redirector. 	[9/11/15 17:23:42:149 IST] 0000003e WASSessionCor I SessionContextRegistry getSessionContext SESN0176I: Will create a new session context for application key admin_host/admin
816||Hi, 		When creating a JarFileClassLoader with URLs built from File with spaces (using File#toURI().toURL(), so that the spaces are correctly handled up to the point we have an URL), then UrlResourceFinder#rebuildClassPath() will then transform these URLs back to File but will fail to transform them properly when they contains spaces. 		I think the proper way to convert an URL to a File is to call new File(url.toURI()) and not simply new File(url.getPath)!
817||When deploying a web service archive with 'useOriginalwsdl=true' and a wsdl which imports the bindings from another document, the WSDL11ToAxisServiceBuilder fails with "Cannot Determine the MEP" exception. 	The issue seems to be caused by wsdl4j which does not properly populate binding's port type operations, this is reported in wsdl4j jira: 		https://sourceforge.net/p/wsdl4j/bugs/39/ 		Additionally, since Axis2 will do a depth-first search in imported wsdls to find the port type, it will not use the port type in the parent wsdl, but the unpopulated/undefined port type in the bindings' wsdl.  		I'm providing an 'EchoService.aar' that demonstrates the issue - please raise Axis2 log level to DEBUG to see the exception.
